<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank</title>
  
  <subtitle>Your heart is free. Have the courage to follow it.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linraner.github.io/"/>
  <updated>2018-10-15T00:00:01.154Z</updated>
  <id>http://linraner.github.io/</id>
  
  <author>
    <name>Frank</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java8 Stream</title>
    <link href="http://linraner.github.io/2018/10/15/Java8%20Stream/"/>
    <id>http://linraner.github.io/2018/10/15/Java8 Stream/</id>
    <published>2018-10-14T23:58:07.211Z</published>
    <updated>2018-10-15T00:00:01.154Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="java" scheme="http://linraner.github.io/tags/java/"/>
    
      <category term="note" scheme="http://linraner.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Date AND Time API</title>
    <link href="http://linraner.github.io/2018/10/05/Java8%20Date%20Time%20API/"/>
    <id>http://linraner.github.io/2018/10/05/Java8 Date Time API/</id>
    <published>2018-10-05T10:16:21.000Z</published>
    <updated>2018-10-30T03:22:16.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java8-引入了新的时间类"><a href="#Java8-引入了新的时间类" class="headerlink" title="Java8 引入了新的时间类"></a>Java8 引入了新的时间类</h2><h3 id="使用-LocalDate-和-LocalTime"><a href="#使用-LocalDate-和-LocalTime" class="headerlink" title="使用 LocalDate 和 LocalTime"></a>使用 <code>LocalDate</code> 和 <code>LocalTime</code></h3><p>创建 <code>LocalDate</code> 对象并读取值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//2013-03-06</span></div><div class="line">LocalDate date = LocalDate.of(<span class="number">2012</span>,<span class="number">03</span>,<span class="number">06</span>);</div><div class="line"><span class="comment">//2012</span></div><div class="line"><span class="keyword">int</span> year = date.getYear();</div><div class="line"><span class="comment">//MARCH</span></div><div class="line">Month month = date.getMonth();</div><div class="line"><span class="comment">//TUESDAY</span></div><div class="line">DayOfWeek dow = date.getDayOfWeek();</div><div class="line"><span class="comment">//6</span></div><div class="line"><span class="keyword">int</span> day = date.getDayOfMonth();</div><div class="line"><span class="comment">//31</span></div><div class="line"><span class="keyword">int</span> len = date.lengthOfMonth();</div><div class="line"><span class="comment">//false</span></div><div class="line"><span class="keyword">boolean</span> leap = date.isLeapYear();</div><div class="line"><span class="comment">//使用工厂方法获取系统日期</span></div><div class="line">LocalDate today = LocalDate.now();</div><div class="line">LocalTime time = LocalTime.now().withNano(<span class="number">0</span>);<span class="comment">//去除毫秒</span></div></pre></td></tr></table></figure></p><p><code>TemporalField</code> 是一个接口, 定义了如何访问 <code>temporal</code> 对象某个字段的值. <code>ChronoField</code> 枚举实现这一接口.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> year = date.get(ChronoField.YEAR);</div><div class="line"><span class="keyword">int</span> month = date.get(ChronoField.MONTH_OF_YEAR);</div><div class="line"><span class="keyword">int</span> day = date.get(ChronoField.DAY_OF_MONTH);</div></pre></td></tr></table></figure><p><code>LocalDate</code> 和 <code>LocalTime</code> 都可以解析字符串创建.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LocalDate date = LocalDate.parse(<span class="string">"2012-12-22"</span>);</div><div class="line">LocalTime time = LocalTime.parse(<span class="string">"22:22:22"</span>);</div></pre></td></tr></table></figure><h3 id="操作、解析和格式化"><a href="#操作、解析和格式化" class="headerlink" title="操作、解析和格式化"></a>操作、解析和格式化</h3><h4 id="使用-TemporalAdjuster"><a href="#使用-TemporalAdjuster" class="headerlink" title="使用 TemporalAdjuster"></a>使用 <code>TemporalAdjuster</code></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java8-引入了新的时间类&quot;&gt;&lt;a href=&quot;#Java8-引入了新的时间类&quot; class=&quot;headerlink&quot; title=&quot;Java8 引入了新的时间类&quot;&gt;&lt;/a&gt;Java8 引入了新的时间类&lt;/h2&gt;&lt;h3 id=&quot;使用-LocalDate-和-Lo
      
    
    </summary>
    
    
      <category term="java" scheme="http://linraner.github.io/tags/java/"/>
    
      <category term="note" scheme="http://linraner.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JSP 九大内置对象常用方法</title>
    <link href="http://linraner.github.io/2018/10/01/JSP%20%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://linraner.github.io/2018/10/01/JSP 九大内置对象常用方法/</id>
    <published>2018-10-01T10:16:21.000Z</published>
    <updated>2018-10-17T07:13:17.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-request-对象常用方法"><a href="#1-request-对象常用方法" class="headerlink" title="1. request 对象常用方法"></a>1. <code>request</code> 对象常用方法</h2><p><code>request</code> 是来自客户端的请求. 客户端的请求信息封装在 <code>request</code> 对象中. 以下 <code>HttpServletRequest</code> 类的实例.</p><table><thead><tr><th>方法 ( 类型 + 方法名 )</th><th>描述</th></tr></thead><tbody><tr><td>String getParameter(String strTextName)</td><td>获取表单提交信息</td></tr><tr><td>Enumeration getParameterNames()</td><td>返回可用参数的枚举</td></tr><tr><td>String[] getParameterValues(String name)</td><td>返回包含参数 name 的所有的数组</td></tr><tr><td>Enumeration getAttributeNames()</td><td>返回所有属性名的属性值</td></tr><tr><td>Object getAttribute(String name)</td><td>返回指定属性的属性值</td></tr><tr><td>String getCharacterEncoding()</td><td>返回字节编码方式</td></tr><tr><td>String getProtocol()</td><td>获取用户使用的协议</td></tr><tr><td>String getServletPath()</td><td>获取用户提交信息的页面</td></tr><tr><td>String getMethod()</td><td>获取客户提交信息的方式</td></tr><tr><td>BufferReader getHeader()</td><td>获取 HTTP 头文件的 accept、accept-encoding 和 Host 的值</td></tr><tr><td>String getRemoteAddr()</td><td>获取客户的 IP 地址</td></tr><tr><td>String getRemoteHost()</td><td>获取客户机的名称</td></tr><tr><td>String getserverName()</td><td>获取服务器的名称</td></tr><tr><td>int getServerPort()</td><td>获取服务器端口号</td></tr></tbody></table><h2 id="2-resopnse-对象常用方法"><a href="#2-resopnse-对象常用方法" class="headerlink" title="2. resopnse 对象常用方法"></a>2. <code>resopnse</code> 对象常用方法</h2><p><code>resopnse</code> 对象代表的是对客户端的相应. 向客户端发送文字时直接使用. 以下是 <code>HttpServletResopnse</code> 类的实例.</p><table><thead><tr><th>方法 ( 类型 + 方法名 )</th><th>描述</th></tr></thead><tbody><tr><td>String getCharacterEncoding()</td><td>返回响应用的是什么字符编码</td></tr><tr><td>ServletOutputStream getOutputStream()</td><td>返回响应的一个二进制输出流</td></tr><tr><td>PrintWrite getWrite()</td><td>返回可以向客户端输出字符的一个对象</td></tr><tr><td>void setContentLength(int len)</td><td>设置响应头长度</td></tr><tr><td>void setContentTye(String type)</td><td>设置响应的 MIME 类型</td></tr><tr><td>void sendRedirect(Java.lang.String location)</td><td>重新定向客户端的请求</td></tr></tbody></table><a id="more"></a><h2 id="3-session-常用方法"><a href="#3-session-常用方法" class="headerlink" title="3. session 常用方法"></a>3. <code>session</code> 常用方法</h2><p><code>session</code> 指的是客户端与服务器的一次回话, 从客户连接到服务器的一个 WebApplication 开始, 直到客户端与服务器断开连接为止. 它是 <code>HttpSession</code> 类的实例.</p><table><thead><tr><th>方法 ( 类型 + 方法名 )</th><th>描述</th></tr></thead><tbody><tr><td>long getCreationTime()</td><td>创建 session 创建时间</td></tr><tr><td>public String getId()</td><td>返回 session 创建时JSP引擎为它设置的唯一ID号</td></tr><tr><td>long getLastAccessedTime()</td><td>返回 session 里客户端最近一次请求时间</td></tr><tr><td>int getMaxInactiveInterval()</td><td>返回两次请求间隔多长时间此 session 被取消</td></tr><tr><td>String[] getValueNames()</td><td>返回一个包含此 session 中所有可用属性的数组</td></tr><tr><td>void invalidate()</td><td>取消 session , 使 session 不可用</td></tr><tr><td>boolean isNew()</td><td>返回服务器创建爱你的一个 session , 客户端是否已经加入</td></tr><tr><td>void removeValue(String name)</td><td>删除 session 中指定的属性</td></tr><tr><td>void setMaxInactiveInterval()</td><td>session 被取消 (ms)</td></tr></tbody></table><h2 id="4-out-常用方法"><a href="#4-out-常用方法" class="headerlink" title="4. out 常用方法"></a>4. <code>out</code> 常用方法</h2><p><code>out</code> 对象是 <code>JspWriter</code> 类的实例, 是向客户端输出内容常用的对象.</p><table><thead><tr><th>方法 ( 类型 + 方法名 )</th><th>描述</th></tr></thead><tbody><tr><td>void clear()</td><td>清除缓冲区的内容</td></tr><tr><td>void clearBuffer()</td><td>清除缓冲区的当前内容</td></tr><tr><td>void flush()</td><td>清空流</td></tr><tr><td>int getBufferSize()</td><td>返回缓冲区以字节数的大小,如果不设置为0</td></tr><tr><td>int getRemaining()</td><td>返回缓冲区还有多少剩余可用</td></tr><tr><td>bool isAutoFlush()</td><td>返回缓冲区满时,是自动清空还是抛出异常</td></tr><tr><td>void close()</td><td>关闭输出流</td></tr></tbody></table><h2 id="5-page-常用方法"><a href="#5-page-常用方法" class="headerlink" title="5. page 常用方法"></a>5. <code>page</code> 常用方法</h2><p><code>page</code> 指当前 <code>JSP</code> 页面本身, 有点像类中的 <code>this</code> 指针, 它是 <code>java.langlObject</code> 类的实例. 「page」对象代表正在运行的由 <code>jsp</code> 文件产生的类对象.</p><table><thead><tr><th>方法 ( 类型 + 方法名 )</th><th>描述</th></tr></thead><tbody><tr><td>class getClass()</td><td>返回此 Object 的类</td></tr><tr><td>int hashCode()</td><td>返回此 Object 的 hash 码</td></tr><tr><td>boolean equals(Object obj)</td><td>判断此 Object 是否与指定的 Object 对象相等</td></tr><tr><td>void copy(Object obj)</td><td>把此 Object 拷贝到指定的 Object 对象中</td></tr><tr><td>Object clone()</td><td>克隆此 Object 对象</td></tr><tr><td>String toString()</td><td>把此 Object 对象转换成 String 类的对象</td></tr><tr><td>void notify()</td><td>唤醒一个等待的进程</td></tr><tr><td>void notifyAll()</td><td>唤醒所有等待的进程</td></tr><tr><td>void wait(int timeout)</td><td>使一个进程处于等待直到 timeout 结束或者被唤醒</td></tr><tr><td>void wait()</td><td>使一个线程处于等待直到被唤醒</td></tr><tr><td>void enterMonitor()</td><td>对 Object 进行加锁</td></tr><tr><td>void exitMonitor()</td><td>对 Object 进行开锁</td></tr></tbody></table><h2 id="6-application-常用方法"><a href="#6-application-常用方法" class="headerlink" title="6. application 常用方法"></a>6. <code>application</code> 常用方法</h2><p><code>application</code> 实现了用户间数据的共享, 可存放全局变量. 它开始于服务器的启动, 直到服务器的关闭, 在此期间, 此对象将一直存在; 这样在用户的前后连接或者不同用户之间的连接中, 可以对此对象的同一属性进行操作; 在任何地方对此对象属性的操作, 都将影响到其他对象对此的访问. 服务器的启动和关闭决定了 <code>application</code> 对象的生命. 它是 <code>ServletContest</code>类的实例.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-request-对象常用方法&quot;&gt;&lt;a href=&quot;#1-request-对象常用方法&quot; class=&quot;headerlink&quot; title=&quot;1. request 对象常用方法&quot;&gt;&lt;/a&gt;1. &lt;code&gt;request&lt;/code&gt; 对象常用方法&lt;/h2&gt;&lt;p&gt;&lt;code&gt;request&lt;/code&gt; 是来自客户端的请求. 客户端的请求信息封装在 &lt;code&gt;request&lt;/code&gt; 对象中. 以下 &lt;code&gt;HttpServletRequest&lt;/code&gt; 类的实例.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法 ( 类型 + 方法名 )&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;String getParameter(String strTextName)&lt;/td&gt;
&lt;td&gt;获取表单提交信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enumeration getParameterNames()&lt;/td&gt;
&lt;td&gt;返回可用参数的枚举&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String[] getParameterValues(String name)&lt;/td&gt;
&lt;td&gt;返回包含参数 name 的所有的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enumeration getAttributeNames()&lt;/td&gt;
&lt;td&gt;返回所有属性名的属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object getAttribute(String name)&lt;/td&gt;
&lt;td&gt;返回指定属性的属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getCharacterEncoding()&lt;/td&gt;
&lt;td&gt;返回字节编码方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getProtocol()&lt;/td&gt;
&lt;td&gt;获取用户使用的协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getServletPath()&lt;/td&gt;
&lt;td&gt;获取用户提交信息的页面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getMethod()&lt;/td&gt;
&lt;td&gt;获取客户提交信息的方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BufferReader getHeader()&lt;/td&gt;
&lt;td&gt;获取 HTTP 头文件的 accept、accept-encoding 和 Host 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getRemoteAddr()&lt;/td&gt;
&lt;td&gt;获取客户的 IP 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getRemoteHost()&lt;/td&gt;
&lt;td&gt;获取客户机的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getserverName()&lt;/td&gt;
&lt;td&gt;获取服务器的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int getServerPort()&lt;/td&gt;
&lt;td&gt;获取服务器端口号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;2-resopnse-对象常用方法&quot;&gt;&lt;a href=&quot;#2-resopnse-对象常用方法&quot; class=&quot;headerlink&quot; title=&quot;2. resopnse 对象常用方法&quot;&gt;&lt;/a&gt;2. &lt;code&gt;resopnse&lt;/code&gt; 对象常用方法&lt;/h2&gt;&lt;p&gt;&lt;code&gt;resopnse&lt;/code&gt; 对象代表的是对客户端的相应. 向客户端发送文字时直接使用. 以下是 &lt;code&gt;HttpServletResopnse&lt;/code&gt; 类的实例.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法 ( 类型 + 方法名 )&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;String getCharacterEncoding()&lt;/td&gt;
&lt;td&gt;返回响应用的是什么字符编码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ServletOutputStream getOutputStream()&lt;/td&gt;
&lt;td&gt;返回响应的一个二进制输出流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PrintWrite getWrite()&lt;/td&gt;
&lt;td&gt;返回可以向客户端输出字符的一个对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void setContentLength(int len)&lt;/td&gt;
&lt;td&gt;设置响应头长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void setContentTye(String type)&lt;/td&gt;
&lt;td&gt;设置响应的 MIME 类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void sendRedirect(Java.lang.String location)&lt;/td&gt;
&lt;td&gt;重新定向客户端的请求&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="JSP" scheme="http://linraner.github.io/tags/JSP/"/>
    
      <category term="Java" scheme="http://linraner.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>九月  (海子)</title>
    <link href="http://linraner.github.io/2018/09/28/%E4%B9%9D%E6%9C%88/"/>
    <id>http://linraner.github.io/2018/09/28/九月/</id>
    <published>2018-09-28T15:20:13.520Z</published>
    <updated>2018-09-03T07:23:53.053Z</updated>
    
    <content type="html"><![CDATA[<p>目击众神死亡的草原上野花一片<br>远在远方的风比远方更远<br>我的琴声呜咽 泪水全无<br>我把这远方的远归还草原<br>一个叫木头 一个叫马尾<br>我的琴声呜咽 泪水全无</p><p>远方只有在死亡中凝聚野花一片<br>明月如镜高悬草原映照千年岁月<br>我的琴声呜咽 泪水全无<br>只身打马过草原</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目击众神死亡的草原上野花一片&lt;br&gt;远在远方的风比远方更远&lt;br&gt;我的琴声呜咽 泪水全无&lt;br&gt;我把这远方的远归还草原&lt;br&gt;一个叫木头 一个叫马尾&lt;br&gt;我的琴声呜咽 泪水全无&lt;/p&gt;
&lt;p&gt;远方只有在死亡中凝聚野花一片&lt;br&gt;明月如镜高悬草原映照千年岁月&lt;br&gt;我的琴声
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://linraner.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心情" scheme="http://linraner.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>lambda表达式</title>
    <link href="http://linraner.github.io/2018/09/28/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://linraner.github.io/2018/09/28/lambda表达式/</id>
    <published>2018-09-28T15:20:13.474Z</published>
    <updated>2018-07-16T00:30:14.706Z</updated>
    
    <content type="html"><![CDATA[<p>lambda表达式是一行函数，是函数式编程的一种特性。</p><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>lambda &lt;参数&gt;: 表达式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> a,b: a + b</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(f)</div><div class="line"><span class="comment">#&lt;type 'function'&gt;</span></div></pre></td></tr></table></figure></p><p>获取整除2的数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(filter(<span class="keyword">lambda</span> x: x%<span class="number">2</span>==<span class="number">0</span>, range(<span class="number">10</span>)))</div><div class="line"><span class="comment">#[0, 2, 4, 6, 8]</span></div></pre></td></tr></table></figure></p><p>列表并行排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>];list2 = [<span class="number">9</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = zip(list1, list2)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = sorted(data)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list1, list2 = map(<span class="keyword">lambda</span> t: list(t), zip(*data))</div></pre></td></tr></table></figure></p><h2 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h2><a id="more"></a><p>c++里的形式是这样的<br>[capture list] (parameter list) -&gt;return type {function body}</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//call the func.</span></div><div class="line">    <span class="keyword">auto</span> f1 = []() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"test"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;; </div><div class="line">    f1();</div><div class="line">    <span class="keyword">int</span> y = <span class="number">2</span>;</div><div class="line">    <span class="keyword">auto</span> f2 = [y](<span class="keyword">int</span> x) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; x + y &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;;</div><div class="line">    f2(<span class="number">4</span>);</div><div class="line">    <span class="comment">//STL</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</div><div class="line">        v.push_back(i);</div><div class="line">    &#125;</div><div class="line">    for_each(v.begin(), v.end(), [](<span class="keyword">int</span> n) &#123; </div><div class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">" "</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;lambda表达式是一行函数，是函数式编程的一种特性。&lt;/p&gt;
&lt;h2 id=&quot;python&quot;&gt;&lt;a href=&quot;#python&quot; class=&quot;headerlink&quot; title=&quot;python&quot;&gt;&lt;/a&gt;python&lt;/h2&gt;&lt;p&gt;lambda &amp;lt;参数&amp;gt;: 表达式&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;f = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; a,b: a + b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;type(f)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&amp;lt;type &#39;function&#39;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;获取整除2的数字&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list(filter(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, range(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#[0, 2, 4, 6, 8]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;列表并行排序&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];list2 = [&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = zip(list1, list2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = sorted(data)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list1, list2 = map(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; t: list(t), zip(*data))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;cpp&quot;&gt;&lt;a href=&quot;#cpp&quot; class=&quot;headerlink&quot; title=&quot;cpp&quot;&gt;&lt;/a&gt;cpp&lt;/h2&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://linraner.github.io/tags/python/"/>
    
      <category term="函数式编程" scheme="http://linraner.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="cpp" scheme="http://linraner.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Django重置后台密码</title>
    <link href="http://linraner.github.io/2018/09/28/Django%E9%87%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E5%AF%86%E7%A0%81/"/>
    <id>http://linraner.github.io/2018/09/28/Django重置后台密码/</id>
    <published>2018-09-28T15:20:13.458Z</published>
    <updated>2018-07-11T01:18:51.620Z</updated>
    
    <content type="html"><![CDATA[<p>emmm时间长忘记密码了</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> python manage.py shell</div></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</div><div class="line">In [<span class="number">2</span>]: user = User.objects.get(username=<span class="string">'Username'</span>)</div><div class="line">In [<span class="number">3</span>]: user.set_password(<span class="string">'Password'</span>)</div><div class="line">In [<span class="number">4</span>]: user.save()</div><div class="line">In [<span class="number">5</span>]: exit()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;emmm时间长忘记密码了&lt;/p&gt;
&lt;h3 id=&quot;执行&quot;&gt;&lt;a href=&quot;#执行&quot; class=&quot;headerlink&quot; title=&quot;执行&quot;&gt;&lt;/a&gt;执行&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
      <category term="Django" scheme="http://linraner.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>c++的字符串与数字的转换</title>
    <link href="http://linraner.github.io/2018/09/28/c++%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>http://linraner.github.io/2018/09/28/c++的字符串与数字的转换/</id>
    <published>2018-09-28T15:20:13.443Z</published>
    <updated>2018-07-01T16:59:10.242Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数字转字符串"><a href="#数字转字符串" class="headerlink" title="数字转字符串"></a>数字转字符串</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="keyword">double</span> a = <span class="number">123.456</span>;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="built_in">stringstream</span> ss;</div><div class="line">ss &lt;&lt; a;</div><div class="line">ss &gt;&gt; s;</div><div class="line">ss.clear();</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; m;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">m[i] = i + <span class="string">'0'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</div><div class="line"><span class="keyword">double</span> a = <span class="number">123.456</span>;</div><div class="line"><span class="built_in">sprintf</span>(str, <span class="string">"%.3lf"</span>, a);</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> a=<span class="number">175</span>;</div><div class="line"><span class="built_in">sprintf</span>(str,<span class="string">"%x"</span>,a);<span class="comment">//10进制转换成16进制，如果输出大写的字母是sprintf(str,"%X",a)</span></div></pre></td></tr></table></figure><h3 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h3><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="built_in">string</span> s = <span class="string">"123.456"</span>;</div><div class="line"><span class="keyword">double</span> a;</div><div class="line"><span class="built_in">stringstream</span> ss;</div><div class="line">ss &lt;&lt; s;</div><div class="line">ss &gt;&gt; a;</div><div class="line">ss.clear();</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    m[i+<span class="string">'0'</span>] = i;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">char</span> str[] = <span class="string">"123.456"</span>;</div><div class="line"><span class="keyword">double</span> a;</div><div class="line"><span class="built_in">sscanf</span>(str, <span class="string">"%lf"</span>, &amp;a);</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> str[]=<span class="string">"AF"</span>;</div><div class="line"><span class="keyword">int</span> a;</div><div class="line"><span class="built_in">sscanf</span>(str,<span class="string">"%x"</span>,&amp;a); <span class="comment">//16进制转换成10进制</span></div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">int</span> a;<span class="keyword">float</span> b;<span class="keyword">long</span> c;</div><div class="line">a=atoi(<span class="string">"32"</span>);</div><div class="line">b=atof(<span class="string">"3.1415"</span>);</div><div class="line">c=atol(<span class="string">"567283"</span>);</div><div class="line"><span class="built_in">printf</span> (<span class="string">"%d\n%f\n%d\n"</span>,a,b,c);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数字转字符串&quot;&gt;&lt;a href=&quot;#数字转字符串&quot; class=&quot;headerlink&quot; title=&quot;数字转字符串&quot;&gt;&lt;/a&gt;数字转字符串&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;123.456&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;stringstream&lt;/span&gt; ss;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ss &amp;lt;&amp;lt; a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ss &amp;gt;&amp;gt; s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ss.clear();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&amp;gt; m;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	m[i] = i + &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; str[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;123.456&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(str, &lt;span class=&quot;string&quot;&gt;&quot;%.3lf&quot;&lt;/span&gt;, a);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; str[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;number&quot;&gt;175&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(str,&lt;span class=&quot;string&quot;&gt;&quot;%x&quot;&lt;/span&gt;,a);&lt;span class=&quot;comment&quot;&gt;//10进制转换成16进制，如果输出大写的字母是sprintf(str,&quot;%X&quot;,a)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;字符串转数字&quot;&gt;&lt;a href=&quot;#字符串转数字&quot; class=&quot;headerlink&quot; title=&quot;字符串转数字&quot;&gt;&lt;/a&gt;字符串转数字&lt;/h3&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="字符串" scheme="http://linraner.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="c++" scheme="http://linraner.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>20行代码的签到脚本(Python)</title>
    <link href="http://linraner.github.io/2018/07/28/20%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC/"/>
    <id>http://linraner.github.io/2018/07/28/20行代码的签到脚本/</id>
    <published>2018-07-27T16:00:00.000Z</published>
    <updated>2018-08-15T11:09:23.004Z</updated>
    
    <content type="html"><![CDATA[<p>懒得每天在某个网站签到，写了一个python脚本扔在云主机上。网站很简单，代码就几十行。</p><h3 id="签到脚本"><a href="#签到脚本" class="headerlink" title="签到脚本"></a>签到脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">username = <span class="string">"####"</span></div><div class="line">password = <span class="string">"####"</span></div><div class="line">loginUrl = <span class="string">"登录路径/auth/login"</span></div><div class="line">s = requests.Session()</div><div class="line">logindata = &#123;</div><div class="line">    <span class="string">'email'</span>:username,</div><div class="line">    <span class="string">'passwd'</span>:password,</div><div class="line">    <span class="string">'remember_me'</span>:<span class="string">'ture'</span>,</div><div class="line">&#125;</div><div class="line">r = s.post(loginUrl,data=logindata)</div><div class="line">r = s.get(loginUrl)</div><div class="line">checkinUrl=<span class="string">"签到的路径/user/checkin"</span></div><div class="line">rr = s.post(checkinUrl)<span class="comment">#执行签到</span></div><div class="line">rr = s.get(loginUrl)</div><div class="line"><span class="comment"># print(rr)</span></div><div class="line"><span class="comment"># print(rr._content.decode())</span></div><div class="line">exit()</div></pre></td></tr></table></figure><h3 id="在Linux上定时执行这个脚本"><a href="#在Linux上定时执行这个脚本" class="headerlink" title="在Linux上定时执行这个脚本"></a>在Linux上定时执行这个脚本</h3><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab -e</div></pre></td></tr></table></figure><p>进入编辑模式，设置每天8:00运行一次。<br>crontab的语法规范<br>分钟 小时 日期 月份 周 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">00 8 * * * python /opt/checkin.py</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;懒得每天在某个网站签到，写了一个python脚本扔在云主机上。网站很简单，代码就几十行。&lt;/p&gt;
&lt;h3 id=&quot;签到脚本&quot;&gt;&lt;a href=&quot;#签到脚本&quot; class=&quot;headerlink&quot; title=&quot;签到脚本&quot;&gt;&lt;/a&gt;签到脚本&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;username = &lt;span class=&quot;string&quot;&gt;&quot;####&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;password = &lt;span class=&quot;string&quot;&gt;&quot;####&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;loginUrl = &lt;span class=&quot;string&quot;&gt;&quot;登录路径/auth/login&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;s = requests.Session()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;logindata = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;email&#39;&lt;/span&gt;:username,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;passwd&#39;&lt;/span&gt;:password,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;remember_me&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;ture&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r = s.post(loginUrl,data=logindata)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r = s.get(loginUrl)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;checkinUrl=&lt;span class=&quot;string&quot;&gt;&quot;签到的路径/user/checkin&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rr = s.post(checkinUrl)&lt;span class=&quot;comment&quot;&gt;#执行签到&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rr = s.get(loginUrl)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# print(rr)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# print(rr._content.decode())&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exit()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在Linux上定时执行这个脚本&quot;&gt;&lt;a href=&quot;#在Linux上定时执行这个脚本&quot; class=&quot;headerlink&quot; title=&quot;在Linux上定时执行这个脚本&quot;&gt;&lt;/a&gt;在Linux上定时执行这个脚本&lt;/h3&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://linraner.github.io/tags/python/"/>
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
      <category term="linux" scheme="http://linraner.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>django链接MySQL问题</title>
    <link href="http://linraner.github.io/2018/06/21/django%E9%93%BE%E6%8E%A5mysql%E9%97%AE%E9%A2%98/"/>
    <id>http://linraner.github.io/2018/06/21/django链接mysql问题/</id>
    <published>2018-06-21T04:00:00.000Z</published>
    <updated>2018-07-01T16:12:58.600Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">（django.db.utils.OperationalError: (1045, &quot;Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO)&quot;)）</div></pre></td></tr></table></figure><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><ul><li>Django2.0 </li><li>MySQL8.0.11</li></ul><a id="more"></a><p>Mysql 8.0 的部分语法，密码的加密方式发生了改变，在8.0 中的用户密码采用的是cha2 加密方法, 从而密码认证错误。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mysql -u root -p</div><div class="line">mysql&gt; use mysql;</div><div class="line">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;错误&quot;&gt;&lt;a href=&quot;#错误&quot; class=&quot;headerlink&quot; title=&quot;错误&quot;&gt;&lt;/a&gt;错误&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;（django.db.utils.OperationalError: (1045, &amp;quot;Access denied for user &amp;apos;root&amp;apos;@&amp;apos;localhost&amp;apos; (using password: NO)&amp;quot;)）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;环境：&quot;&gt;&lt;a href=&quot;#环境：&quot; class=&quot;headerlink&quot; title=&quot;环境：&quot;&gt;&lt;/a&gt;环境：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Django2.0 &lt;/li&gt;
&lt;li&gt;MySQL8.0.11&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
      <category term="django" scheme="http://linraner.github.io/tags/django/"/>
    
      <category term="mysql" scheme="http://linraner.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>nothing added to commit but untracked files present解决方法</title>
    <link href="http://linraner.github.io/2018/05/30/nothing-added-to-commit-but-untracked-files-present%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://linraner.github.io/2018/05/30/nothing-added-to-commit-but-untracked-files-present解决方法/</id>
    <published>2018-05-30T09:05:53.000Z</published>
    <updated>2018-07-01T16:55:26.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git commit                                                         </div><div class="line">On branch master                                                     </div><div class="line">                                                                     </div><div class="line">Initial commit                                                       </div><div class="line">                                                                     </div><div class="line">Untracked files:                                                     </div><div class="line">        .gitignore                                                   </div><div class="line">        Test/                                                        </div><div class="line">        blogpost/                                                    </div><div class="line">        manage.py                                                    </div><div class="line">                                                                     </div><div class="line">nothing added to commit but untracked files present</div></pre></td></tr></table></figure><p><strong>文件被追踪，但是没有被添加git中</strong></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><a id="more"></a><p><strong>git status 列出当前目录所有还没有被git管理的文件和被git管理且被修改但还未提交(git commit)的文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git add manage.py</div><div class="line"><span class="meta">$</span> git add blogpost\</div><div class="line"><span class="meta">$</span> git add Test\</div><div class="line"><span class="meta">$</span> git add .gitignore</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; git commit                                                         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;On branch master                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Initial commit                                                       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Untracked files:                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .gitignore                                                   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Test/                                                        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        blogpost/                                                    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        manage.py                                                    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nothing added to commit but untracked files present&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;文件被追踪，但是没有被添加git中&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h2&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://linraner.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>c++枚举next_premutation</title>
    <link href="http://linraner.github.io/2018/05/28/c++%E6%9E%9A%E4%B8%BEnext_premutation/"/>
    <id>http://linraner.github.io/2018/05/28/c++枚举next_premutation/</id>
    <published>2018-05-28T02:39:53.000Z</published>
    <updated>2018-07-01T16:54:49.673Z</updated>
    
    <content type="html"><![CDATA[<h3 id="平均复杂度即为O-n"><a href="#平均复杂度即为O-n" class="headerlink" title="平均复杂度即为O(n)"></a>平均复杂度即为O(n)</h3><ul><li><p>next_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“下一个排列次序”；</p></li><li><p>prev_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“上一个排列次序”；</p></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.size();i++)&#123;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;v[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">v.push_back(<span class="number">1</span>);</div><div class="line">v.push_back(<span class="number">3</span>);</div><div class="line">v.push_back(<span class="number">2</span>);</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"原排列 ： "</span>;</div><div class="line">f(v); </div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">next_permutation(v.begin(),v.end());<span class="comment">//升序序列  或者下一个排列次序 按照字典序生成下一个序列 </span></div><div class="line">f(v);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//for(int i=0;i&lt;5;i++)&#123;</span></div><div class="line"><span class="comment">//prev_permutation(v.begin(),v.end());//降序 </span></div><div class="line"><span class="comment">//f(v);</span></div><div class="line"><span class="comment">//&#125; </span></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;平均复杂度即为O-n&quot;&gt;&lt;a href=&quot;#平均复杂度即为O-n&quot; class=&quot;headerlink&quot; title=&quot;平均复杂度即为O(n)&quot;&gt;&lt;/a&gt;平均复杂度即为O(n)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;next_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“下一个排列次序”；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;prev_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“上一个排列次序”；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h2&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="c++" scheme="http://linraner.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu错误-Could not get lock /var/lib/dpkg/lock</title>
    <link href="http://linraner.github.io/2018/05/15/Ubuntu%E9%94%99%E8%AF%AF-Could-not-get-lock-var-lib-dpkg-lock/"/>
    <id>http://linraner.github.io/2018/05/15/Ubuntu错误-Could-not-get-lock-var-lib-dpkg-lock/</id>
    <published>2018-05-15T09:45:02.000Z</published>
    <updated>2018-07-01T16:54:32.589Z</updated>
    
    <content type="html"><![CDATA[<h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable) </div><div class="line">E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?</div></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><a id="more"></a><h4 id="查看运行的线程"><a href="#查看运行的线程" class="headerlink" title="查看运行的线程"></a>查看运行的线程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps -A | grep apt-get</div><div class="line"><span class="meta">#</span> sudo kill processnumber</div><div class="line"><span class="meta">#</span> 关闭apt进程</div></pre></td></tr></table></figure><p>我的没有发现进程， 可能是上次运行安装或更新时没有正常完成造成的</p><h4 id="终端输入"><a href="#终端输入" class="headerlink" title="终端输入"></a>终端输入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo rm /var/cache/apt/archives/lock</div><div class="line">sudo rm /var/lib/dpkg/lock</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;报错信息&quot;&gt;&lt;a href=&quot;#报错信息&quot; class=&quot;headerlink&quot; title=&quot;报错信息&quot;&gt;&lt;/a&gt;报错信息&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h3&gt;
    
    </summary>
    
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
      <category term="ubuntu" scheme="http://linraner.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>c++ std::ios_base::sync_with_stdio 加速输入输出</title>
    <link href="http://linraner.github.io/2018/05/14/c-std-ios-base-sync-with-stdio-%E5%8A%A0%E9%80%9F%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>http://linraner.github.io/2018/05/14/c-std-ios-base-sync-with-stdio-加速输入输出/</id>
    <published>2018-05-14T06:57:41.000Z</published>
    <updated>2018-07-01T16:55:49.760Z</updated>
    
    <content type="html"><![CDATA[<h3 id="static-bool-sync-with-stdio-bool-sync-true"><a href="#static-bool-sync-with-stdio-bool-sync-true" class="headerlink" title="static bool sync_with_stdio( bool sync = true );"></a><code>static bool sync_with_stdio( bool sync = true );</code></h3><p>设置标准 C++ 流是否与标准 C 流在每次输入/输出操作后同步。</p><p>遇到cin TLE时可以用于取消cin同步, 取消之后不能和 scanf，sscanf, getchar, fgets 之类同用。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a\n"</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">printf</span>(<span class="string">"b\n"</span>);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"c\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="输出-（环境-g-5-4-0）"><a href="#输出-（环境-g-5-4-0）" class="headerlink" title="输出 （环境 g++5.4.0）"></a>输出 （环境 g++5.4.0）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">b</div><div class="line">c</div><div class="line">a</div></pre></td></tr></table></figure><p>默认的情况下cin绑定的是cout，每次执行 &lt;&lt; 操作符的时候都要调用flush，这样会增加IO负担。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div></pre></td></tr></table></figure><p>参考一 ： <a href="http://zh.cppreference.com/w/cpp/io/ios_base/sync_with_stdio" target="_blank" rel="noopener">http://zh.cppreference.com/w/cpp/io/ios_base/sync_with_stdio</a></p><p>参考二 ：<a href="http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html" target="_blank" rel="noopener">http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;static-bool-sync-with-stdio-bool-sync-true&quot;&gt;&lt;a href=&quot;#static-bool-sync-with-stdio-bool-sync-true&quot; class=&quot;headerlink&quot; title=&quot;static bool sync_with_stdio( bool sync = true );&quot;&gt;&lt;/a&gt;&lt;code&gt;static bool sync_with_stdio( bool sync = true );&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;设置标准 C++ 流是否与标准 C 流在每次输入/输出操作后同步。&lt;/p&gt;
&lt;p&gt;遇到cin TLE时可以用于取消cin同步, 取消之后不能和 scanf，sscanf, getchar, fgets 之类同用。&lt;/p&gt;
&lt;h4 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h4&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="c++" scheme="http://linraner.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Windows10 WIFI 热点问题</title>
    <link href="http://linraner.github.io/2018/05/08/Window-WIFI-%E7%83%AD%E7%82%B9%E9%97%AE%E9%A2%98/"/>
    <id>http://linraner.github.io/2018/05/08/Window-WIFI-热点问题/</id>
    <published>2018-05-08T09:51:53.000Z</published>
    <updated>2018-06-15T07:15:56.003Z</updated>
    
    <content type="html"><![CDATA[<p>win10玄学bug之一</p><p>解决方案 ： </p><p>命令行输入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> netsh wlan set hostednetwork mode=allow ssid=NAME key=PASSWORD</div><div class="line"><span class="meta">$</span> netsh wlan start hostednetwork</div></pre></td></tr></table></figure></p><p>然后在网络适配器的本地连接-&gt;属性-&gt;共享-&gt;设置共享刚才设置的WIFI热点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;win10玄学bug之一&lt;/p&gt;
&lt;p&gt;解决方案 ： &lt;/p&gt;
&lt;p&gt;命令行输入&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;
      
    
    </summary>
    
    
      <category term="windows10" scheme="http://linraner.github.io/tags/windows10/"/>
    
  </entry>
  
  <entry>
    <title>Python解决字符编码问题</title>
    <link href="http://linraner.github.io/2018/05/05/Python%E8%A7%A3%E5%86%B3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://linraner.github.io/2018/05/05/Python解决字符编码问题/</id>
    <published>2018-05-05T14:33:02.000Z</published>
    <updated>2018-07-01T16:56:24.861Z</updated>
    
    <content type="html"><![CDATA[<p>字符串分为unicode 和 str 两种类型</p><p>文本字符和二进制数据分别用 str 和 byte表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#系统默认编码设置为utf-8</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getdefultencoding</div><div class="line"><span class="string">'utf-8'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p>str 与 bytes 之间的转换可以用 encode 和从decode<br><a id="more"></a><br><img src="https://foofish.net/images/python3-str2.jpg" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"Python测试"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = s.encode()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</div><div class="line"><span class="string">b'Python\xe6\xb5\x8b\xe8\xaf\x95'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = s.decode()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</div><div class="line"><span class="string">'Python测试'</span></div></pre></td></tr></table></figure><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"asdasd"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = base64.b64encode(s)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = base64.b64decode(s)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</div></pre></td></tr></table></figure><hr><p>参考 ： <a href="https://foofish.net/how-python3-handle-charset-encoding.html" target="_blank" rel="noopener">https://foofish.net/how-python3-handle-charset-encoding.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字符串分为unicode 和 str 两种类型&lt;/p&gt;
&lt;p&gt;文本字符和二进制数据分别用 str 和 byte表示&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#系统默认编码设置为utf-8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sys.getdefultencoding&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;str 与 bytes 之间的转换可以用 encode 和从decode&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://linraner.github.io/tags/python/"/>
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
  </entry>
  
  <entry>
    <title>BFS</title>
    <link href="http://linraner.github.io/2018/04/01/BFS/"/>
    <id>http://linraner.github.io/2018/04/01/BFS/</id>
    <published>2018-04-01T10:16:21.000Z</published>
    <updated>2018-07-01T16:57:08.775Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="迷宫问题（最短路径）"><a href="#迷宫问题（最短路径）" class="headerlink" title="迷宫问题（最短路径）"></a>迷宫问题（最短路径）</h3><h3 id="INPUT"><a href="#INPUT" class="headerlink" title="INPUT:"></a>INPUT:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">5 5</div><div class="line">SXXXX</div><div class="line">...XX</div><div class="line">.X...</div><div class="line">..XXX</div><div class="line">....G</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">6 6</div><div class="line"></div><div class="line">......</div><div class="line">.S..X.</div><div class="line">XXX...</div><div class="line">....X.</div><div class="line">.X..XX</div><div class="line">.GX...</div></pre></td></tr></table></figure><h3 id="OUPUT"><a href="#OUPUT" class="headerlink" title="OUPUT:"></a>OUPUT:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">8</div><div class="line">10</div></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">100000007</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mx = <span class="number">1007</span>;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</div><div class="line"></div><div class="line"><span class="keyword">char</span> maze[mx][mx];<span class="comment">//地图</span></div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">int</span> sx, sy;<span class="comment">//开始坐标 </span></div><div class="line"><span class="keyword">int</span> gx, gy;<span class="comment">//结束坐标 </span></div><div class="line"></div><div class="line"><span class="keyword">int</span> d[mx][mx];<span class="comment">//到各个位置的最短距离数组 </span></div><div class="line"></div><div class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;<span class="comment">//移动向量 </span></div><div class="line"><span class="comment">//（sx,sy)----&gt;(gx,gy)最短路径</span></div><div class="line"><span class="comment">//无法到达就是 INF </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="built_in">queue</span>&lt;P&gt; que;</div><div class="line"><span class="comment">//初始化所有位置为INF </span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</div><div class="line">d[i][j]=INF;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//放入起点 </span></div><div class="line">que.push(P(sx,sy));</div><div class="line">d[sx][sy]=<span class="number">0</span>;</div><div class="line"><span class="comment">//队列不为空一直执行 </span></div><div class="line"><span class="keyword">while</span>(que.size())&#123;</div><div class="line"><span class="comment">//取出队列前端元素 </span></div><div class="line">P p=que.front();</div><div class="line">que.pop();</div><div class="line"><span class="comment">//取出为终点结束搜索 </span></div><div class="line"><span class="keyword">if</span>(p.first==gx&amp;&amp;p.second==gy) <span class="keyword">break</span>;</div><div class="line"><span class="comment">//4个方向的移动 </span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</div><div class="line"><span class="comment">//移动之后的位置 </span></div><div class="line"><span class="keyword">int</span> nx=p.first+dx[i], ny=p.second+dy[i];</div><div class="line"><span class="comment">//判断是否访问过 </span></div><div class="line"><span class="keyword">if</span>(<span class="number">0</span>&lt;=nx&amp;&amp;nx&lt;n&amp;&amp;<span class="number">0</span>&lt;=ny&amp;&amp;ny&lt;m&amp;&amp;d[nx][ny]==INF&amp;&amp;maze[nx][ny]!=<span class="string">'X'</span>)&#123;</div><div class="line">que.push(P(nx,ny));<span class="comment">//放入队列， 并到该位置的距离+1 </span></div><div class="line">d[nx][ny]=d[p.first][p.second]+<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> d[gx][gy];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> ans=bfs();</div><div class="line"><span class="built_in">cout</span> &lt;&lt; ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,maze[i]);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</div><div class="line"><span class="keyword">if</span>(maze[i][j]==<span class="string">'S'</span>)&#123;</div><div class="line">sx=i;sy=j;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(maze[i][j]==<span class="string">'G'</span>)&#123;</div><div class="line">gx=i;gy=j;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">solve();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h2&gt;&lt;h3 id=&quot;迷宫问题（最短路径）&quot;&gt;&lt;a href=&quot;#迷宫问题（最短路径）&quot; class=&quot;headerlink&quot; title=&quot;迷宫问题（最短路径）&quot;&gt;&lt;/a&gt;迷宫问题（最短路径）&lt;/h3&gt;&lt;h3 id=&quot;INPUT&quot;&gt;&lt;a href=&quot;#INPUT&quot; class=&quot;headerlink&quot; title=&quot;INPUT:&quot;&gt;&lt;/a&gt;INPUT:&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;5 5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;SXXXX&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...XX&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.X...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;..XXX&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;....G&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;6 6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;......&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.S..X.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;XXX...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;....X.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.X..XX&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.GX...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;OUPUT&quot;&gt;&lt;a href=&quot;#OUPUT&quot; class=&quot;headerlink&quot; title=&quot;OUPUT:&quot;&gt;&lt;/a&gt;OUPUT:&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="图论" scheme="http://linraner.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="algorithm" scheme="http://linraner.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>并查集</title>
    <link href="http://linraner.github.io/2018/04/01/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <id>http://linraner.github.io/2018/04/01/并查集/</id>
    <published>2018-04-01T10:15:19.000Z</published>
    <updated>2018-07-01T16:57:56.004Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目-L2-010-排座位"><a href="#题目-L2-010-排座位" class="headerlink" title="题目 : L2-010. 排座位"></a>题目 : <a href="https://www.patest.cn/contests/gplt/L2-010" target="_blank" rel="noopener">L2-010. 排座位</a></h3><p>布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。<br><a id="more"></a></p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出3个正整数：N（&lt;= 100），即前来参宴的宾客总人数，则这些人从1到N编号；M为已知两两宾客之间的关系数；K为查询的条数。随后M行，每行给出一对宾客之间的关系，格式为：“宾客1 宾客2 关系”，其中“关系”为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后K行，每行给出一对需要查询的宾客编号。</p><p>这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出“No problem”；如果他们之间并不是朋友，但也不敌对，则输出“OK”；如果他们之间有敌对，然而也有共同的朋友，则输出“OK but…”；如果他们之间只有敌对关系，则输出“No way”。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">7 8 4</div><div class="line">5 6 1</div><div class="line">2 7 -1</div><div class="line">1 3 1</div><div class="line">3 4 1</div><div class="line">6 7 -1</div><div class="line">1 2 1</div><div class="line">1 4 1</div><div class="line">2 3 -1</div><div class="line">3 4</div><div class="line">5 7</div><div class="line">2 3</div><div class="line">7 2</div></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">No problem</div><div class="line">OK</div><div class="line">OK but...</div><div class="line">No way</div></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment">11 8 6</span></div><div class="line"><span class="comment">1 2</span></div><div class="line"><span class="comment">1 3</span></div><div class="line"><span class="comment">2 4</span></div><div class="line"><span class="comment">5 6</span></div><div class="line"><span class="comment">5 7</span></div><div class="line"><span class="comment">6 8</span></div><div class="line"><span class="comment">7 9</span></div><div class="line"><span class="comment">10 11</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">4 6</span></div><div class="line"><span class="comment">3 9</span></div><div class="line"><span class="comment">5 9</span></div><div class="line"><span class="comment">11 6</span></div><div class="line"><span class="comment">7 8</span></div><div class="line"><span class="comment">3 4</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">*/</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> pre[<span class="number">100007</span>];<span class="comment">//节点 </span></div><div class="line"><span class="keyword">int</span> enemy[<span class="number">1007</span>][<span class="number">1007</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">//查找源头标号 </span></div><div class="line"><span class="keyword">int</span> r = x;</div><div class="line">    <span class="keyword">while</span> (pre[r] != r)</div><div class="line">        r = pre[r];</div><div class="line">    <span class="keyword">int</span> i = x, j;</div><div class="line">    <span class="keyword">while</span> (i != r)<span class="comment">//路径压缩算法</span></div><div class="line">    &#123;</div><div class="line">        j = pre[i];<span class="comment">//在改变他的前导点时，存储他的值</span></div><div class="line">        pre[i] = r;</div><div class="line">        i = j;<span class="comment">//改变他的前导点为根节点</span></div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">        1---&gt;2---&gt;3 </span></div><div class="line"><span class="comment">         </span></div><div class="line"><span class="comment">        1---&gt;3</span></div><div class="line"><span class="comment">/</span></div><div class="line"><span class="comment">   /</span></div><div class="line"><span class="comment">  /</span></div><div class="line"><span class="comment">        2</span></div><div class="line"><span class="comment">        */</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">//合并 </span></div><div class="line">a=find(a);</div><div class="line">b=find(b);</div><div class="line"></div><div class="line"><span class="keyword">if</span>(a==b) <span class="keyword">return</span>;</div><div class="line"><span class="keyword">if</span> (a!=b)</div><div class="line">pre[a]=b; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> n,m,p;</div><div class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;p;</div><div class="line"><span class="comment">//初始每个元素为一个根节点 </span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">pre[i]=i;</div><div class="line">&#125; </div><div class="line"><span class="keyword">int</span> a,b,c;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</div><div class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</div><div class="line"><span class="keyword">if</span>(c==<span class="number">1</span>)&#123;</div><div class="line">Union(a,b);</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">enemy[a][b]=<span class="number">1</span>;</div><div class="line">enemy[b][a]=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)&#123;</div><div class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</div><div class="line"><span class="keyword">if</span>(find(a)==find(b)&amp;&amp;enemy[a][b]==<span class="number">0</span>)&#123;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"No problem"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(find(a)!=find(b)&amp;&amp;enemy[a][b]==<span class="number">0</span>)&#123;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"OK"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(find(a)==find(b)&amp;&amp;enemy[a][b]==<span class="number">1</span>)&#123;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"OK but..."</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(enemy[a][b]==<span class="number">1</span>)&#123;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"No way"</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目-L2-010-排座位&quot;&gt;&lt;a href=&quot;#题目-L2-010-排座位&quot; class=&quot;headerlink&quot; title=&quot;题目 : L2-010. 排座位&quot;&gt;&lt;/a&gt;题目 : &lt;a href=&quot;https://www.patest.cn/contests/gplt/L2-010&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;L2-010. 排座位&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。&lt;br&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="algorithm" scheme="http://linraner.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>DFS</title>
    <link href="http://linraner.github.io/2018/04/01/DFS/"/>
    <id>http://linraner.github.io/2018/04/01/DFS/</id>
    <published>2018-04-01T10:15:02.000Z</published>
    <updated>2018-07-01T16:57:22.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="求连通块"><a href="#求连通块" class="headerlink" title="求连通块"></a>求连通块</h3><h3 id="INPUT"><a href="#INPUT" class="headerlink" title="INPUT :"></a>INPUT :</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">1 1</div><div class="line">*</div><div class="line">3 5</div><div class="line">*@*@*</div><div class="line">**@**</div><div class="line">*@*@*</div><div class="line">1 8</div><div class="line">@@****@*</div><div class="line">5 5 </div><div class="line">****@</div><div class="line">*@@*@</div><div class="line">*@**@</div><div class="line">@@@*@</div><div class="line">@@**@</div><div class="line">0 0</div></pre></td></tr></table></figure><h3 id="OUTPUT"><a href="#OUTPUT" class="headerlink" title="OUTPUT :"></a>OUTPUT :</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">0</div><div class="line">1</div><div class="line">2</div><div class="line">2</div></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> mx = <span class="number">10007</span>;</div><div class="line"><span class="keyword">int</span> n, m;</div><div class="line"><span class="keyword">char</span> field[mx][mx];<span class="comment">//地图 </span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">field[x][y] = <span class="string">'*'</span>;<span class="comment">//替换现在位置 </span></div><div class="line"><span class="comment">//遍历8个方向 </span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> dx=<span class="number">-1</span>;dx&lt;=<span class="number">1</span>;dx++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> dy=<span class="number">-1</span>;dy&lt;=<span class="number">1</span>;dy++)&#123;</div><div class="line"><span class="keyword">int</span> nx=x+dx, ny=y+dy;</div><div class="line"><span class="keyword">if</span>(<span class="number">0</span>&lt;=nx&amp;&amp;nx&lt;n&amp;&amp;<span class="number">0</span>&lt;=ny&amp;&amp;ny&lt;m&amp;&amp;field[nx][ny]==<span class="string">'@'</span>)</div><div class="line">dfs(nx,ny);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">return</span> ;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</div><div class="line"><span class="comment">//从@处开始遍历 </span></div><div class="line"><span class="keyword">if</span>(field[i][j]==<span class="string">'@'</span>)&#123;</div><div class="line">dfs(i,j);</div><div class="line">ans++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,field[i]);</div><div class="line">&#125;</div><div class="line">solve();</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;入门&quot;&gt;&lt;a href=&quot;#入门&quot; class=&quot;headerlink&quot; title=&quot;入门&quot;&gt;&lt;/a&gt;入门&lt;/h2&gt;&lt;h3 id=&quot;求连通块&quot;&gt;&lt;a href=&quot;#求连通块&quot; class=&quot;headerlink&quot; title=&quot;求连通块&quot;&gt;&lt;/a&gt;求连通块&lt;/h3&gt;&lt;h3 id=&quot;INPUT&quot;&gt;&lt;a href=&quot;#INPUT&quot; class=&quot;headerlink&quot; title=&quot;INPUT :&quot;&gt;&lt;/a&gt;INPUT :&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1 1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3 5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*@*@*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;**@**&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*@*@*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1 8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@@****@*&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5 5 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;****@&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*@@*@&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;*@**@&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@@@*@&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@@**@&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;0 0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;OUTPUT&quot;&gt;&lt;a href=&quot;#OUTPUT&quot; class=&quot;headerlink&quot; title=&quot;OUTPUT :&quot;&gt;&lt;/a&gt;OUTPUT :&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="图论" scheme="http://linraner.github.io/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数论初步</title>
    <link href="http://linraner.github.io/2017/12/31/%E6%95%B0%E8%AE%BA%E5%88%9D%E6%AD%A5/"/>
    <id>http://linraner.github.io/2017/12/31/数论初步/</id>
    <published>2017-12-31T10:57:58.000Z</published>
    <updated>2018-07-01T16:59:49.354Z</updated>
    
    <content type="html"><![CDATA[<p>数论被“数学王子”高斯誉为整个数学王国的皇后</p><h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><p>欧几里得的辗转相除法计算的是两个自然数a和b的最大公约数g</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//递归</div><div class="line">int gcd(int a, int b) &#123;</div><div class="line">    return b == 0 ? a : gcd(b, a % b);</div><div class="line">&#125;</div><div class="line">//迭代</div><div class="line">int gcd(int a, int b) &#123;</div><div class="line">    while(b != 0) &#123;</div><div class="line">        int r = b;</div><div class="line">        b = a % b;</div><div class="line">        a = r;</div><div class="line">    &#125;</div><div class="line">    return a;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="唯一分解定理"><a href="#唯一分解定理" class="headerlink" title="唯一分解定理"></a>唯一分解定理</h3><h3 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><p><a href="">题目</a></p><p>直线上的点。求直线<code>ax+by+c=0</code>上有多少整数点(x,y)满足x&lt;-[x1, x2], y &lt;- [y1, y2]<br>定理：若a和b为正整数，则存在整数x,y使得<code>gcd(a,b)=ax+by</code></p><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; d, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!b) &#123;</div><div class="line">        d = a;</div><div class="line">        x = <span class="number">1</span>;</div><div class="line">        y = <span class="number">0</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        gcd(b, a % b, d, y, x);</div><div class="line">        y -= x * (a / b);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="素数筛选"><a href="#素数筛选" class="headerlink" title="素数筛选"></a>素数筛选</h3><p><a href="http://acm.hdu.edu.cn/diy/contest_showproblem.php?pid=1001&amp;cid=32790" target="_blank" rel="noopener">题目</a></p><h4 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一般判定是否是素数</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (n &lt; <span class="number">2</span>)</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(n); i++) &#123;</div><div class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//普通筛选n内的素数</span></div><div class="line"><span class="function"><span class="keyword">bool</span>* <span class="title">com_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line"><span class="keyword">bool</span>* ans = <span class="keyword">new</span> <span class="keyword">bool</span>[n];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </div><div class="line">ans[i] = <span class="literal">false</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</div><div class="line"><span class="keyword">if</span> (is_prime(i))</div><div class="line">ans[i] = <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="筛选法示例"><a href="#筛选法示例" class="headerlink" title="筛选法示例"></a>筛选法示例</h4><p>一、初始化如下列表。</p><p> 2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</p><p>二、把第一个数（2）取出来，去掉所有可以被2整除的数。</p><p> 2  3     5     7     9    11    13    15    17    19    21    23    25    27    29</p><p>三、取第二个数（3），去掉所有可以被 3整除的数。</p><p> 2  3     5     7          11    13          17    19          23    25          29</p><p>四、取第三个数（5），因为4已经被去除了，再去掉所有可以被5整除的数。</p><p> 2  3     5     7          11    13          17    19          23                29</p><p>接下来的数是7，但是7的平方是49，其大于了30，所以我们可以停止计算了。剩下的数就是所有的质数了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line"><span class="keyword">if</span> (n &lt; <span class="number">2</span>)</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</div><div class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)</div><div class="line"><span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span>* <span class="title">sieve_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line"><span class="keyword">bool</span>* value = <span class="keyword">new</span> <span class="keyword">bool</span>[n];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">value[i] = <span class="literal">true</span>;</div><div class="line">value[<span class="number">0</span>] = <span class="literal">false</span>;</div><div class="line">value[<span class="number">1</span>] = <span class="literal">false</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(n); i++) &#123;</div><div class="line"><span class="keyword">if</span> (value[i] &amp;&amp; is_prime(i)) &#123;</div><div class="line"><span class="keyword">int</span> c = <span class="number">2</span>;</div><div class="line"><span class="keyword">int</span> j = i * c;</div><div class="line"><span class="keyword">while</span> (j &lt; n) &#123;</div><div class="line">value[j] = <span class="literal">false</span>;</div><div class="line">j = i * c++;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">bool</span>* prime = sieve_prime(MAX);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">100</span>; i++) &#123; <span class="comment">//输出100内的素数</span></div><div class="line">        <span class="keyword">if</span> (prime[i])</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p><strong>欧拉函数：</strong> 在数论中，对正整数n，欧拉函数φ(n)是小于或等于n的正整数中与n互质的数的数目。它又称为Euler’s totient function、φ函数、欧拉商数等。<br>例如 φ，因为1,3,5,7均和8互质。—— 维基百科</p><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><ul><li>phi(1) = 1</li><li>n为质数, phi(n) = n - 1</li><li>m 和 n 互质, phi(mn) = phi(m) * phi(n)</li><li>n为奇数, phi(2n) = phi(n)</li><li>通用公式：<code>phi(n) = n * (1 - 1 / p1) * (1 - 1 / p2) * ... * (1 - 1 / pr)</code><br>其中 <code>n = p1^k1 * p2^k2 * ... * pr^kr</code></li><li><strong>具体参考：</strong> <a href="https://www.kancloud.cn/kancloud/rsa_algorithm/48486" target="_blank" rel="noopener">看云-欧拉函数</a></li></ul><h4 id="常规代码"><a href="#常规代码" class="headerlink" title="常规代码"></a>常规代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">int phi(int n) &#123;</div><div class="line">    int t = n;</div><div class="line">    for (int i = 2; i &lt;= n; i++) &#123;</div><div class="line">        if (n % i == 0) &#123;</div><div class="line">            n /= i;</div><div class="line">            t = t - t / i;</div><div class="line">        &#125;</div><div class="line">        while (n % i == 0)</div><div class="line">            n /= i;</div><div class="line">    &#125;</div><div class="line">    return t;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>时间复杂度O(n),对于1e9会超时。</p><h4 id="改良之后"><a href="#改良之后" class="headerlink" title="改良之后"></a>改良之后</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">int phi(int n) &#123;</div><div class="line">    int t = n;</div><div class="line">    //降低时间复杂度</div><div class="line">    for (int  i = 2; i * i &lt;= n; i++) &#123;</div><div class="line">        if (n % i == 0) &#123;</div><div class="line">        n /= i;</div><div class="line">        t = t - t / i;</div><div class="line">        &#125;</div><div class="line">        while (n % i == 0) </div><div class="line">            n /= i;</div><div class="line">    &#125;</div><div class="line">    if (n &gt; 1)</div><div class="line">    t = t - t / n;</div><div class="line">    return t;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数论被“数学王子”高斯誉为整个数学王国的皇后&lt;/p&gt;
&lt;h2 id=&quot;欧几里得算法&quot;&gt;&lt;a href=&quot;#欧几里得算法&quot; class=&quot;headerlink&quot; title=&quot;欧几里得算法&quot;&gt;&lt;/a&gt;欧几里得算法&lt;/h2&gt;&lt;h3 id=&quot;最大公约数&quot;&gt;&lt;a href=&quot;#最大公约数&quot; class=&quot;headerlink&quot; title=&quot;最大公约数&quot;&gt;&lt;/a&gt;最大公约数&lt;/h3&gt;&lt;p&gt;欧几里得的辗转相除法计算的是两个自然数a和b的最大公约数g&lt;/p&gt;
&lt;h4 id=&quot;代码示例&quot;&gt;&lt;a href=&quot;#代码示例&quot; class=&quot;headerlink&quot; title=&quot;代码示例&quot;&gt;&lt;/a&gt;代码示例&lt;/h4&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="数论" scheme="http://linraner.github.io/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>scanf中的正则表达式</title>
    <link href="http://linraner.github.io/2017/12/01/scanf%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://linraner.github.io/2017/12/01/scanf中的正则表达式/</id>
    <published>2017-12-01T10:57:58.000Z</published>
    <updated>2018-07-01T17:00:05.467Z</updated>
    
    <content type="html"><![CDATA[<h4 id="调用格式-scanf-quot-lt-格式化字符串-gt-quot-lt-地址表-gt"><a href="#调用格式-scanf-quot-lt-格式化字符串-gt-quot-lt-地址表-gt" class="headerlink" title="调用格式: scanf(&quot;&lt;格式化字符串&gt;&quot;, &lt;地址表&gt;);"></a><strong>调用格式:</strong> <code>scanf(&quot;&lt;格式化字符串&gt;&quot;, &lt;地址表&gt;);</code></h4><p>一、为变量赋值时表示成功读取变量的个数, &lt;格式化字符串&gt;与&lt;地址表&gt;是严格匹配的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">scanf</span>(<span class="string">"%c %c"</span>, &amp;a, &amp;b); <span class="comment">//函数返回值是2，并丢弃不想使用的空白符</span></div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;a, &amp;b); <span class="comment">//输入必须有逗号， 多个空格为一个空格</span></div></pre></td></tr></table></figure><p>二、 <code>%s</code> 读取遇到空格停止读取，因此一般可以用fgets去读取字符串<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">scanf</span>(<span class="string">"%[a-z]"</span>, &amp;str);  <span class="comment">//遇到不再a-z字符停止读取</span></div><div class="line"><span class="built_in">scanf</span>(<span class="string">"666%[0-9]"</span>, &amp;str);  <span class="comment">//666开头并且在0-9字符读取，不是则停止</span></div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>, &amp;str);     <span class="comment">//^表示求反集，即这句话不是回车一直开始读取</span></div></pre></td></tr></table></figure></p><p>三、压缩输入：在格式码前加上*，则用户就可以告诉scanf()读这个域，但不把它赋予任何变量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">scanf</span>(<span class="string">"%c%*c, &amp;ch); 使用此方法可以在字符处理时吃掉多余的回车。</span></div></pre></td></tr></table></figure><p><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference" target="_blank" rel="noopener">更多正则表达式语言参考</a></p><h4 id="sscanf、scanf的一些示例"><a href="#sscanf、scanf的一些示例" class="headerlink" title="sscanf、scanf的一些示例"></a>sscanf、scanf的一些示例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;调用格式-scanf-quot-lt-格式化字符串-gt-quot-lt-地址表-gt&quot;&gt;&lt;a href=&quot;#调用格式-scanf-quot-lt-格式化字符串-gt-quot-lt-地址表-gt&quot; class=&quot;headerlink&quot; title=&quot;调用格式: scanf(&amp;quot;&amp;lt;格式化字符串&amp;gt;&amp;quot;, &amp;lt;地址表&amp;gt;);&quot;&gt;&lt;/a&gt;&lt;strong&gt;调用格式:&lt;/strong&gt; &lt;code&gt;scanf(&amp;quot;&amp;lt;格式化字符串&amp;gt;&amp;quot;, &amp;lt;地址表&amp;gt;);&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;一、为变量赋值时表示成功读取变量的个数, &amp;lt;格式化字符串&amp;gt;与&amp;lt;地址表&amp;gt;是严格匹配的&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%c %c&quot;&lt;/span&gt;, &amp;amp;a, &amp;amp;b); &lt;span class=&quot;comment&quot;&gt;//函数返回值是2，并丢弃不想使用的空白符&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d,%d&quot;&lt;/span&gt;, &amp;amp;a, &amp;amp;b); &lt;span class=&quot;comment&quot;&gt;//输入必须有逗号， 多个空格为一个空格&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;二、 &lt;code&gt;%s&lt;/code&gt; 读取遇到空格停止读取，因此一般可以用fgets去读取字符串&lt;br&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="c++" scheme="http://linraner.github.io/tags/c/"/>
    
  </entry>
  
</feed>
