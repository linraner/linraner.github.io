<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank</title>
  
  <subtitle>Your heart is free. Have the courage to follow it.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linraner.github.io/"/>
  <updated>2018-10-15T00:00:01.154Z</updated>
  <id>http://linraner.github.io/</id>
  
  <author>
    <name>Frank</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java8 Stream</title>
    <link href="http://linraner.github.io/2018/10/15/Java8%20Stream/"/>
    <id>http://linraner.github.io/2018/10/15/Java8 Stream/</id>
    <published>2018-10-14T23:58:07.211Z</published>
    <updated>2018-10-15T00:00:01.154Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="java" scheme="http://linraner.github.io/tags/java/"/>
    
      <category term="note" scheme="http://linraner.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Date Time API</title>
    <link href="http://linraner.github.io/2018/10/05/Java8%20Date%20Time%20API/"/>
    <id>http://linraner.github.io/2018/10/05/Java8 Date Time API/</id>
    <published>2018-10-05T10:16:21.000Z</published>
    <updated>2018-10-15T00:03:00.142Z</updated>
    
    <content type="html"><![CDATA[<p>Java8 引入了新的时间类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java8 引入了新的时间类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/
      
    
    </summary>
    
    
      <category term="java" scheme="http://linraner.github.io/tags/java/"/>
    
      <category term="note" scheme="http://linraner.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JSP 九大内置对象常用方法</title>
    <link href="http://linraner.github.io/2018/10/01/JSP%20%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://linraner.github.io/2018/10/01/JSP 九大内置对象常用方法/</id>
    <published>2018-10-01T10:16:21.000Z</published>
    <updated>2018-10-07T12:38:53.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-request-对象常用方法"><a href="#1-request-对象常用方法" class="headerlink" title="1. request 对象常用方法"></a>1. request 对象常用方法</h2><p><code>request</code> 是来自客户端的请求. 客户端的请求信息封装在 <code>request</code> 对象中. 以下 <code>HttpServletRequest</code> 类的实例.</p><table><thead><tr><th>方法 ( 类型 + 方法名 )</th><th>描述</th></tr></thead><tbody><tr><td>String getParameter(String strTextName)</td><td>获取表单提交信息</td></tr><tr><td>Enumeration getParameterNames()</td><td>返回可用参数的枚举</td></tr><tr><td>String[] getParameterValues(String name)</td><td>返回包含参数 name 的所有的数组</td></tr><tr><td>Enumeration getAttributeNames()</td><td>返回所有属性名的属性值</td></tr><tr><td>Object getAttribute(String name)</td><td>返回指定属性的属性值</td></tr><tr><td>String getCharacterEncoding()</td><td>返回字节编码方式</td></tr><tr><td>String getProtocol()</td><td>获取用户使用的协议</td></tr><tr><td>String getServletPath()</td><td>获取用户提交信息的页面</td></tr><tr><td>String getMethod()</td><td>获取客户提交信息的方式</td></tr><tr><td>BufferReader getHeader()</td><td>获取 HTTP 头文件的 accept、accept-encoding 和 Host 的值</td></tr><tr><td>String getRemoteAddr()</td><td>获取客户的 IP 地址</td></tr><tr><td>String getRemoteHost()</td><td>获取客户机的名称</td></tr><tr><td>String getserverName()</td><td>获取服务器的名称</td></tr><tr><td>int getServerPort()</td><td>获取服务器端口号</td></tr></tbody></table><h2 id="2-resopnse-对象常用方法"><a href="#2-resopnse-对象常用方法" class="headerlink" title="2. resopnse 对象常用方法"></a>2. resopnse 对象常用方法</h2><p><code>resopnse</code> 对象代表的是对客户端的相应. 向客户端发送文字时直接使用. 以下是 <code>HttpServletResopnse</code> 类的实例.</p><table><thead><tr><th>方法 ( 类型 + 方法名 )</th><th>描述</th></tr></thead><tbody><tr><td>String getCharacterEncoding()</td><td>返回响应用的是什么字符编码</td></tr><tr><td>ServletOutputStream getOutputStream()</td><td>返回响应的一个二进制输出流</td></tr><tr><td>PrintWrite getWrite()</td><td>返回可以向客户端输出字符的一个对象</td></tr><tr><td>void setContentLength(int len)</td><td>设置响应头长度</td></tr><tr><td>void setContentTye(String type)</td><td>设置响应的 MIME 类型</td></tr><tr><td>void sendRedirect(Java.lang.String location)</td><td>重新定向客户端的请求</td></tr></tbody></table><a id="more"></a><h2 id="3-session-常用方法"><a href="#3-session-常用方法" class="headerlink" title="3. session 常用方法"></a>3. session 常用方法</h2><p><code>session</code> 指的是客户端与服务器的一次回话, 从客户连接到服务器的一个 WebApplication 开始, 直到客户端与服务器断开连接为止. </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-request-对象常用方法&quot;&gt;&lt;a href=&quot;#1-request-对象常用方法&quot; class=&quot;headerlink&quot; title=&quot;1. request 对象常用方法&quot;&gt;&lt;/a&gt;1. request 对象常用方法&lt;/h2&gt;&lt;p&gt;&lt;code&gt;request&lt;/code&gt; 是来自客户端的请求. 客户端的请求信息封装在 &lt;code&gt;request&lt;/code&gt; 对象中. 以下 &lt;code&gt;HttpServletRequest&lt;/code&gt; 类的实例.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法 ( 类型 + 方法名 )&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;String getParameter(String strTextName)&lt;/td&gt;
&lt;td&gt;获取表单提交信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enumeration getParameterNames()&lt;/td&gt;
&lt;td&gt;返回可用参数的枚举&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String[] getParameterValues(String name)&lt;/td&gt;
&lt;td&gt;返回包含参数 name 的所有的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enumeration getAttributeNames()&lt;/td&gt;
&lt;td&gt;返回所有属性名的属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object getAttribute(String name)&lt;/td&gt;
&lt;td&gt;返回指定属性的属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getCharacterEncoding()&lt;/td&gt;
&lt;td&gt;返回字节编码方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getProtocol()&lt;/td&gt;
&lt;td&gt;获取用户使用的协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getServletPath()&lt;/td&gt;
&lt;td&gt;获取用户提交信息的页面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getMethod()&lt;/td&gt;
&lt;td&gt;获取客户提交信息的方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BufferReader getHeader()&lt;/td&gt;
&lt;td&gt;获取 HTTP 头文件的 accept、accept-encoding 和 Host 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getRemoteAddr()&lt;/td&gt;
&lt;td&gt;获取客户的 IP 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getRemoteHost()&lt;/td&gt;
&lt;td&gt;获取客户机的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getserverName()&lt;/td&gt;
&lt;td&gt;获取服务器的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int getServerPort()&lt;/td&gt;
&lt;td&gt;获取服务器端口号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;2-resopnse-对象常用方法&quot;&gt;&lt;a href=&quot;#2-resopnse-对象常用方法&quot; class=&quot;headerlink&quot; title=&quot;2. resopnse 对象常用方法&quot;&gt;&lt;/a&gt;2. resopnse 对象常用方法&lt;/h2&gt;&lt;p&gt;&lt;code&gt;resopnse&lt;/code&gt; 对象代表的是对客户端的相应. 向客户端发送文字时直接使用. 以下是 &lt;code&gt;HttpServletResopnse&lt;/code&gt; 类的实例.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法 ( 类型 + 方法名 )&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;String getCharacterEncoding()&lt;/td&gt;
&lt;td&gt;返回响应用的是什么字符编码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ServletOutputStream getOutputStream()&lt;/td&gt;
&lt;td&gt;返回响应的一个二进制输出流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PrintWrite getWrite()&lt;/td&gt;
&lt;td&gt;返回可以向客户端输出字符的一个对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void setContentLength(int len)&lt;/td&gt;
&lt;td&gt;设置响应头长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void setContentTye(String type)&lt;/td&gt;
&lt;td&gt;设置响应的 MIME 类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void sendRedirect(Java.lang.String location)&lt;/td&gt;
&lt;td&gt;重新定向客户端的请求&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="JSP" scheme="http://linraner.github.io/tags/JSP/"/>
    
      <category term="Java" scheme="http://linraner.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>星期天</title>
    <link href="http://linraner.github.io/2018/09/28/%E6%98%9F%E6%9C%9F%E5%A4%A9/"/>
    <id>http://linraner.github.io/2018/09/28/星期天/</id>
    <published>2018-09-28T15:20:13.542Z</published>
    <updated>2018-08-05T12:25:00.961Z</updated>
    
    <content type="html"><![CDATA[<ul><li>那时的我们，如夏夜，温暖而沉浸在自己的睡梦中。未知黎明之前，我们都是夜幕下的精灵。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;那时的我们，如夏夜，温暖而沉浸在自己的睡梦中。未知黎明之前，我们都是夜幕下的精灵。&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="随笔" scheme="http://linraner.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心情" scheme="http://linraner.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>信仰是理智的终结</title>
    <link href="http://linraner.github.io/2018/09/28/%E4%BF%A1%E4%BB%B0%E6%98%AF%E7%90%86%E6%99%BA%E7%9A%84%E7%BB%88%E7%BB%93/"/>
    <id>http://linraner.github.io/2018/09/28/信仰是理智的终结/</id>
    <published>2018-09-28T15:20:13.525Z</published>
    <updated>2018-06-15T07:17:04.594Z</updated>
    
    <content type="html"><![CDATA[<ul><li>一个相信共产主义的人</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;一个相信共产主义的人&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="随笔" scheme="http://linraner.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心情" scheme="http://linraner.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>九月  (海子)</title>
    <link href="http://linraner.github.io/2018/09/28/%E4%B9%9D%E6%9C%88/"/>
    <id>http://linraner.github.io/2018/09/28/九月/</id>
    <published>2018-09-28T15:20:13.520Z</published>
    <updated>2018-09-03T07:23:53.053Z</updated>
    
    <content type="html"><![CDATA[<p>目击众神死亡的草原上野花一片<br>远在远方的风比远方更远<br>我的琴声呜咽 泪水全无<br>我把这远方的远归还草原<br>一个叫木头 一个叫马尾<br>我的琴声呜咽 泪水全无</p><p>远方只有在死亡中凝聚野花一片<br>明月如镜高悬草原映照千年岁月<br>我的琴声呜咽 泪水全无<br>只身打马过草原</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目击众神死亡的草原上野花一片&lt;br&gt;远在远方的风比远方更远&lt;br&gt;我的琴声呜咽 泪水全无&lt;br&gt;我把这远方的远归还草原&lt;br&gt;一个叫木头 一个叫马尾&lt;br&gt;我的琴声呜咽 泪水全无&lt;/p&gt;
&lt;p&gt;远方只有在死亡中凝聚野花一片&lt;br&gt;明月如镜高悬草原映照千年岁月&lt;br&gt;我的琴声
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://linraner.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心情" scheme="http://linraner.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>世界充满谎言</title>
    <link href="http://linraner.github.io/2018/09/28/%E4%B8%96%E7%95%8C%E5%85%85%E6%BB%A1%E8%B0%8E%E8%A8%80/"/>
    <id>http://linraner.github.io/2018/09/28/世界充满谎言/</id>
    <published>2018-09-28T15:20:13.516Z</published>
    <updated>2018-06-15T07:16:47.786Z</updated>
    
    <content type="html"><![CDATA[<p>人与人，人与物，都会欺骗</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人与人，人与物，都会欺骗&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="随笔" scheme="http://linraner.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心情" scheme="http://linraner.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>一念花开</title>
    <link href="http://linraner.github.io/2018/09/28/%E4%B8%80%E5%BF%B5%E8%8A%B1%E5%BC%80/"/>
    <id>http://linraner.github.io/2018/09/28/一念花开/</id>
    <published>2018-09-28T15:20:13.508Z</published>
    <updated>2018-06-15T07:16:20.117Z</updated>
    
    <content type="html"><![CDATA[<ul><li>所有的存在都是虚无的</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;所有的存在都是虚无的&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="随笔" scheme="http://linraner.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心情" scheme="http://linraner.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>lambda表达式</title>
    <link href="http://linraner.github.io/2018/09/28/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://linraner.github.io/2018/09/28/lambda表达式/</id>
    <published>2018-09-28T15:20:13.474Z</published>
    <updated>2018-07-16T00:30:14.706Z</updated>
    
    <content type="html"><![CDATA[<p>lambda表达式是一行函数，是函数式编程的一种特性。</p><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>lambda &lt;参数&gt;: 表达式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> a,b: a + b</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(f)</div><div class="line"><span class="comment">#&lt;type 'function'&gt;</span></div></pre></td></tr></table></figure></p><p>获取整除2的数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(filter(<span class="keyword">lambda</span> x: x%<span class="number">2</span>==<span class="number">0</span>, range(<span class="number">10</span>)))</div><div class="line"><span class="comment">#[0, 2, 4, 6, 8]</span></div></pre></td></tr></table></figure></p><p>列表并行排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>];list2 = [<span class="number">9</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = zip(list1, list2)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = sorted(data)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list1, list2 = map(<span class="keyword">lambda</span> t: list(t), zip(*data))</div></pre></td></tr></table></figure></p><h2 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h2><a id="more"></a><p>c++里的形式是这样的<br>[capture list] (parameter list) -&gt;return type {function body}</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//call the func.</span></div><div class="line">    <span class="keyword">auto</span> f1 = []() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"test"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;; </div><div class="line">    f1();</div><div class="line">    <span class="keyword">int</span> y = <span class="number">2</span>;</div><div class="line">    <span class="keyword">auto</span> f2 = [y](<span class="keyword">int</span> x) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; x + y &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;;</div><div class="line">    f2(<span class="number">4</span>);</div><div class="line">    <span class="comment">//STL</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</div><div class="line">        v.push_back(i);</div><div class="line">    &#125;</div><div class="line">    for_each(v.begin(), v.end(), [](<span class="keyword">int</span> n) &#123; </div><div class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">" "</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;lambda表达式是一行函数，是函数式编程的一种特性。&lt;/p&gt;
&lt;h2 id=&quot;python&quot;&gt;&lt;a href=&quot;#python&quot; class=&quot;headerlink&quot; title=&quot;python&quot;&gt;&lt;/a&gt;python&lt;/h2&gt;&lt;p&gt;lambda &amp;lt;参数&amp;gt;: 表达式&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;f = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; a,b: a + b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;type(f)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&amp;lt;type &#39;function&#39;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;获取整除2的数字&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list(filter(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, range(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#[0, 2, 4, 6, 8]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;列表并行排序&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];list2 = [&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = zip(list1, list2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = sorted(data)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list1, list2 = map(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; t: list(t), zip(*data))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;cpp&quot;&gt;&lt;a href=&quot;#cpp&quot; class=&quot;headerlink&quot; title=&quot;cpp&quot;&gt;&lt;/a&gt;cpp&lt;/h2&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://linraner.github.io/tags/python/"/>
    
      <category term="函数式编程" scheme="http://linraner.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="cpp" scheme="http://linraner.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Django重置后台密码</title>
    <link href="http://linraner.github.io/2018/09/28/Django%E9%87%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E5%AF%86%E7%A0%81/"/>
    <id>http://linraner.github.io/2018/09/28/Django重置后台密码/</id>
    <published>2018-09-28T15:20:13.458Z</published>
    <updated>2018-07-11T01:18:51.620Z</updated>
    
    <content type="html"><![CDATA[<p>emmm时间长忘记密码了</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> python manage.py shell</div></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</div><div class="line">In [<span class="number">2</span>]: user = User.objects.get(username=<span class="string">'Username'</span>)</div><div class="line">In [<span class="number">3</span>]: user.set_password(<span class="string">'Password'</span>)</div><div class="line">In [<span class="number">4</span>]: user.save()</div><div class="line">In [<span class="number">5</span>]: exit()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;emmm时间长忘记密码了&lt;/p&gt;
&lt;h3 id=&quot;执行&quot;&gt;&lt;a href=&quot;#执行&quot; class=&quot;headerlink&quot; title=&quot;执行&quot;&gt;&lt;/a&gt;执行&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
      <category term="Django" scheme="http://linraner.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>c++的字符串与数字的转换</title>
    <link href="http://linraner.github.io/2018/09/28/c++%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>http://linraner.github.io/2018/09/28/c++的字符串与数字的转换/</id>
    <published>2018-09-28T15:20:13.443Z</published>
    <updated>2018-07-01T16:59:10.242Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数字转字符串"><a href="#数字转字符串" class="headerlink" title="数字转字符串"></a>数字转字符串</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="keyword">double</span> a = <span class="number">123.456</span>;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="built_in">stringstream</span> ss;</div><div class="line">ss &lt;&lt; a;</div><div class="line">ss &gt;&gt; s;</div><div class="line">ss.clear();</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; m;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">m[i] = i + <span class="string">'0'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</div><div class="line"><span class="keyword">double</span> a = <span class="number">123.456</span>;</div><div class="line"><span class="built_in">sprintf</span>(str, <span class="string">"%.3lf"</span>, a);</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> a=<span class="number">175</span>;</div><div class="line"><span class="built_in">sprintf</span>(str,<span class="string">"%x"</span>,a);<span class="comment">//10进制转换成16进制，如果输出大写的字母是sprintf(str,"%X",a)</span></div></pre></td></tr></table></figure><h3 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h3><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="built_in">string</span> s = <span class="string">"123.456"</span>;</div><div class="line"><span class="keyword">double</span> a;</div><div class="line"><span class="built_in">stringstream</span> ss;</div><div class="line">ss &lt;&lt; s;</div><div class="line">ss &gt;&gt; a;</div><div class="line">ss.clear();</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    m[i+<span class="string">'0'</span>] = i;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">char</span> str[] = <span class="string">"123.456"</span>;</div><div class="line"><span class="keyword">double</span> a;</div><div class="line"><span class="built_in">sscanf</span>(str, <span class="string">"%lf"</span>, &amp;a);</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> str[]=<span class="string">"AF"</span>;</div><div class="line"><span class="keyword">int</span> a;</div><div class="line"><span class="built_in">sscanf</span>(str,<span class="string">"%x"</span>,&amp;a); <span class="comment">//16进制转换成10进制</span></div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">int</span> a;<span class="keyword">float</span> b;<span class="keyword">long</span> c;</div><div class="line">a=atoi(<span class="string">"32"</span>);</div><div class="line">b=atof(<span class="string">"3.1415"</span>);</div><div class="line">c=atol(<span class="string">"567283"</span>);</div><div class="line"><span class="built_in">printf</span> (<span class="string">"%d\n%f\n%d\n"</span>,a,b,c);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数字转字符串&quot;&gt;&lt;a href=&quot;#数字转字符串&quot; class=&quot;headerlink&quot; title=&quot;数字转字符串&quot;&gt;&lt;/a&gt;数字转字符串&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;123.456&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;stringstream&lt;/span&gt; ss;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ss &amp;lt;&amp;lt; a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ss &amp;gt;&amp;gt; s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ss.clear();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&amp;gt; m;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	m[i] = i + &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; str[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;123.456&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(str, &lt;span class=&quot;string&quot;&gt;&quot;%.3lf&quot;&lt;/span&gt;, a);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; str[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;number&quot;&gt;175&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(str,&lt;span class=&quot;string&quot;&gt;&quot;%x&quot;&lt;/span&gt;,a);&lt;span class=&quot;comment&quot;&gt;//10进制转换成16进制，如果输出大写的字母是sprintf(str,&quot;%X&quot;,a)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;字符串转数字&quot;&gt;&lt;a href=&quot;#字符串转数字&quot; class=&quot;headerlink&quot; title=&quot;字符串转数字&quot;&gt;&lt;/a&gt;字符串转数字&lt;/h3&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="c++" scheme="http://linraner.github.io/tags/c/"/>
    
      <category term="字符串" scheme="http://linraner.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>20行代码的签到脚本(Python)</title>
    <link href="http://linraner.github.io/2018/07/28/20%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC/"/>
    <id>http://linraner.github.io/2018/07/28/20行代码的签到脚本/</id>
    <published>2018-07-27T16:00:00.000Z</published>
    <updated>2018-08-15T11:09:23.004Z</updated>
    
    <content type="html"><![CDATA[<p>懒得每天在某个网站签到，写了一个python脚本扔在云主机上。网站很简单，代码就几十行。</p><h3 id="签到脚本"><a href="#签到脚本" class="headerlink" title="签到脚本"></a>签到脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">username = <span class="string">"####"</span></div><div class="line">password = <span class="string">"####"</span></div><div class="line">loginUrl = <span class="string">"登录路径/auth/login"</span></div><div class="line">s = requests.Session()</div><div class="line">logindata = &#123;</div><div class="line">    <span class="string">'email'</span>:username,</div><div class="line">    <span class="string">'passwd'</span>:password,</div><div class="line">    <span class="string">'remember_me'</span>:<span class="string">'ture'</span>,</div><div class="line">&#125;</div><div class="line">r = s.post(loginUrl,data=logindata)</div><div class="line">r = s.get(loginUrl)</div><div class="line">checkinUrl=<span class="string">"签到的路径/user/checkin"</span></div><div class="line">rr = s.post(checkinUrl)<span class="comment">#执行签到</span></div><div class="line">rr = s.get(loginUrl)</div><div class="line"><span class="comment"># print(rr)</span></div><div class="line"><span class="comment"># print(rr._content.decode())</span></div><div class="line">exit()</div></pre></td></tr></table></figure><h3 id="在Linux上定时执行这个脚本"><a href="#在Linux上定时执行这个脚本" class="headerlink" title="在Linux上定时执行这个脚本"></a>在Linux上定时执行这个脚本</h3><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab -e</div></pre></td></tr></table></figure><p>进入编辑模式，设置每天8:00运行一次。<br>crontab的语法规范<br>分钟 小时 日期 月份 周 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">00 8 * * * python /opt/checkin.py</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;懒得每天在某个网站签到，写了一个python脚本扔在云主机上。网站很简单，代码就几十行。&lt;/p&gt;
&lt;h3 id=&quot;签到脚本&quot;&gt;&lt;a href=&quot;#签到脚本&quot; class=&quot;headerlink&quot; title=&quot;签到脚本&quot;&gt;&lt;/a&gt;签到脚本&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;username = &lt;span class=&quot;string&quot;&gt;&quot;####&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;password = &lt;span class=&quot;string&quot;&gt;&quot;####&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;loginUrl = &lt;span class=&quot;string&quot;&gt;&quot;登录路径/auth/login&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;s = requests.Session()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;logindata = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;email&#39;&lt;/span&gt;:username,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;passwd&#39;&lt;/span&gt;:password,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;remember_me&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;ture&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r = s.post(loginUrl,data=logindata)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r = s.get(loginUrl)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;checkinUrl=&lt;span class=&quot;string&quot;&gt;&quot;签到的路径/user/checkin&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rr = s.post(checkinUrl)&lt;span class=&quot;comment&quot;&gt;#执行签到&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rr = s.get(loginUrl)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# print(rr)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# print(rr._content.decode())&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exit()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在Linux上定时执行这个脚本&quot;&gt;&lt;a href=&quot;#在Linux上定时执行这个脚本&quot; class=&quot;headerlink&quot; title=&quot;在Linux上定时执行这个脚本&quot;&gt;&lt;/a&gt;在Linux上定时执行这个脚本&lt;/h3&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://linraner.github.io/tags/python/"/>
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
      <category term="linux" scheme="http://linraner.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>django链接MySQL问题</title>
    <link href="http://linraner.github.io/2018/06/21/django%E9%93%BE%E6%8E%A5mysql%E9%97%AE%E9%A2%98/"/>
    <id>http://linraner.github.io/2018/06/21/django链接mysql问题/</id>
    <published>2018-06-21T04:00:00.000Z</published>
    <updated>2018-07-01T16:12:58.600Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">（django.db.utils.OperationalError: (1045, &quot;Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO)&quot;)）</div></pre></td></tr></table></figure><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><ul><li>Django2.0 </li><li>MySQL8.0.11</li></ul><a id="more"></a><p>Mysql 8.0 的部分语法，密码的加密方式发生了改变，在8.0 中的用户密码采用的是cha2 加密方法, 从而密码认证错误。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mysql -u root -p</div><div class="line">mysql&gt; use mysql;</div><div class="line">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;错误&quot;&gt;&lt;a href=&quot;#错误&quot; class=&quot;headerlink&quot; title=&quot;错误&quot;&gt;&lt;/a&gt;错误&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;（django.db.utils.OperationalError: (1045, &amp;quot;Access denied for user &amp;apos;root&amp;apos;@&amp;apos;localhost&amp;apos; (using password: NO)&amp;quot;)）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;环境：&quot;&gt;&lt;a href=&quot;#环境：&quot; class=&quot;headerlink&quot; title=&quot;环境：&quot;&gt;&lt;/a&gt;环境：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Django2.0 &lt;/li&gt;
&lt;li&gt;MySQL8.0.11&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
      <category term="django" scheme="http://linraner.github.io/tags/django/"/>
    
      <category term="mysql" scheme="http://linraner.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>一次acm区域赛后的想法</title>
    <link href="http://linraner.github.io/2018/06/06/%E4%B8%80%E6%AC%A1acm%E5%8C%BA%E5%9F%9F%E8%B5%9B%E5%90%8E%E7%9A%84%E6%83%B3%E6%B3%95/"/>
    <id>http://linraner.github.io/2018/06/06/一次acm区域赛后的想法/</id>
    <published>2018-06-06T13:16:33.000Z</published>
    <updated>2018-07-01T16:52:14.169Z</updated>
    
    <content type="html"><![CDATA[<p>  这次比赛也算是进一步加深了对算法竞赛的理解把，大佬始终是大佬（做什么都是大佬）。</p><p>  从大一开始接触acm到现在其实真正练习的也就大二半个学期，有时候也能感觉到，有的人总会是适合这一行，或者是不适合那一行，虽然努力是有回报的，但是计算机这个行业是比较靠天赋的把，或者说大学就是找到自己感兴趣的并为之奋斗，譬如创业or就业，我在编程这条路上走得并不是很远，2年了，也深有感触。<br><a id="more"></a><br>  对我来说，算法竞赛可能不是很适合，努力只能拉短与别人的差距但不足以让你走的更远更高，这是需要天赋的，或者说区域赛的铜牌银牌吸引力不是那么的大，区域赛的时候打了一个ctf的线上赛，网络安全也是未来的一个风口，一边学习，一般做题，也刷了一千三百多分，算法熟练了，快速学习能力，思维能力也不会太差，很多东西就是相通的。大学教育在很大程度上是教会学生良好的学习方法，这些学习方法可以帮助学生快速、高效地汲取自己需要的知识。适合和兴趣，2年了，我也接触过互联网的很多领域，也该有一个选择了，或是又有点迷茫……昨天晚上又梦到了高考，或许这又是一个人生的关口吧。</p><p>  acm，其实也是有天花板的。。最后附上一句话，计算机的任何东西，都不是学完再干，你学不完的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  这次比赛也算是进一步加深了对算法竞赛的理解把，大佬始终是大佬（做什么都是大佬）。&lt;/p&gt;
&lt;p&gt;  从大一开始接触acm到现在其实真正练习的也就大二半个学期，有时候也能感觉到，有的人总会是适合这一行，或者是不适合那一行，虽然努力是有回报的，但是计算机这个行业是比较靠天赋的把，或者说大学就是找到自己感兴趣的并为之奋斗，譬如创业or就业，我在编程这条路上走得并不是很远，2年了，也深有感触。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://linraner.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="心情" scheme="http://linraner.github.io/tags/%E5%BF%83%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>nothing added to commit but untracked files present解决方法</title>
    <link href="http://linraner.github.io/2018/05/30/nothing-added-to-commit-but-untracked-files-present%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://linraner.github.io/2018/05/30/nothing-added-to-commit-but-untracked-files-present解决方法/</id>
    <published>2018-05-30T09:05:53.000Z</published>
    <updated>2018-07-01T16:55:26.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git commit                                                         </div><div class="line">On branch master                                                     </div><div class="line">                                                                     </div><div class="line">Initial commit                                                       </div><div class="line">                                                                     </div><div class="line">Untracked files:                                                     </div><div class="line">        .gitignore                                                   </div><div class="line">        Test/                                                        </div><div class="line">        blogpost/                                                    </div><div class="line">        manage.py                                                    </div><div class="line">                                                                     </div><div class="line">nothing added to commit but untracked files present</div></pre></td></tr></table></figure><p><strong>文件被追踪，但是没有被添加git中</strong></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><a id="more"></a><p><strong>git status 列出当前目录所有还没有被git管理的文件和被git管理且被修改但还未提交(git commit)的文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git add manage.py</div><div class="line"><span class="meta">$</span> git add blogpost\</div><div class="line"><span class="meta">$</span> git add Test\</div><div class="line"><span class="meta">$</span> git add .gitignore</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; git commit                                                         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;On branch master                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Initial commit                                                       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Untracked files:                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .gitignore                                                   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Test/                                                        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        blogpost/                                                    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        manage.py                                                    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nothing added to commit but untracked files present&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;文件被追踪，但是没有被添加git中&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h2&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://linraner.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>c++枚举next_premutation</title>
    <link href="http://linraner.github.io/2018/05/28/c++%E6%9E%9A%E4%B8%BEnext_premutation/"/>
    <id>http://linraner.github.io/2018/05/28/c++枚举next_premutation/</id>
    <published>2018-05-28T02:39:53.000Z</published>
    <updated>2018-07-01T16:54:49.673Z</updated>
    
    <content type="html"><![CDATA[<h3 id="平均复杂度即为O-n"><a href="#平均复杂度即为O-n" class="headerlink" title="平均复杂度即为O(n)"></a>平均复杂度即为O(n)</h3><ul><li><p>next_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“下一个排列次序”；</p></li><li><p>prev_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“上一个排列次序”；</p></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.size();i++)&#123;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;v[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">v.push_back(<span class="number">1</span>);</div><div class="line">v.push_back(<span class="number">3</span>);</div><div class="line">v.push_back(<span class="number">2</span>);</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"原排列 ： "</span>;</div><div class="line">f(v); </div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">next_permutation(v.begin(),v.end());<span class="comment">//升序序列  或者下一个排列次序 按照字典序生成下一个序列 </span></div><div class="line">f(v);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//for(int i=0;i&lt;5;i++)&#123;</span></div><div class="line"><span class="comment">//prev_permutation(v.begin(),v.end());//降序 </span></div><div class="line"><span class="comment">//f(v);</span></div><div class="line"><span class="comment">//&#125; </span></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;平均复杂度即为O-n&quot;&gt;&lt;a href=&quot;#平均复杂度即为O-n&quot; class=&quot;headerlink&quot; title=&quot;平均复杂度即为O(n)&quot;&gt;&lt;/a&gt;平均复杂度即为O(n)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;next_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“下一个排列次序”；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;prev_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“上一个排列次序”；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h2&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="c++" scheme="http://linraner.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu错误-Could not get lock /var/lib/dpkg/lock</title>
    <link href="http://linraner.github.io/2018/05/15/Ubuntu%E9%94%99%E8%AF%AF-Could-not-get-lock-var-lib-dpkg-lock/"/>
    <id>http://linraner.github.io/2018/05/15/Ubuntu错误-Could-not-get-lock-var-lib-dpkg-lock/</id>
    <published>2018-05-15T09:45:02.000Z</published>
    <updated>2018-07-01T16:54:32.589Z</updated>
    
    <content type="html"><![CDATA[<h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable) </div><div class="line">E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?</div></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><a id="more"></a><h4 id="查看运行的线程"><a href="#查看运行的线程" class="headerlink" title="查看运行的线程"></a>查看运行的线程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps -A | grep apt-get</div><div class="line"><span class="meta">#</span> sudo kill processnumber</div><div class="line"><span class="meta">#</span> 关闭apt进程</div></pre></td></tr></table></figure><p>我的没有发现进程， 可能是上次运行安装或更新时没有正常完成造成的</p><h4 id="终端输入"><a href="#终端输入" class="headerlink" title="终端输入"></a>终端输入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo rm /var/cache/apt/archives/lock</div><div class="line">sudo rm /var/lib/dpkg/lock</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;报错信息&quot;&gt;&lt;a href=&quot;#报错信息&quot; class=&quot;headerlink&quot; title=&quot;报错信息&quot;&gt;&lt;/a&gt;报错信息&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h3&gt;
    
    </summary>
    
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
      <category term="ubuntu" scheme="http://linraner.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>c++ std::ios_base::sync_with_stdio 加速输入输出</title>
    <link href="http://linraner.github.io/2018/05/14/c-std-ios-base-sync-with-stdio-%E5%8A%A0%E9%80%9F%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>http://linraner.github.io/2018/05/14/c-std-ios-base-sync-with-stdio-加速输入输出/</id>
    <published>2018-05-14T06:57:41.000Z</published>
    <updated>2018-07-01T16:55:49.760Z</updated>
    
    <content type="html"><![CDATA[<h3 id="static-bool-sync-with-stdio-bool-sync-true"><a href="#static-bool-sync-with-stdio-bool-sync-true" class="headerlink" title="static bool sync_with_stdio( bool sync = true );"></a><code>static bool sync_with_stdio( bool sync = true );</code></h3><p>设置标准 C++ 流是否与标准 C 流在每次输入/输出操作后同步。</p><p>遇到cin TLE时可以用于取消cin同步, 取消之后不能和 scanf，sscanf, getchar, fgets 之类同用。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a\n"</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">printf</span>(<span class="string">"b\n"</span>);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"c\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="输出-（环境-g-5-4-0）"><a href="#输出-（环境-g-5-4-0）" class="headerlink" title="输出 （环境 g++5.4.0）"></a>输出 （环境 g++5.4.0）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">b</div><div class="line">c</div><div class="line">a</div></pre></td></tr></table></figure><p>默认的情况下cin绑定的是cout，每次执行 &lt;&lt; 操作符的时候都要调用flush，这样会增加IO负担。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div></pre></td></tr></table></figure><p>参考一 ： <a href="http://zh.cppreference.com/w/cpp/io/ios_base/sync_with_stdio" target="_blank" rel="noopener">http://zh.cppreference.com/w/cpp/io/ios_base/sync_with_stdio</a></p><p>参考二 ：<a href="http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html" target="_blank" rel="noopener">http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;static-bool-sync-with-stdio-bool-sync-true&quot;&gt;&lt;a href=&quot;#static-bool-sync-with-stdio-bool-sync-true&quot; class=&quot;headerlink&quot; title=&quot;static bool sync_with_stdio( bool sync = true );&quot;&gt;&lt;/a&gt;&lt;code&gt;static bool sync_with_stdio( bool sync = true );&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;设置标准 C++ 流是否与标准 C 流在每次输入/输出操作后同步。&lt;/p&gt;
&lt;p&gt;遇到cin TLE时可以用于取消cin同步, 取消之后不能和 scanf，sscanf, getchar, fgets 之类同用。&lt;/p&gt;
&lt;h4 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h4&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="c++" scheme="http://linraner.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Windows10 WIFI 热点问题</title>
    <link href="http://linraner.github.io/2018/05/08/Window-WIFI-%E7%83%AD%E7%82%B9%E9%97%AE%E9%A2%98/"/>
    <id>http://linraner.github.io/2018/05/08/Window-WIFI-热点问题/</id>
    <published>2018-05-08T09:51:53.000Z</published>
    <updated>2018-06-15T07:15:56.003Z</updated>
    
    <content type="html"><![CDATA[<p>win10玄学bug之一</p><p>解决方案 ： </p><p>命令行输入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> netsh wlan set hostednetwork mode=allow ssid=NAME key=PASSWORD</div><div class="line"><span class="meta">$</span> netsh wlan start hostednetwork</div></pre></td></tr></table></figure></p><p>然后在网络适配器的本地连接-&gt;属性-&gt;共享-&gt;设置共享刚才设置的WIFI热点</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;win10玄学bug之一&lt;/p&gt;
&lt;p&gt;解决方案 ： &lt;/p&gt;
&lt;p&gt;命令行输入&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;
      
    
    </summary>
    
    
      <category term="windows10" scheme="http://linraner.github.io/tags/windows10/"/>
    
  </entry>
  
  <entry>
    <title>Python解决字符编码问题</title>
    <link href="http://linraner.github.io/2018/05/05/Python%E8%A7%A3%E5%86%B3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://linraner.github.io/2018/05/05/Python解决字符编码问题/</id>
    <published>2018-05-05T14:33:02.000Z</published>
    <updated>2018-07-01T16:56:24.861Z</updated>
    
    <content type="html"><![CDATA[<p>字符串分为unicode 和 str 两种类型</p><p>文本字符和二进制数据分别用 str 和 byte表示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#系统默认编码设置为utf-8</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getdefultencoding</div><div class="line"><span class="string">'utf-8'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure><p>str 与 bytes 之间的转换可以用 encode 和从decode<br><a id="more"></a><br><img src="https://foofish.net/images/python3-str2.jpg" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"Python测试"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = s.encode()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</div><div class="line"><span class="string">b'Python\xe6\xb5\x8b\xe8\xaf\x95'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = s.decode()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</div><div class="line"><span class="string">'Python测试'</span></div></pre></td></tr></table></figure><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"asdasd"</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = base64.b64encode(s)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = base64.b64decode(s)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</div></pre></td></tr></table></figure><hr><p>参考 ： <a href="https://foofish.net/how-python3-handle-charset-encoding.html" target="_blank" rel="noopener">https://foofish.net/how-python3-handle-charset-encoding.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;字符串分为unicode 和 str 两种类型&lt;/p&gt;
&lt;p&gt;文本字符和二进制数据分别用 str 和 byte表示&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#系统默认编码设置为utf-8&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;sys.getdefultencoding&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;str 与 bytes 之间的转换可以用 encode 和从decode&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://linraner.github.io/tags/python/"/>
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
  </entry>
  
</feed>
