<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank</title>
  
  <subtitle>Your heart is free. Have the courage to follow it.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://linraner.github.io/"/>
  <updated>2019-07-27T12:23:57.877Z</updated>
  <id>http://linraner.github.io/</id>
  
  <author>
    <name>Frank</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Manacher算法-最长回文串</title>
    <link href="http://linraner.github.io/2019/07/27/Manacher-%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <id>http://linraner.github.io/2019/07/27/Manacher-回文串/</id>
    <published>2019-07-27T11:00:28.898Z</published>
    <updated>2019-07-27T12:23:57.877Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>求解字符串最长回文串。</p><p>leetcode: <a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">最长回文子串</a></p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">121</div><div class="line">1</div><div class="line">daccbba</div><div class="line">bb</div></pre></td></tr></table></figure><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">121</div><div class="line">1</div><div class="line">accbba</div><div class="line">bb</div></pre></td></tr></table></figure><p><code>Manacher</code>算法，时间复杂度O(n), 空间复杂度O(1)。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>先对s串处理转换为奇数长度的串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s = &quot;12212321&quot;</div><div class="line">==&gt;</div><div class="line">S # 1 # 2 # 2 # 1 # 2 # 3 # 2 # 1 #</div><div class="line">P 1 2 1 2 5 2 1 4 1 2 1 6 1 2 1 2 1</div></pre></td></tr></table></figure></p><p>p[i]表示记录以字符S[i]为中心的最长回文子串向左或向右扩张的长度（包括S[i]）。<br>即以i为原点的最大回文半径。</p><p>Manacher算法增加两个辅助变量id和mx。</p><p>id代表当前“已经匹配完毕的结尾最远的回文串”中心为s的第ID位。</p><p>mx = p[i] + id代表当前“已经匹配完毕的结尾最远的回文串”到达了s的第Mx位。</p><p>最长回文子串长度 = p[i] - 1 = 5。</p><p>2*id - i是i关于id的对称点</p><a id="more"></a><p>故p[i] = min(p[2*id-i], mx-i)</p><p>主要代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//对s进行修改</span></div><div class="line">...</div><div class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; s.length()<span class="number">-1</span>; i++) </div><div class="line">&#123;</div><div class="line">    p[i] = mx &gt; i ? min(p[<span class="number">2</span> * id - i], mx - i) : <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (s[i + p[i]] == s[i - p[i]]) </div><div class="line">        p[i]++;</div><div class="line">    <span class="keyword">if</span> (i + p[i] &gt; mx) </div><div class="line">    &#123;</div><div class="line">        mx = i + p[i];</div><div class="line">        id = i;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="comment">// 求结果串</span></div></pre></td></tr></table></figure><p>ac代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">ipublic <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        String s = <span class="string">"12212321"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">preProcess</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = s.length();</div><div class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"^$"</span>;</div><div class="line">        &#125;</div><div class="line">        StringBuilder ret = <span class="keyword">new</span> StringBuilder(<span class="string">"^"</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</div><div class="line">            ret.append(<span class="string">"#"</span>).append(s.charAt(i));</div><div class="line">        ret.append(<span class="string">"#$"</span>);</div><div class="line">        <span class="keyword">return</span> ret.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        String t = s;</div><div class="line">        s = preProcess(s);</div><div class="line">        <span class="keyword">int</span> n = s.length();</div><div class="line">        <span class="keyword">int</span>[] p = <span class="keyword">new</span> <span class="keyword">int</span>[n];</div><div class="line">        <span class="keyword">int</span> mx = <span class="number">0</span>, id = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</div><div class="line">            p[i] = (mx &gt; i) ? Math.min(p[<span class="number">2</span> * id - i], mx - i) : <span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span> (s.charAt(i + p[i]) == s.charAt(i - p[i])) &#123;</div><div class="line">                p[i]++;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (i + p[i] &gt; mx) &#123;</div><div class="line">                mx = i + p[i];</div><div class="line">                id = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> centerIndex = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; p.length - <span class="number">1</span>; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (p[i] &gt; maxLen) &#123;</div><div class="line">                maxLen = p[i];</div><div class="line">                centerIndex = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> start = (centerIndex - maxLen) / <span class="number">2</span>; </div><div class="line">        <span class="keyword">return</span> t.substring(start, start + maxLen - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000008484167" target="_blank" rel="noopener">Manacher算法</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;求解字符串最长回文串。&lt;/p&gt;
&lt;p&gt;leetcode: &lt;a href=&quot;https://leetcode-cn.com/problems/longest-palindromic-substring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;最长回文子串&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;样例&quot;&gt;&lt;a href=&quot;#样例&quot; class=&quot;headerlink&quot; title=&quot;样例&quot;&gt;&lt;/a&gt;样例&lt;/h2&gt;&lt;h3 id=&quot;Input&quot;&gt;&lt;a href=&quot;#Input&quot; class=&quot;headerlink&quot; title=&quot;Input&quot;&gt;&lt;/a&gt;Input&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;daccbba&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bb&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Output&quot;&gt;&lt;a href=&quot;#Output&quot; class=&quot;headerlink&quot; title=&quot;Output&quot;&gt;&lt;/a&gt;Output&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;121&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;accbba&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bb&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Manacher&lt;/code&gt;算法，时间复杂度O(n), 空间复杂度O(1)。&lt;/p&gt;
&lt;h3 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h3&gt;&lt;p&gt;先对s串处理转换为奇数长度的串。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;s = &amp;quot;12212321&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;==&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;S # 1 # 2 # 2 # 1 # 2 # 3 # 2 # 1 #&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;P 1 2 1 2 5 2 1 4 1 2 1 6 1 2 1 2 1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;p[i]表示记录以字符S[i]为中心的最长回文子串向左或向右扩张的长度（包括S[i]）。&lt;br&gt;即以i为原点的最大回文半径。&lt;/p&gt;
&lt;p&gt;Manacher算法增加两个辅助变量id和mx。&lt;/p&gt;
&lt;p&gt;id代表当前“已经匹配完毕的结尾最远的回文串”中心为s的第ID位。&lt;/p&gt;
&lt;p&gt;mx = p[i] + id代表当前“已经匹配完毕的结尾最远的回文串”到达了s的第Mx位。&lt;/p&gt;
&lt;p&gt;最长回文子串长度 = p[i] - 1 = 5。&lt;/p&gt;
&lt;p&gt;2*id - i是i关于id的对称点&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="http://linraner.github.io/tags/algorithm/"/>
    
      <category term="Java" scheme="http://linraner.github.io/tags/Java/"/>
    
      <category term="String" scheme="http://linraner.github.io/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Java基础复习（一）</title>
    <link href="http://linraner.github.io/2019/05/01/Java%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://linraner.github.io/2019/05/01/Java复习（一）/</id>
    <published>2019-05-01T02:39:53.000Z</published>
    <updated>2019-07-31T01:52:04.707Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="面向对象六原则一法则"><a href="#面向对象六原则一法则" class="headerlink" title="面向对象六原则一法则"></a>面向对象六原则一法则</h3><h4 id="单一职责原则（Single-Resposibility-Principle）"><a href="#单一职责原则（Single-Resposibility-Principle）" class="headerlink" title="单一职责原则（Single-Resposibility Principle）"></a>单一职责原则（Single-Resposibility Principle）</h4><p>一个类只做它该做的事情。（单一职责原则想表达的就是”高内聚”，写代码最终极的原则只有六个字”高内聚、低耦合”，所谓的高内聚就是一个代码模块只完成一项功能，在面向对象中，如果只让一个类完成它该做的事，而不涉及与它无关的领域就是践行了高内聚的原则，这个类就只有单一职责。另一个是模块化一个好的软件系统，它里面的每个功能模块也应该是可以轻易的拿到其他系统中使用的，这样才能实现软件复用的目标。）。</p><h4 id="开放封闭原则（Open-Closed-principle）"><a href="#开放封闭原则（Open-Closed-principle）" class="headerlink" title="开放封闭原则（Open-Closed principle）"></a>开放封闭原则（Open-Closed principle）</h4><p>软件实体应当对扩展开放，对修改关闭。（在理想的状态下，当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类就可以，不需要修改原来的任何一行代码。要做到开闭有两个要点：1. 抽象是关键，一个系统中如果没有抽象类或接口系统就没有扩展点；2. 封装可变性，将系统中的各种可变因素封装到一个继承结构中，如果多个可变因素混杂在一起，系统将变得复杂而换乱，如果不清楚如何封装可变性）</p><h4 id="Liskov替换原则（Liskov-Substituion-Principle）"><a href="#Liskov替换原则（Liskov-Substituion-Principle）" class="headerlink" title="Liskov替换原则（Liskov-Substituion Principle）"></a>Liskov替换原则（Liskov-Substituion Principle）</h4><p>里氏替换原则，任何时候都可以用子类型替换掉父类型。（关于里氏替换原则的描述，Barbara Liskov女士的描述比这个要复杂得多，但简单的说就是能用父类型的地方就一定能使用子类型。里氏替换原则可以检查继承关系是否合理，如果一个继承关系违背了里氏替换原则，那么这个继承关系一定是错误的，需要对代码进行重构。例如让猫继承狗，或者狗继承猫，又或者让正方形继承长方形都是错误的继承关系，因为你很容易找到违反里氏替换原则的场景。需要注意的是：子类一定是增加父类的能力而不是减少父类的能力，因为子类比父类的能力更多，把能力多的对象当成能力少的对象来用当然没有任何问题。）代表约定、代表角色，能否正确的使用接口一定是编程水平高低的重要标识。）</p><h4 id="依赖倒置原则（Dependecy-Inversion-Principle）"><a href="#依赖倒置原则（Dependecy-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependecy-Inversion Principle）"></a>依赖倒置原则（Dependecy-Inversion Principle）</h4><p>面向接口编程。（该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代，请参考下面的里氏替换原则。）</p><h4 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface-Segregation Principle）"></a>接口隔离原则（Interface-Segregation Principle）</h4><p>接口要小而专，绝不能大而全。（臃肿的接口是对接口的污染，既然接口表示能力，那么一个接口只应该描述一种能力，接口也应该是高度内聚的。例如，琴棋书画就应该分别设计为四个接口，而不应设计成一个接口中的四个方法，因为如果设计成一个接口中的四个方法，那么这个接口很难用，毕竟琴棋书画四样都精通的人还是少数，而如果设计成四个接口，会几项就实现几个接口，这样的话每个接口被复用的可能性是很高的。Java中的接口代表能力、 分离的手段主要有以下两种：1. 委托分离，通过增加一个新的类型来委托客户的请求，隔离客户和接口的直接依赖，但是会增加系统的开销。2. 多重继承分离，通过接口多继承来实现客户的需求，这种方式是较好的。</p><h4 id="合成聚合复用原则"><a href="#合成聚合复用原则" class="headerlink" title="合成聚合复用原则"></a>合成聚合复用原则</h4><p>优先使用聚合或合成关系复用代码。（通过继承来复用代码是面向对象程序设计中被滥用得最多的东西，因为所有的教科书都无一例外的对继承进行了鼓吹从而误导了初学者，类与类之间简单的说有三种关系，Is-A关系、Has-A关系、Use-A关系，分别代表继承、关联和依赖。其中，关联关系根据其关联的强度又可以进一步划分为关联、聚合和合成，但说白了都是Has-A关系，合成聚合复用原则想表达的是优先考虑Has-A关系而不是Is-A关系复用代码，原因嘛可以自己从百度上找到一万个理由，需要说明的是，即使在Java的API中也有不少滥用继承的例子，例如Properties类继承了Hashtable类，Stack类继承了Vector类，这些继承明显就是错误的，更好的做法是在Properties类中放置一个Hashtable类型的成员并且将其键和值都设置为字符串来存储数据，而Stack类的设计也应该是在Stack类中放一个Vector对象来存储数据。记住：任何时候都不要继承工具类，工具是可以拥有并可以使用的，而不是拿来继承的。）</p><h4 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h4><p>迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。再复杂的系统都可以为用户提供一个简单的门面，Java Web开发中作为前端控制器的Servlet或Filter不就是一个门面吗，浏览器对服务器的运作方式一无所知，但是通过前端控制器就能够根据你的请求得到相应的服务。调停者模式也可以举一个简单的例子来说明，例如一台计算机，CPU、内存、硬盘、显卡、声卡各种设备需要相互配合才能很好的工作，但是如果这些东西都直接连接到一起，计算机的布线将异常复杂，在这种情况下，主板作为一个调停者的身份出现，它将各个设备连接在一起而不需要每个设备之间直接交换数据，这样就减小了系统的耦合度和复杂度。</p><h3 id="Java如何实现的平台无关"><a href="#Java如何实现的平台无关" class="headerlink" title="Java如何实现的平台无关"></a>Java如何实现的平台无关</h3><ul><li>Java语言规范<ul><li>通过规定Java语言中基本数据类型的取值范围和行为</li></ul></li><li>Class文件<ul><li>所有Java文件要编译成统一的Class文件</li></ul></li><li>Java虚拟机<ul><li>通过Java虚拟机将Class文件转成对应平台的二进制文件等</li></ul></li></ul><p>JVM支持哪些语言（Kotlin、Groovy、JRuby、Jython、Scala）</p><h3 id="值传递、引用传递"><a href="#值传递、引用传递" class="headerlink" title="值传递、引用传递"></a>值传递、引用传递</h3><p>Java中只有值传递<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</div><div class="line">        Integer b = <span class="number">20</span>;</div><div class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</div><div class="line">        swap(a, b);</div><div class="line">        System.out.println(String.format(<span class="string">"a:%d    b:%d"</span>, a, b));</div><div class="line">        swap(arr);</div><div class="line">        System.out.println(Arrays.toString(arr));</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 对于对象而言传递的是对象引用的地址作为值</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, Integer b)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> t = a;</div><div class="line">        a = b;</div><div class="line">        b = t;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">        arr[<span class="number">0</span>] = <span class="number">996</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">OutPut:</span></div><div class="line"><span class="comment">a:10    b:20</span></div><div class="line"><span class="comment">[996, 2]</span></div><div class="line"><span class="comment">**/</span></div></pre></td></tr></table></figure></p><ul><li>值传递（pass by value）是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</li><li>引用传递（pass by reference）是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。<a id="more"></a></li></ul><h3 id="成员变量和方法作用域"><a href="#成员变量和方法作用域" class="headerlink" title="成员变量和方法作用域"></a>成员变量和方法作用域</h3><table><thead><tr><th style="text-align:center">作用域</th><th style="text-align:center">当前类</th><th style="text-align:center">同package</th><th style="text-align:center">子孙类</th><th style="text-align:center">不同package</th></tr></thead><tbody><tr><td style="text-align:center">public</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">fridendly(默认)</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">private</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table><p>例子：protected在其子类中可以访问，无论是子类内部还是子类的实例，无论它们是在哪个包中, 但如果子类与父类不在同一个包中，在子类中用父类的实例去访问的话不可以。</p><table><thead><tr><th>名称</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>public</td><td>可以被任何类访问</td><td></td></tr><tr><td>protected</td><td>可以被同一包中的所有类访问</td><td>子类没有在同一包中也可以访问</td></tr><tr><td>private</td><td>只能够被 当前类的方法访问</td><td></td></tr><tr><td>缺省无访问修饰符</td><td>只能够被 当前类的方法访问</td><td>如果子类没有在同一个包中，也不能访问</td></tr></tbody></table><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>八种基本数据类型：整型（byte8、short16、int32、long64)、浮点型（float32、double63）、布尔型（boolean8）、字符型（char16）。</p><p>自动转换顺序<br>从低到高的顺序转换。不同类型数据间的优先关系如下：<br>低———————————————&gt;高<br>byte,short,char-&gt; int -&gt; long -&gt; float -&gt; double</p><p>“ <strong>除了long和double类型</strong>，Java基本数据类型都是的简单读写都是原子的，而简单读写就是赋值和return语句。”因此而对于其他自加自减以及其他运算操作，是非原子操作。基本类型的数据对于其他线程来说不能保证是最新修改值，因此，声明为volative可以保证可视性。</p><p>对于32位操作系统来说，单次操作能处理的最长长度为32bit，而long类型8字节64bit，所以对long的读写都要两条指令才能完成（即每次读写64bit中的32bit）。如果JVM要保证long和double读写的原子性，势必要做额外的处理。不加volatile的话 ，并发情况下针对某个元素的访问可能出现脏读(cpu cache导致的)，单纯的替换如果允许脏读的话 ，可以不加这些修饰符 ，如果涉及到非幂等操作 ，还是要用同步修饰符。</p><h3 id="Integer的缓存机制"><a href="#Integer的缓存机制" class="headerlink" title="Integer的缓存机制"></a>Integer的缓存机制</h3><p>缓存支持-128到127之间的自动装箱过程。最大值127可以通过-XX:AutoBoxCacheMax=size修改。 缓存通过一个for循环实现。从低到高并创建尽可能多的整数并存储在一个整数数组中。这个缓存会在Integer类第一次被使用的时候被初始化出来。以后，就可以使用缓存中包含的实例对象，而不是创建一个新的实例(在自动装箱的情况下)。Java 5范围是固定的-128 至 +127。Java 6中，可以通过java.lang.Integer.IntegerCache.high设置最大值。根据应用程序的实际情况灵活地调整来提高性能。到底是什么原因选择这个-128到127范围呢？</p><p>Byte, Short, Long有固定范围: -128 到 127。对于Character, 范围是 0 到 127。除了Integer以外，这个范围都不能改变。</p><h3 id="字符串的不可变性"><a href="#字符串的不可变性" class="headerlink" title="字符串的不可变性"></a>字符串的不可变性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String s1 = <span class="string">"asd"</span>;<span class="comment">//s1保存String对象的引用</span></div><div class="line">String s2 = s1;<span class="comment">//s2保存为s1的引用</span></div><div class="line">s1 = s1.replace(<span class="string">"a"</span>, <span class="string">"asd"</span>);<span class="comment">//保存新创建对象的引用</span></div></pre></td></tr></table></figure><p>repalce源码，每次都产生一个新的String对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (oldChar != newChar) &#123;</div><div class="line">            <span class="keyword">int</span> len = value.length;</div><div class="line">            <span class="keyword">int</span> i = -<span class="number">1</span>;</div><div class="line">            <span class="keyword">char</span>[] val = value; <span class="comment">/* avoid getfield opcode */</span></div><div class="line">            <span class="keyword">while</span> (++i &lt; len) &#123;</div><div class="line">                <span class="keyword">if</span> (val[i] == oldChar) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (i &lt; len) &#123;</div><div class="line">                <span class="keyword">char</span> buf[] = <span class="keyword">new</span> <span class="keyword">char</span>[len];</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">                    buf[j] = val[j];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">while</span> (i &lt; len) &#123;</div><div class="line">                    <span class="keyword">char</span> c = val[i];</div><div class="line">                    buf[i] = (c == oldChar) ? newChar : c;</div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);<span class="comment">//构造新的String对象</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h3 id="String拼接"><a href="#String拼接" class="headerlink" title="String拼接"></a>String拼接</h3><p><code>String s = &quot;a&quot; + &quot;b&quot;</code>，编译器会进行常量折叠(因为两个都是编译期常量，编译期可知)，即变成 String s = “ab”。</p><p>对于能够进行优化的(String s = “a” + 变量 等)底层是StringBuilder 的 append() 方法替代，最后调用 toString() 方法 (底层就是一个 new String())，Java本身是不支持运算符重载的。</p><p>对于Java的字符串拼接从效率比较：</p><p>StringBuilder&gt;StringBuffer（synchronized）&gt;concat&gt;+&gt;StringUtils.join</p><h3 id="Arrays-asList获得的List使用时需要注意什么"><a href="#Arrays-asList获得的List使用时需要注意什么" class="headerlink" title="Arrays.asList获得的List使用时需要注意什么"></a>Arrays.asList获得的List使用时需要注意什么</h3><ol><li>asList 得到的只是一个 Arrays 的内部类，一个原来数组的视图 List，因此如果对它进行增删操作会报错</li><li>用 ArrayList 的构造器可以将其转变成真正的 ArrayList</li></ol><h3 id="fail-fast和fail-safe"><a href="#fail-fast和fail-safe" class="headerlink" title="fail-fast和fail-safe"></a>fail-fast和fail-safe</h3><p>Java集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生 fail-fast 机制。记住是有可能，而不是一定。例如：假设存在两个线程（线程 1、线程2），线程 1 通过 Iterator 在遍历集合 A 中的元素，在某个时候线程 2 修改了集合 A 的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 ConcurrentModificationException 异常。</p><p>例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; fruits = <span class="keyword">new</span> ArrayList&lt;String&gt;() &#123;&#123;</div><div class="line">    add(<span class="string">"apple"</span>);</div><div class="line">    add(<span class="string">"orange"</span>);</div><div class="line">    add(<span class="string">"orange"</span>);</div><div class="line">    add(<span class="string">"chestnut"</span>);</div><div class="line">&#125;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (String fruit : fruits) &#123;</div><div class="line">    <span class="keyword">if</span> (fruit.equals(<span class="string">"orange"</span>)) &#123;</div><div class="line">        fruits.remove(fruit);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">System.out.println(fruits.toString());</div></pre></td></tr></table></figure></p><p>代码抛出CMException异常，在增强for循环中，集合遍历是通过iterator进行的，但是元素的add/remove却是直接使用的集合类自己的方法。这就导致iterator在遍历的时候，会发现有一个元素在自己不知不觉的情况下就被删除/添加了，就会抛出一个异常，用来提示用户，可能发生了并发修改。</p><p>java.util.concurrent包下的容器都是fail-safe的，可以在多线程下并发使用，并发修改。同时也可以在foreach中进行add/remove 。</p><p>例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; fruits = <span class="keyword">new</span> CopyOnWriteArrayList&lt;String&gt;() &#123;&#123;</div><div class="line">    add(<span class="string">"apple"</span>);</div><div class="line">    add(<span class="string">"orange"</span>);</div><div class="line">    add(<span class="string">"orange"</span>);</div><div class="line">    add(<span class="string">"chestnut"</span>);</div><div class="line">&#125;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (String fruit : fruits) &#123;</div><div class="line">    <span class="keyword">if</span> (fruit.equals(<span class="string">"orange"</span>)) &#123;</div><div class="line">        fruits.remove(fruit);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">System.out.println(fruits.toString());</div></pre></td></tr></table></figure></p><p>以上代码，使用CopyOnWriteArrayList代替了ArrayList，就不会发生异常。</p><p>fail-safe集合的所有对集合的修改都是先拷贝一份副本，然后在副本集合上进行的，并不是直接对原集合进行修改。并且这些修改方法，如add/remove都是通过加锁来控制并发的。<br>所以，CopyOnWriteArrayList中的迭代器在迭代的过程中不需要做fail-fast的并发检测。（因为fail-fast的主要目的就是识别并发，然后通过异常的方式通知用户）。</p><h4 id="Copy-On-Write"><a href="#Copy-On-Write" class="headerlink" title="Copy-On-Write"></a>Copy-On-Write</h4><p>Copy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。</p><p>CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。</p><p>CopyOnWriteArrayList中add/remove等写方法是需要加锁的，目的是为了避免Copy出N个副本出来，导致并发写。读方法未加锁，这样做的好处是我们可以对CopyOnWrite容器进行并发的读，当然，这里读到的数据可能不是最新的。因为写时复制的思想是通过延时更新的策略来实现数据的最终一致性的，并非强一致性。</p><p>CopyOnWrite容器是一种读写分离的思想，读和写不同的容器。而Vector在读写的时候使用同一个容器，读写互斥，同时只能做一件事儿。</p><p>CopyOnWrite并发容器用于读多写少的并发场景：白名单、黑名单、商品类目的访问和更新场景。</p><p>和ArrayList比较，它具有以下特性：</p><p>支持高效率并发且是线程安全的 因为通常需要复制整个基础数组，所以可变操作（add()、set() 和 remove() 等等）的开销很大 迭代器支持hasNext(), next()等不可变操作，但不支持可变 remove()等操作 使用迭代器进行遍历的速度很快，并且不会与其他线程发生冲突。在构造迭代器时，迭代器依赖于不变的数组快照</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>Iterator接口中提供了很多对集合元素迭代的方法。每个集合中都有可以返回迭代器对象的方法iterator()。迭代器在迭代的过程中可以删除底层集合的元素。</p><h4 id="Iterator和ListIterator的区别？"><a href="#Iterator和ListIterator的区别？" class="headerlink" title="Iterator和ListIterator的区别？"></a>Iterator和ListIterator的区别？</h4><ul><li>Iterator可以用来遍历Set和List集合，但是ListIterator只能遍历List</li><li>Iterator对集合只能向前遍历（next()）；而ListIterator可以向前遍历（next()），也可以向后遍历（previous()）</li><li>ListIterator实现了Iterator接口</li></ul><h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><p><img src="https://i.loli.net/2019/07/25/5d39ae37ad0cb28695.png" alt="IO"></p><h4 id="BIO、NIO和AIO"><a href="#BIO、NIO和AIO" class="headerlink" title="BIO、NIO和AIO"></a>BIO、NIO和AIO</h4><p>— 待续</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.hollischuang.com/archives/3280" target="_blank" rel="noopener">Java工程师成神之路（2019正式版）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;Java基础&quot;&gt;&lt;a href=&quot;#Java基础&quot; class=&quot;headerlink&quot; title=&quot;Java基础&quot;&gt;&lt;/a&gt;Java基础&lt;/h2&gt;&lt;h3 id=&quot;面向对象六原则一法则&quot;&gt;&lt;a href=&quot;#面向对象六原则一法则&quot; class=&quot;headerlink&quot; title=&quot;面向对象六原则一法则&quot;&gt;&lt;/a&gt;面向对象六原则一法则&lt;/h3&gt;&lt;h4 id=&quot;单一职责原则（Single-Resposibility-Principle）&quot;&gt;&lt;a href=&quot;#单一职责原则（Single-Resposibility-Principle）&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则（Single-Resposibility Principle）&quot;&gt;&lt;/a&gt;单一职责原则（Single-Resposibility Principle）&lt;/h4&gt;&lt;p&gt;一个类只做它该做的事情。（单一职责原则想表达的就是”高内聚”，写代码最终极的原则只有六个字”高内聚、低耦合”，所谓的高内聚就是一个代码模块只完成一项功能，在面向对象中，如果只让一个类完成它该做的事，而不涉及与它无关的领域就是践行了高内聚的原则，这个类就只有单一职责。另一个是模块化一个好的软件系统，它里面的每个功能模块也应该是可以轻易的拿到其他系统中使用的，这样才能实现软件复用的目标。）。&lt;/p&gt;
&lt;h4 id=&quot;开放封闭原则（Open-Closed-principle）&quot;&gt;&lt;a href=&quot;#开放封闭原则（Open-Closed-principle）&quot; class=&quot;headerlink&quot; title=&quot;开放封闭原则（Open-Closed principle）&quot;&gt;&lt;/a&gt;开放封闭原则（Open-Closed principle）&lt;/h4&gt;&lt;p&gt;软件实体应当对扩展开放，对修改关闭。（在理想的状态下，当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类就可以，不需要修改原来的任何一行代码。要做到开闭有两个要点：1. 抽象是关键，一个系统中如果没有抽象类或接口系统就没有扩展点；2. 封装可变性，将系统中的各种可变因素封装到一个继承结构中，如果多个可变因素混杂在一起，系统将变得复杂而换乱，如果不清楚如何封装可变性）&lt;/p&gt;
&lt;h4 id=&quot;Liskov替换原则（Liskov-Substituion-Principle）&quot;&gt;&lt;a href=&quot;#Liskov替换原则（Liskov-Substituion-Principle）&quot; class=&quot;headerlink&quot; title=&quot;Liskov替换原则（Liskov-Substituion Principle）&quot;&gt;&lt;/a&gt;Liskov替换原则（Liskov-Substituion Principle）&lt;/h4&gt;&lt;p&gt;里氏替换原则，任何时候都可以用子类型替换掉父类型。（关于里氏替换原则的描述，Barbara Liskov女士的描述比这个要复杂得多，但简单的说就是能用父类型的地方就一定能使用子类型。里氏替换原则可以检查继承关系是否合理，如果一个继承关系违背了里氏替换原则，那么这个继承关系一定是错误的，需要对代码进行重构。例如让猫继承狗，或者狗继承猫，又或者让正方形继承长方形都是错误的继承关系，因为你很容易找到违反里氏替换原则的场景。需要注意的是：子类一定是增加父类的能力而不是减少父类的能力，因为子类比父类的能力更多，把能力多的对象当成能力少的对象来用当然没有任何问题。）代表约定、代表角色，能否正确的使用接口一定是编程水平高低的重要标识。）&lt;/p&gt;
&lt;h4 id=&quot;依赖倒置原则（Dependecy-Inversion-Principle）&quot;&gt;&lt;a href=&quot;#依赖倒置原则（Dependecy-Inversion-Principle）&quot; class=&quot;headerlink&quot; title=&quot;依赖倒置原则（Dependecy-Inversion Principle）&quot;&gt;&lt;/a&gt;依赖倒置原则（Dependecy-Inversion Principle）&lt;/h4&gt;&lt;p&gt;面向接口编程。（该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代，请参考下面的里氏替换原则。）&lt;/p&gt;
&lt;h4 id=&quot;接口隔离原则（Interface-Segregation-Principle）&quot;&gt;&lt;a href=&quot;#接口隔离原则（Interface-Segregation-Principle）&quot; class=&quot;headerlink&quot; title=&quot;接口隔离原则（Interface-Segregation Principle）&quot;&gt;&lt;/a&gt;接口隔离原则（Interface-Segregation Principle）&lt;/h4&gt;&lt;p&gt;接口要小而专，绝不能大而全。（臃肿的接口是对接口的污染，既然接口表示能力，那么一个接口只应该描述一种能力，接口也应该是高度内聚的。例如，琴棋书画就应该分别设计为四个接口，而不应设计成一个接口中的四个方法，因为如果设计成一个接口中的四个方法，那么这个接口很难用，毕竟琴棋书画四样都精通的人还是少数，而如果设计成四个接口，会几项就实现几个接口，这样的话每个接口被复用的可能性是很高的。Java中的接口代表能力、 分离的手段主要有以下两种：1. 委托分离，通过增加一个新的类型来委托客户的请求，隔离客户和接口的直接依赖，但是会增加系统的开销。2. 多重继承分离，通过接口多继承来实现客户的需求，这种方式是较好的。&lt;/p&gt;
&lt;h4 id=&quot;合成聚合复用原则&quot;&gt;&lt;a href=&quot;#合成聚合复用原则&quot; class=&quot;headerlink&quot; title=&quot;合成聚合复用原则&quot;&gt;&lt;/a&gt;合成聚合复用原则&lt;/h4&gt;&lt;p&gt;优先使用聚合或合成关系复用代码。（通过继承来复用代码是面向对象程序设计中被滥用得最多的东西，因为所有的教科书都无一例外的对继承进行了鼓吹从而误导了初学者，类与类之间简单的说有三种关系，Is-A关系、Has-A关系、Use-A关系，分别代表继承、关联和依赖。其中，关联关系根据其关联的强度又可以进一步划分为关联、聚合和合成，但说白了都是Has-A关系，合成聚合复用原则想表达的是优先考虑Has-A关系而不是Is-A关系复用代码，原因嘛可以自己从百度上找到一万个理由，需要说明的是，即使在Java的API中也有不少滥用继承的例子，例如Properties类继承了Hashtable类，Stack类继承了Vector类，这些继承明显就是错误的，更好的做法是在Properties类中放置一个Hashtable类型的成员并且将其键和值都设置为字符串来存储数据，而Stack类的设计也应该是在Stack类中放一个Vector对象来存储数据。记住：任何时候都不要继承工具类，工具是可以拥有并可以使用的，而不是拿来继承的。）&lt;/p&gt;
&lt;h4 id=&quot;迪米特法则&quot;&gt;&lt;a href=&quot;#迪米特法则&quot; class=&quot;headerlink&quot; title=&quot;迪米特法则&quot;&gt;&lt;/a&gt;迪米特法则&lt;/h4&gt;&lt;p&gt;迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。再复杂的系统都可以为用户提供一个简单的门面，Java Web开发中作为前端控制器的Servlet或Filter不就是一个门面吗，浏览器对服务器的运作方式一无所知，但是通过前端控制器就能够根据你的请求得到相应的服务。调停者模式也可以举一个简单的例子来说明，例如一台计算机，CPU、内存、硬盘、显卡、声卡各种设备需要相互配合才能很好的工作，但是如果这些东西都直接连接到一起，计算机的布线将异常复杂，在这种情况下，主板作为一个调停者的身份出现，它将各个设备连接在一起而不需要每个设备之间直接交换数据，这样就减小了系统的耦合度和复杂度。&lt;/p&gt;
&lt;h3 id=&quot;Java如何实现的平台无关&quot;&gt;&lt;a href=&quot;#Java如何实现的平台无关&quot; class=&quot;headerlink&quot; title=&quot;Java如何实现的平台无关&quot;&gt;&lt;/a&gt;Java如何实现的平台无关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Java语言规范&lt;ul&gt;
&lt;li&gt;通过规定Java语言中基本数据类型的取值范围和行为&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Class文件&lt;ul&gt;
&lt;li&gt;所有Java文件要编译成统一的Class文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Java虚拟机&lt;ul&gt;
&lt;li&gt;通过Java虚拟机将Class文件转成对应平台的二进制文件等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JVM支持哪些语言（Kotlin、Groovy、JRuby、Jython、Scala）&lt;/p&gt;
&lt;h3 id=&quot;值传递、引用传递&quot;&gt;&lt;a href=&quot;#值传递、引用传递&quot; class=&quot;headerlink&quot; title=&quot;值传递、引用传递&quot;&gt;&lt;/a&gt;值传递、引用传递&lt;/h3&gt;&lt;p&gt;Java中只有值传递&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Integer b = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] arr = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        swap(a, b);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(String.format(&lt;span class=&quot;string&quot;&gt;&quot;a:%d    b:%d&quot;&lt;/span&gt;, a, b));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        swap(arr);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        System.out.println(Arrays.toString(arr));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 对于对象而言传递的是对象引用的地址作为值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a, Integer b)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; t = a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        a = b;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        b = t;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] arr)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        arr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;996&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;OutPut:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;a:10    b:20&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;[996, 2]&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;**/&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;值传递（pass by value）是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。&lt;/li&gt;
&lt;li&gt;引用传递（pass by reference）是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。
    
    </summary>
    
    
      <category term="Java" scheme="http://linraner.github.io/tags/Java/"/>
    
      <category term="notes" scheme="http://linraner.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>数据库事务</title>
    <link href="http://linraner.github.io/2019/04/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/"/>
    <id>http://linraner.github.io/2019/04/10/数据库事务/</id>
    <published>2019-04-10T10:57:58.000Z</published>
    <updated>2019-07-24T16:08:59.652Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>事务应该具有4个属性：<strong>原子性</strong>、<strong>一致性</strong>、<strong>隔离性</strong>、<strong>持久性</strong>。</p><p><strong>原子性</strong>（Atomicity）：数据库事务是一个不可分割的单位。只有事务中所有的数据库操作成功，才算整个事务才算成功。只读操作，保证一致性很简单，一旦出现错误，要么重试，要么返回错误代码。</p><p><strong>一致性</strong>（Consistency）：事务将数据库从一种状态转变为下一种一致的状态。事务开始之前和结束之后，数据库的完整性约束没有被破坏。例如，数据操作失败，表中姓名字段在唯一的情况下，撤销之后导致重复，从而破坏了事务的一致性。</p><p><strong>隔离性</strong>（Isolation）：别的称呼，并发控制（concurrency control）、可串行化（serialzability）、锁（locking）等。事务隔离性要求每个读写事务对其他事务的操作对象能实现相互分离，即事务提交之前对其他事务不可见，通常使用锁实现。</p><p><strong>持久性</strong>（Durability）：事务一旦提交结果是永久性的，发生宕机等事故，数据库也能将数据恢复。持久性事务保证的是高可靠性，而不是高可用性，事务本身不能完成，需要系统共同配合来实现。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>扁平事务、带有保存点的扁平事务、链事务、嵌套事务、分布式事务。<br><a id="more"></a></p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><ul><li>未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据</li><li>提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)</li><li>可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读</li><li>串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞</li></ul><table><thead><tr><th>隔离级别</th><th>脏读</th><th>丢失更新</th><th>不可重复读</th><th>幻读</th><th>并发模型</th><th>更新冲突检测</th></tr></thead><tbody><tr><td>未提交读：Read Uncommited</td><td>√</td><td>√</td><td>√</td><td>√</td><td>悲观</td><td>×</td><td>×</td></tr></tbody></table><p>已提交读：Read commited    |×|×    |√|√    |悲观|    ×|×<br>可重复读：Repeatable Read    |×|×    |×|    √    |悲观|    ×|×<br>可串行读：Serializable    |×    |×|×    |×|悲观    |×|×</p><p>接下来详细解释，假设有下面两个事务同时执行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">begin</span>; <span class="comment">-- 事务1</span></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1 (somevaue); <span class="comment">-- 随意写的伪sql</span></div><div class="line"><span class="keyword">update</span> table2 <span class="keyword">set</span> aa = aa + <span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</div><div class="line"><span class="keyword">commit</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">begin</span>; <span class="comment">-- 事务2</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> table1; <span class="comment">-- 第一次读count</span></div><div class="line"><span class="keyword">select</span> aa <span class="keyword">from</span> table2 <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>; <span class="comment">-- 第一次读aa</span></div><div class="line"><span class="comment">-- 假设在这个点 事务1成功提交</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> table1; <span class="comment">-- 第二次读count</span></div><div class="line"><span class="keyword">select</span> aa <span class="keyword">from</span> table2 <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>; <span class="comment">-- 第二次读aa</span></div><div class="line"><span class="keyword">commit</span>;</div></pre></td></tr></table></figure></p><p><strong>串行化</strong>不用解释了，依次执行，不会产生冲突。</p><p><strong>可重复读</strong>是什么意思呢？ 事务2执行到一半时，事务1 成功提交：</p><p>事务2中 第二次读count得到的值和第一次读count得到的值不一样(因为事务1新增了一条数据)，这叫幻读，不隔离新增的数据。<br>事务2中 第一次读aa 和第二次读aa得到的值是一样的，对刚更新的值不可见，隔离已经存在的数据。 可以重复读，读到的数据都是一样的。</p><p><strong>读取已提交</strong>是什么意思呢？ 事务2执行到一半时，事务1 成功提交：<br>事务2中 第二次读count得到的值和第一次读count得到的值不一样(因为事务1新增了一条数据)，这叫幻读，不隔离新增的数据。<br>事务2中 第一次读aa 和第二次读aa得到的值是不一样的，对刚提交的值可见，不隔离已经存在的数据。 不可以重复读，读到的数据是不一样的(如果成功修改)。</p><p><strong>读取未提交</strong>是什么意思呢？ 事务2执行到一半时，事务1 还未提交：<br>事务2中 第二次读count得到的值和第一次读count得到的值不一样(因为事务1新增了一条数据)，这叫幻读，不隔离新增的数据。<br>事务2中 第一次读aa 和第二次读aa得到的值是不一样的（事务1未提交），对最新版本的值可见，不隔离已经存在的数据。 不可以重复读，读到的数据是不一样的。如果此时事务1因为其他原因回滚了，事务2第二次读到的数据是无意义的，因为修改没有发生(回滚了)，这叫脏读 。</p><p>在现实环境中，串行化一般不会被使用，因为性能太低。</p><p>如果对一致性有要求，比如转账交易，那么要使用可重复读，并发性能相对较差。 原因是，为了实现可重复读，在对更新记录加锁时，除了使用记录锁，还可能会使用间隙锁锁住区间(看update语句的where条件)，这会增加其他事务等待时间。</p><p>如果对一致性要求不高，一般使用读取已提交, 由于不考虑重复读，在加锁时一般只加记录锁，不会使用间隙锁，并发性较好，据说使用的最多。</p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>事务隔离性由锁实现。原子性、一致性、持久性通过数据库的<code>redo log</code>（重做日志保证原子性和持久性）和<code>undo log</code>（保证一致性）完成。</p><p>redo和undo都可视为恢复操作，redo恢复事务提交的页操作，undo回滚到某个特定版本。根据内容分别分为物理日志（页的物理修改操作）和逻辑日志（根据每行进行记录）</p><h3 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h3><p>数据库通过事务日志来达到这个目标。 事务的每一个操作（增/删/改）产生一条日志，内容组成大概如下：</p><ul><li>LSN：一个按时间顺序分配的唯一日志序列号，靠后的操作的LSN比靠前的大。</li><li>TransID：产生操作的事务ID。</li><li>PageID：被修改的数据在磁盘上的位置，数据以页为单位存储。</li><li>PrevLSN：同一个事务产生的上一条日志记录的指针。</li><li>UNDO：取消本次操作的方法，按照此方法回滚。</li><li>REDO：重复本次操作的方法，如有必要，重复此方法保证操作成功。</li></ul><p><img src="https://i.loli.net/2019/07/25/5d3880fd4ae2c60183.png" alt=""></p><p>磁盘上每个页（保存数据的，不是保存日志的）都记录着最后一个修改该数据操作的LSN。数据库会通过解析事务日志，将修改真正落到磁盘上(写盘)，随后清理事务日志(正常情况下)。</p><p>这也是数据库在保证数据安全和性能这两个点之前的折中办法：</p><ul><li>如果每次更新都写盘，由于数据是随机的，会造成大量的随机IO，性能会非常差</li><li>如果每次更新不马上写盘，那一旦数据库崩溃，数据就会丢失</li></ul><p>折中的办法就是：</p><ul><li>将数据的变更以事务日志的方式，按照时间先后追加到日志缓冲区，由特定算法写入事务日志，这是顺序IO，性能较好</li><li>通过数据管理器解析事务日志，由特定的算法择机进行写盘</li></ul><h3 id="数据库恢复"><a href="#数据库恢复" class="headerlink" title="数据库恢复"></a>数据库恢复</h3><p>当数据库从崩溃中恢复时，会有以下几个步骤：</p><p>1.解析存在的事务日志，分析哪些事务需要回滚，哪些需要写盘(还没来得及写盘，数据库就崩溃了)。</p><p>2.Redo，进行写盘。检测对应数据所在数据页的LSN，如果数据页的LSN&gt;=事务操作的LSN，说明已经写过盘，不然进行写盘操作。</p><p>3.Undo, 按照LSN倒序进行回滚</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/43493165" target="_blank" rel="noopener">深入理解数据库事务</a></p><p><a href="https://www.jianshu.com/p/eb150b4f7ce0" target="_blank" rel="noopener">我理解的数据库事务</a></p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;特性&quot;&gt;&lt;a href=&quot;#特性&quot; class=&quot;headerlink&quot; title=&quot;特性&quot;&gt;&lt;/a&gt;特性&lt;/h2&gt;&lt;p&gt;事务应该具有4个属性：&lt;strong&gt;原子性&lt;/strong&gt;、&lt;strong&gt;一致性&lt;/strong&gt;、&lt;strong&gt;隔离性&lt;/strong&gt;、&lt;strong&gt;持久性&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原子性&lt;/strong&gt;（Atomicity）：数据库事务是一个不可分割的单位。只有事务中所有的数据库操作成功，才算整个事务才算成功。只读操作，保证一致性很简单，一旦出现错误，要么重试，要么返回错误代码。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一致性&lt;/strong&gt;（Consistency）：事务将数据库从一种状态转变为下一种一致的状态。事务开始之前和结束之后，数据库的完整性约束没有被破坏。例如，数据操作失败，表中姓名字段在唯一的情况下，撤销之后导致重复，从而破坏了事务的一致性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;隔离性&lt;/strong&gt;（Isolation）：别的称呼，并发控制（concurrency control）、可串行化（serialzability）、锁（locking）等。事务隔离性要求每个读写事务对其他事务的操作对象能实现相互分离，即事务提交之前对其他事务不可见，通常使用锁实现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;持久性&lt;/strong&gt;（Durability）：事务一旦提交结果是永久性的，发生宕机等事故，数据库也能将数据恢复。持久性事务保证的是高可靠性，而不是高可用性，事务本身不能完成，需要系统共同配合来实现。&lt;/p&gt;
&lt;h2 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot; title=&quot;分类&quot;&gt;&lt;/a&gt;分类&lt;/h2&gt;&lt;p&gt;扁平事务、带有保存点的扁平事务、链事务、嵌套事务、分布式事务。&lt;br&gt;
    
    </summary>
    
    
      <category term="notes" scheme="http://linraner.github.io/tags/notes/"/>
    
      <category term="database" scheme="http://linraner.github.io/tags/database/"/>
    
      <category term="MySQL" scheme="http://linraner.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>设计模式复习</title>
    <link href="http://linraner.github.io/2019/04/01/%E9%9D%A2%E8%AF%95-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%A4%8D%E4%B9%A0/"/>
    <id>http://linraner.github.io/2019/04/01/面试-设计模式复习/</id>
    <published>2019-04-01T10:16:21.000Z</published>
    <updated>2019-07-24T16:04:29.697Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="设计模式复习"><a href="#设计模式复习" class="headerlink" title="设计模式复习"></a>设计模式复习</h2><p>23种设计模式主要分为三类：创建型模式、结构型模式、行为型模式。</p><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote><p>实现单例模式的思路是：一个类能返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）；当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用；同时我们还将该类的构造函数定义为私有方法，这样其他处的代码就无法通过调用该类的构造函数来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例。</p></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ol><li><p>饿汉式 线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">     <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">         <span class="keyword">return</span> instance;  </div><div class="line">     &#125;  </div><div class="line"> &#125;</div></pre></td></tr></table></figure></li><li><p>懒汉式 双向检查锁定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="comment">// volatile 多线程安全, 但屏蔽Java虚拟机优化, 效率降低</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">// 锁定代码块</span></div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">                    instance = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>使用静态内部类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IoDH 初始化不会失败使用, 延迟加载</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123; </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> SingletonHolder.instance;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>使用枚举类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton&#123;</div><div class="line">    INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><a id="more"></a><p>枚举类反编译之后会被转换成形如public final class T extends Enum的定义。枚举中的各个枚举项通过static来定义。</p><p>一个Java类第一次被真正使用到的时候静态资源被初始化、Java类的加载和初始化过程都是线程安全的（因为虚拟机在加载枚举的类的时候，会使用ClassLoader的loadClass方法，而这个方法使用同步代码块保证了线程安全），所以枚举类是线程安全的。</p><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><blockquote><p>给某一个对象提供一个代理或占位符，并由代理对象来控制对原对象的访问，必须经过代理才能访问被代理对象。在应用场景上不同于装饰者模式，更偏向于代理的含义，代理模式重点在于控制对象的行为，而装饰模式侧重于增加对象的职能，为对象增加额外的职能。</p></blockquote><p>结构如下：</p><p><img src="https://i.loli.net/2019/07/16/5d2d6cc468f4062204.png" alt="代理模式"></p><h4 id="Java中实现动态代理"><a href="#Java中实现动态代理" class="headerlink" title="Java中实现动态代理"></a>Java中实现动态代理</h4><p>Java中代理模式有动态代理、静态代理、Cglib代理。</p><p>Java中实现动态代理的步骤：<br>1.定义一个委托类和公共接口。</p><p>2.自己定义一个类（调用处理器类，即实现 InvocationHandler 接口），这个类的目的是指定运行时将生成的代理类需要完成的具体任务（包括Preprocess和Postprocess），即代理类调用任何方法都会经过这个调用处理器类</p><p>3.生成代理对象（当然也会生成代理类），需要为他指定(1)委托对象(2)实现的一系列接口(3)调用处理器类的实例。因此可以看出一个代理对象对应一个委托对象，对应一个调用处理器实例。</p><p>4.Java 实现动态代理主要涉及以下几个类：</p><ol><li><p>java.lang.reflect.Proxy: 这是生成代理类的主类，通过 Proxy 类生成的代理类都继承了 Proxy 类，即 DynamicProxyClass extends Proxy。</p></li><li><p>java.lang.reflect.InvocationHandler: 这里称他为”调用处理器”，他是一个接口，我们动态生成的代理类需要完成的具体内容需要自己定义一个类，而这个类必须实现 InvocationHandler 接口。</p></li></ol><p>例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 接口</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyDemo01</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        RealSubject realSubject = <span class="keyword">new</span> RealSubject();<span class="comment">//1.创建委托对象</span></div><div class="line">        ProxyHandler handler = <span class="keyword">new</span> ProxyHandler(realSubject);<span class="comment">//2.创建调用处理器对象</span></div><div class="line">        <span class="comment">//3.动态生成代理对象</span></div><div class="line">        Subject proxySubject = (Subject) Proxy.newProxyInstance(RealSubject.class.getClassLoader(), </div><div class="line">        RealSubject.class.getInterfaces(), handler);    </div><div class="line">        proxySubject.request();    <span class="comment">//4.通过代理对象调用方法</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 委托类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Real Subject Request"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 代理类的调用处理器</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Subject subject;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyHandler</span><span class="params">(Subject subject)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.subject = subject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></div><div class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">//定义预处理的工作，当然你也可以根据 method 的不同进行不同的预处理工作</span></div><div class="line">        System.out.println(<span class="string">"====before===="</span>);</div><div class="line">        Object result = method.invoke(subject, args);</div><div class="line">        System.out.println(<span class="string">"====after===="</span>);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p><img src="https://i.loli.net/2019/07/16/5d2d6cdfcf79f34132.png" alt="观察者模式"></p><p>观察者模式优点：</p><p>观察者模式在被观察者和观察者之间建立一个抽象的耦合。被观察者角色所知道的只是一个具体观察者列表，每一个具体观察者都符合一个抽象观察者的接口。被观察者并不认识任何一个具体观察者，它只知道它们都有一个共同的接口。由于被观察者和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。如果被观察者和观察者都被扔到一起，那么这个对象必然跨越抽象化和具体化层次。</p><p>观察者模式缺点：</p><p>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</p><p>如果在被观察者之间有循环依赖的话，被观察者会触发它们之间进行循环调用，导致系统崩溃。在使用观察者模式是要特别注意这一点。</p><p>如果对观察者的通知是通过另外的线程进行异步投递的话，系统必须保证投递是以自恰的方式进行的。</p><p>虽然观察者模式可以随时使观察者知道所观察的对象发生了变化，但是观察者模式没有相应的机制使观察者知道所观察的对象是怎么发生变化的。</p><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><blockquote><p>策略模式也叫政策模式，是一种行为型设计模式，是一种比较简单的设计模式。策略模式采用了面向对象的继承和多态机制。</p></blockquote><p>策略模式适合使用在：1.多个类只有在算法或行为上稍有不同的场景。2.算法需要自由切换的场景。3.需要屏蔽算法规则的场景。</p><p>使用策略模式当然也有需要注意的地方，那么就是策略类不要太多，如果一个策略家族的具体策略数量超过4个，则需要考虑混合模式，解决策略类膨胀和对外暴露问题。在实际项目中，我们一般通过工厂方法模式来实现策略类的声明。</p><p><img src="https://i.loli.net/2019/07/16/5d2d6ceedac8664650.png" alt="策略模式"></p><p>优点：1.算法可以自由切换。2.避免使用多重条件判断。3.扩展性良好。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.hollischuang.com/archives/2498" target="_blank" rel="noopener">为什么我墙裂建议大家使用枚举来实现单例。</a></li><li><a href="https://xiazdong.github.io/2014/11/27/代理模式及Java实现动态代理/" target="_blank" rel="noopener">代理模式及Java实现动态代理</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;设计模式复习&quot;&gt;&lt;a href=&quot;#设计模式复习&quot; class=&quot;headerlink&quot; title=&quot;设计模式复习&quot;&gt;&lt;/a&gt;设计模式复习&lt;/h2&gt;&lt;p&gt;23种设计模式主要分为三类：创建型模式、结构型模式、行为型模式。&lt;/p&gt;
&lt;h2 id=&quot;创建型模式&quot;&gt;&lt;a href=&quot;#创建型模式&quot; class=&quot;headerlink&quot; title=&quot;创建型模式&quot;&gt;&lt;/a&gt;创建型模式&lt;/h2&gt;&lt;h3 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;实现单例模式的思路是：一个类能返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）；当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用；同时我们还将该类的构造函数定义为私有方法，这样其他处的代码就无法通过调用该类的构造函数来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;饿汉式 线程安全&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;懒汉式 双向检查锁定&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// volatile 多线程安全, 但屏蔽Java虚拟机优化, 效率降低&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton instance = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (instance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 锁定代码块&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt; (Singleton.class) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (instance == &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用静态内部类实现&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// IoDH 初始化不会失败使用, 延迟加载&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SingletonHolder&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Singleton instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; SingletonHolder.instance;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用枚举类型&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Singleton&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    INSTANCE;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="notes" scheme="http://linraner.github.io/tags/notes/"/>
    
      <category term="interview" scheme="http://linraner.github.io/tags/interview/"/>
    
      <category term="设计模式" scheme="http://linraner.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>常见排序算法实现</title>
    <link href="http://linraner.github.io/2019/02/20/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88Java%EF%BC%89%E5%AE%9E%E7%8E%B0/"/>
    <id>http://linraner.github.io/2019/02/20/排序算法（Java）实现/</id>
    <published>2019-02-19T16:00:00.000Z</published>
    <updated>2019-08-01T03:00:18.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序比较"><a href="#排序比较" class="headerlink" title="排序比较"></a>排序比较</h1><p><img src="https://i.loli.net/2019/08/01/5d4255963984735231.png" alt="排序"></p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 快速排序算法</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</div><div class="line">        <span class="comment">// 分割数组，找到分割点</span></div><div class="line">        <span class="keyword">int</span> point = partition(list, left, right);</div><div class="line"></div><div class="line">        <span class="comment">// 递归调用，对左子数组进行快速排序</span></div><div class="line">        quickSort(list, left, point - <span class="number">1</span>);</div><div class="line">        <span class="comment">// 递归调用，对右子数组进行快速排序</span></div><div class="line">        quickSort(list, point + <span class="number">1</span>, right);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 分割数组，找到分割点</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="comment">// 用数组的第一个元素作为基准数</span></div><div class="line">    <span class="keyword">int</span> first = list[left];</div><div class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</div><div class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; list[right] &gt;= first) &#123;</div><div class="line">            right--;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 交换</span></div><div class="line">        swap(list, left, right);</div><div class="line"></div><div class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; list[left] &lt;= first) &#123;</div><div class="line">            left++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 交换</span></div><div class="line">        swap(list, left, right);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 返回分割点所在的位置</span></div><div class="line">    <span class="keyword">return</span> left;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 交换数组中两个位置的元素</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> temp;</div><div class="line">    <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        temp = list[left];</div><div class="line">        list[left] = list[right];</div><div class="line">        list[right] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 希尔排序算法</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] list)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> len = list.length ;</div><div class="line">    <span class="comment">// 取增量</span></div><div class="line">    <span class="keyword">int</span> gap = len / <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (gap &gt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// 无序序列</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">int</span> temp = list[i];</div><div class="line">            <span class="keyword">int</span> j;</div><div class="line"></div><div class="line">            <span class="comment">// 有序序列</span></div><div class="line">            <span class="keyword">for</span> (j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; list[j] &gt; temp; j = j - gap) &#123;</div><div class="line">                list[j + gap] = list[j];</div><div class="line">            &#125;</div><div class="line">            list[j + gap] = temp;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">// 缩小增量</span></div><div class="line">        gap = gap / <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 堆排序算法</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] list)</span> </span>&#123;</div><div class="line">    <span class="comment">// 将无序堆构造成一个大根堆，大根堆有length/2个父节点</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = list.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">        headAdjust(list, i, list.length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 逐步将每个最大值的根节点与末尾元素交换，并且再调整其为大根堆</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = list.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">        <span class="comment">// 将堆顶节点和当前未经排序的子序列的最后一个元素交换位置</span></div><div class="line">        swap(list, <span class="number">0</span>, i);</div><div class="line">        headAdjust(list, <span class="number">0</span>, i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 构造大根堆</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">headAdjust</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> parent, <span class="keyword">int</span> length)</span> </span>&#123;</div><div class="line">    <span class="comment">// 保存当前父节点</span></div><div class="line">    <span class="keyword">int</span> temp = list[parent];</div><div class="line"></div><div class="line">    <span class="comment">// 得到左孩子节点</span></div><div class="line">    <span class="keyword">int</span> leftChild = <span class="number">2</span> * parent + <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> (leftChild &lt; length) &#123;</div><div class="line">        <span class="comment">// 如果parent有右孩子，则要判断左孩子是否小于右孩子</span></div><div class="line">        <span class="keyword">if</span> (leftChild + <span class="number">1</span> &lt; length &amp;&amp; list[leftChild] &lt; list[leftChild + <span class="number">1</span>]) &#123;</div><div class="line">            leftChild++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 父亲节点大于子节点，就不用做交换</span></div><div class="line">        <span class="keyword">if</span> (temp &gt;= list[leftChild]) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 将较大子节点的值赋给父亲节点</span></div><div class="line">        list[parent] = list[leftChild];</div><div class="line">        <span class="comment">// 然后将子节点做为父亲节点</span></div><div class="line">        parent = leftChild;</div><div class="line">        <span class="comment">// 找到该父亲节点较小的左孩子节点</span></div><div class="line">        leftChild = <span class="number">2</span> * parent + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 最后将temp值赋给较大的子节点，以形成两值交换</span></div><div class="line">    list[parent] = temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 交换数组中两个位置的元素</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> top, <span class="keyword">int</span> last)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = list[top];</div><div class="line">    list[top] = list[last];</div><div class="line">    list[last] = temp;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 归并排序算法</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> list     待排序的列表</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> tempList 临时列表</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> head     列表开始位置</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> rear     列表结束位置</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span>[] tempList, <span class="keyword">int</span> head, <span class="keyword">int</span> rear)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (head &lt; rear) &#123;</div><div class="line">        <span class="comment">// 取分割位置</span></div><div class="line">        <span class="keyword">int</span> middle = (head + rear) / <span class="number">2</span>;</div><div class="line">        <span class="comment">// 递归划分列表的左序列</span></div><div class="line">        mergeSort(list, tempList, head, middle);</div><div class="line">        <span class="comment">// 递归划分列表的右序列</span></div><div class="line">        mergeSort(list, tempList, middle + <span class="number">1</span>, rear);</div><div class="line">        <span class="comment">// 列表的合并操作</span></div><div class="line">        merge(list, tempList, head, middle + <span class="number">1</span>, rear);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 合并操作(列表的两两合并)</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> tempList</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> head</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> middle</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> rear</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span>[] tempList, <span class="keyword">int</span> head, <span class="keyword">int</span> middle, <span class="keyword">int</span> rear)</span> </span>&#123;</div><div class="line">    <span class="comment">// 左指针尾</span></div><div class="line">    <span class="keyword">int</span> headEnd = middle - <span class="number">1</span>;</div><div class="line">    <span class="comment">// 右指针头</span></div><div class="line">    <span class="keyword">int</span> rearStart = middle;</div><div class="line">    <span class="comment">// 临时列表的下标</span></div><div class="line">    <span class="keyword">int</span> tempIndex = head;</div><div class="line">    <span class="comment">// 列表合并后的长度</span></div><div class="line">    <span class="keyword">int</span> tempLength = rear - head + <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 先循环两个区间段都没有结束的情况</span></div><div class="line">    <span class="keyword">while</span> ((headEnd &gt;= head) &amp;&amp; (rearStart &lt;= rear)) &#123;</div><div class="line">        <span class="comment">// 如果发现右序列大，则将此数放入临时列表</span></div><div class="line">        <span class="keyword">if</span> (list[head] &lt; list[rearStart]) &#123;</div><div class="line">            tempList[tempIndex++] = list[head++];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            tempList[tempIndex++] = list[rearStart++];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断左序列是否结束</span></div><div class="line">    <span class="keyword">while</span> (head &lt;= headEnd) &#123;</div><div class="line">        tempList[tempIndex++] = list[head++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 判断右序列是否结束</span></div><div class="line">    <span class="keyword">while</span> (rearStart &lt;= rear) &#123;</div><div class="line">        tempList[tempIndex++] = list[rearStart++];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 交换数据</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tempLength; i++) &#123;</div><div class="line">        list[rear] = tempList[rear];</div><div class="line">        rear--;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 直接选择排序算法</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] list)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> len = list.length ;</div><div class="line">    <span class="comment">// 要遍历的次数（length-1次）</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="comment">// 将当前下标定义为最小值下标</span></div><div class="line">        <span class="keyword">int</span> min = i;</div><div class="line"></div><div class="line">        <span class="comment">// 遍历min后面的数据</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= len - <span class="number">1</span>; j++) &#123;</div><div class="line">            <span class="comment">// 如果有小于当前最小值的元素，将它的下标赋值给min</span></div><div class="line">            <span class="keyword">if</span> (list[j] &lt; list[min]) &#123;</div><div class="line">                min = j;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 如果min不等于i，说明找到真正的最小值</span></div><div class="line">        <span class="keyword">if</span> (min != i) &#123;</div><div class="line">            swap(list, min, i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 交换数组中两个位置的元素</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> min, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = list[min];</div><div class="line">    list[min] = list[i];</div><div class="line">    list[i] = temp;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 直接插入排序算法</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] list)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> len = list.length ;</div><div class="line">    <span class="comment">// 从无序序列中取出第一个元素 (注意无序序列是从第二个元素开始的)</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</div><div class="line">        <span class="keyword">int</span> temp = list[i];</div><div class="line">        <span class="keyword">int</span> j;</div><div class="line">        <span class="comment">// 遍历有序序列</span></div><div class="line">        <span class="comment">// 如果有序序列中的元素比临时元素大，则将有序序列中比临时元素大的元素依次后移</span></div><div class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; list[j] &gt; temp; j--) &#123;</div><div class="line">            list[j + <span class="number">1</span>] = list[j];</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 将临时元素插入到腾出的位置中</span></div><div class="line">        list[j + <span class="number">1</span>] = temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 冒泡排序算法</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] list)</span> </span>&#123;</div><div class="line"><span class="keyword">int</span> len = list.length ;</div><div class="line">    <span class="comment">// 做多少轮排序（最多length-1轮）</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</div><div class="line">        <span class="comment">// 每一轮比较多少个</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</div><div class="line">            <span class="keyword">if</span> (list[j] &gt; list[j + <span class="number">1</span>]) &#123;</div><div class="line">                <span class="comment">// 交换次序</span></div><div class="line">            <span class="keyword">int</span> temp = list[j];</div><div class="line">                list[j] = list[j + <span class="number">1</span>];</div><div class="line">                list[j + <span class="number">1</span>] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;排序比较&quot;&gt;&lt;a href=&quot;#排序比较&quot; class=&quot;headerlink&quot; title=&quot;排序比较&quot;&gt;&lt;/a&gt;排序比较&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/08/01/5d4255963984735231.png
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://linraner.github.io/tags/algorithm/"/>
    
      <category term="java" scheme="http://linraner.github.io/tags/java/"/>
    
      <category term="sort" scheme="http://linraner.github.io/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>问卷星自动提交脚本</title>
    <link href="http://linraner.github.io/2019/01/01/%E9%97%AE%E5%8D%B7%E6%98%9F%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E8%84%9A%E6%9C%AC/"/>
    <id>http://linraner.github.io/2019/01/01/问卷星自动提交脚本/</id>
    <published>2019-01-01T10:16:21.000Z</published>
    <updated>2019-07-24T16:05:19.497Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>分析页面结构, 问题标号: <code>q+第几题</code>, 问题选项: <code>q+第几题+_第几个选项</code>.<br><img src="https://i.loli.net/2019/07/24/5d38688779d8545711.png" alt="1"><a id="more"></a></li><li><p>对一次提交进行抓包, 抓取post数据包.<br><img src="https://i.loli.net/2019/07/24/5d3868b80e17938093.png" alt=""><br>对<code>submidata</code>进行解码得到如下.<br><img src="https://i.loli.net/2019/07/24/5d3868c51134133886.png" alt=""><br>明显看出是<code>题号$选项号}</code>组成的.</p></li><li><p>写<code>python</code>脚本构造post请求.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">    header = &#123;</div><div class="line">        <span class="string">'Host'</span>: <span class="string">'www.wjx.cn'</span>,</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0'</span>,</div><div class="line">        <span class="string">'X-Forwarded-For'</span>: str(randint(<span class="number">1</span>, <span class="number">255</span>)) + <span class="string">'.'</span> + str(randint(<span class="number">1</span>, <span class="number">255</span>)) + <span class="string">'.'</span> + str(randint(<span class="number">1</span>, <span class="number">255</span>)) + <span class="string">'.'</span> + str(</div><div class="line">            randint(<span class="number">1</span>, <span class="number">255</span>)),</div><div class="line">        <span class="string">'Referer'</span>: <span class="string">'https://www.wjx.cn###.aspx'</span>,</div><div class="line">        <span class="string">'Cookie'</span>: <span class="string">'acw_tc=2f624a1f154##'</span>,</div><div class="line">    &#125;</div><div class="line">    print(<span class="string">"第 "</span> + str(i) + <span class="string">" 提交"</span> + <span class="string">" Using IP:"</span> + header[<span class="string">'X-Forwarded-For'</span>] + <span class="string">' to compalte this Q.'</span>)</div><div class="line">    data = <span class="string">"submitdata=1$%s&#125;2$%s&#125;3$%s&#125;4$%s&#125;5$%s&#125;6$%s&#125;7$%s&#125;8$3&#125;9$-3&#125;10$-3&#125;11$%s&#125;12$%s&#125;13$%s&#125;14$%s&#125;15$%s&#125;16$%s&#125;17$%s&#125;18$%s"</span> % (</div><div class="line">        str(randint(<span class="number">1</span>, <span class="number">7</span>)), str(randint(<span class="number">1</span>, <span class="number">9</span>)), str(randint(<span class="number">1</span>, <span class="number">4</span>)), str(randint(<span class="number">1</span>, <span class="number">3</span>)), str(randint(<span class="number">1</span>, <span class="number">4</span>)),</div><div class="line">        str(randint(<span class="number">1</span>, <span class="number">3</span>)), str(randint(<span class="number">1</span>, <span class="number">3</span>)), str(randint(<span class="number">1</span>, <span class="number">2</span>)), str(randint(<span class="number">1</span>, <span class="number">2</span>)), str(randint(<span class="number">1</span>, <span class="number">4</span>)),</div><div class="line">        str(randint(<span class="number">1</span>, <span class="number">2</span>)), str(randint(<span class="number">1</span>, <span class="number">2</span>)), str(randint(<span class="number">1</span>, <span class="number">3</span>)), str(randint(<span class="number">1</span>, <span class="number">2</span>)), str(randint(<span class="number">1</span>, <span class="number">3</span>)))</div><div class="line">    url = <span class="string">'https://www.wjx.cn/joinnew/processjq.ashx?curid=34131883&amp;starttime=2019%2F1%2F25%2021%3A37%3A12&amp;source=directphone&amp;submittype=1&amp;ktimes=213&amp;hlv=1&amp;rn=1034449004.44465961&amp;t=1548423507485&amp;jqnonce=c5825f6b-67d7-40c8-ba2e-e1ffb82c4642&amp;jqsign=%606%3B16e5a.54g4.73%60%3B.ab1f.f2eea%3B1%607571'</span></div><div class="line">    r = requests.post(url, data=data, headers=header)</div><div class="line">    <span class="comment"># print(r)</span></div><div class="line">print(<span class="string">"Complate."</span>)</div></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;分析页面结构, 问题标号: &lt;code&gt;q+第几题&lt;/code&gt;, 问题选项: &lt;code&gt;q+第几题+_第几个选项&lt;/code&gt;.&lt;br&gt;&lt;img src=&quot;https://i.loli.net/2019/07/24/5d38688779d8545711.png&quot; alt=&quot;1&quot;&gt;
    
    </summary>
    
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
      <category term="Python" scheme="http://linraner.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>清除提交到github上的账号密码</title>
    <link href="http://linraner.github.io/2018/11/01/%E6%B8%85%E9%99%A4%E6%8F%90%E4%BA%A4%E5%88%B0github%E4%B8%8A%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/"/>
    <id>http://linraner.github.io/2018/11/01/清除提交到github上的账号密码/</id>
    <published>2018-10-31T16:00:00.000Z</published>
    <updated>2018-11-20T12:42:15.934Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="一、删库"><a href="#一、删库" class="headerlink" title="一、删库"></a>一、删库</h2><p>。。。。</p><h2 id="二、使用BFG-Repo-Cleaner"><a href="#二、使用BFG-Repo-Cleaner" class="headerlink" title="二、使用BFG Repo-Cleaner"></a>二、使用BFG Repo-Cleaner</h2><p>地址： <a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="noopener">BFG Repo-Cleaner</a></p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#克隆副本</div><div class="line">git clone --mirror git://example.com/example.git</div><div class="line">#清理分支</div><div class="line">java -jar bfg-1.13.0.jar --replace-text pwd.txt example.git</div><div class="line">cd example.git &amp; git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive &amp; git push</div></pre></td></tr></table></figure><h3 id="git-取消对某个文件的track"><a href="#git-取消对某个文件的track" class="headerlink" title="git 取消对某个文件的track"></a>git 取消对某个文件的track</h3><p>.gitignore无法对已经track的文件忽略<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git rm --cached example.files</div><div class="line">git commit</div><div class="line">git push</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;一、删库&quot;&gt;&lt;a href=&quot;#一、删库&quot; class=&quot;headerlink&quot; title=&quot;一、删库&quot;&gt;&lt;/a&gt;一、删库&lt;/h2&gt;&lt;p&gt;。。。。&lt;/p&gt;
&lt;h2 id=&quot;二、使用BFG-Repo-Cleaner&quot;&gt;&lt;a href=&quot;#二、使用BFG-
      
    
    </summary>
    
    
      <category term="git" scheme="http://linraner.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Stream</title>
    <link href="http://linraner.github.io/2018/10/15/Java8%20Stream/"/>
    <id>http://linraner.github.io/2018/10/15/Java8 Stream/</id>
    <published>2018-10-14T23:58:07.211Z</published>
    <updated>2019-07-17T08:55:17.393Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Stream</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"使用 Java 7: "</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 计算空字符串</span></div><div class="line">        List&lt;String&gt; strings = Arrays.asList(<span class="string">"abc"</span>, <span class="string">""</span>, <span class="string">"bc"</span>, <span class="string">"efg"</span>, <span class="string">"abcd"</span>, <span class="string">""</span>, <span class="string">"jkl"</span>);</div><div class="line">        System.out.println(<span class="string">"列表: "</span> + strings);</div><div class="line">        <span class="keyword">long</span> count = getCountEmptyStringUsingJava7(strings);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"空字符数量为: "</span> + count);</div><div class="line">        count = getCountLength3UsingJava7(strings);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"字符串长度为 3 的数量为: "</span> + count);</div><div class="line"></div><div class="line">        <span class="comment">// 删除空字符串</span></div><div class="line">        List&lt;String&gt; filtered = deleteEmptyStringsUsingJava7(strings);</div><div class="line">        System.out.println(<span class="string">"筛选后的列表: "</span> + filtered);</div><div class="line"></div><div class="line">        <span class="comment">// 删除空字符串，并使用逗号把它们合并起来</span></div><div class="line">        String mergedString = getMergedStringUsingJava7(strings, <span class="string">", "</span>);</div><div class="line">        System.out.println(<span class="string">"合并字符串: "</span> + mergedString);</div><div class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 获取列表元素平方数</span></div><div class="line">        List&lt;Integer&gt; squaresList = getSquares(numbers);</div><div class="line">        System.out.println(<span class="string">"平方数列表: "</span> + squaresList);</div><div class="line">        List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">17</span>, <span class="number">8</span>, <span class="number">19</span>);</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"列表: "</span> + integers);</div><div class="line">        System.out.println(<span class="string">"列表中最大的数 : "</span> + getMax(integers));</div><div class="line">        System.out.println(<span class="string">"列表中最小的数 : "</span> + getMin(integers));</div><div class="line">        System.out.println(<span class="string">"所有数之和 : "</span> + getSum(integers));</div><div class="line">        System.out.println(<span class="string">"平均数 : "</span> + getAverage(integers));</div><div class="line">        System.out.println(<span class="string">"随机数: "</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 输出10个随机数</span></div><div class="line">        Random random = <span class="keyword">new</span> Random();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            System.out.println(random.nextInt());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"使用 Java 8: "</span>);</div><div class="line">        System.out.println(<span class="string">"列表: "</span> + strings);</div><div class="line"></div><div class="line">        count = strings.stream().filter(string -&gt; string.isEmpty()).count();</div><div class="line">        System.out.println(<span class="string">"空字符串数量为: "</span> + count);</div><div class="line"></div><div class="line">        count = strings.stream().filter(string -&gt; string.length() == <span class="number">3</span>).count();</div><div class="line">        System.out.println(<span class="string">"字符串长度为 3 的数量为: "</span> + count);</div><div class="line"></div><div class="line">        filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</div><div class="line">        System.out.println(<span class="string">"筛选后的列表: "</span> + filtered);</div><div class="line"></div><div class="line">        mergedString = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.joining(<span class="string">", "</span>));</div><div class="line">        System.out.println(<span class="string">"合并字符串: "</span> + mergedString);</div><div class="line"></div><div class="line">        squaresList = numbers.stream().map(i -&gt; i * i).distinct().collect(Collectors.toList());</div><div class="line">        System.out.println(<span class="string">"Squares List: "</span> + squaresList);</div><div class="line">        System.out.println(<span class="string">"列表: "</span> + integers);</div><div class="line"></div><div class="line">        IntSummaryStatistics stats = integers.stream().mapToInt((x) -&gt; x).summaryStatistics();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"列表中最大的数 : "</span> + stats.getMax());</div><div class="line">        System.out.println(<span class="string">"列表中最小的数 : "</span> + stats.getMin());</div><div class="line">        System.out.println(<span class="string">"所有数之和 : "</span> + stats.getSum());</div><div class="line">        System.out.println(<span class="string">"平均数 : "</span> + stats.getAverage());</div><div class="line">        System.out.println(<span class="string">"随机数: "</span>);</div><div class="line"></div><div class="line">        random.ints().limit(<span class="number">10</span>).sorted().forEach(System.out::println);</div><div class="line"></div><div class="line">        <span class="comment">// 并行处理</span></div><div class="line">        count = strings.parallelStream().filter(string -&gt; string.isEmpty()).count();</div><div class="line">        System.out.println(<span class="string">"空字符串的数量为: "</span> + count);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCountEmptyStringUsingJava7</span><span class="params">(List&lt;String&gt; strings)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (String string : strings) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (string.isEmpty()) &#123;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCountLength3UsingJava7</span><span class="params">(List&lt;String&gt; strings)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (String string : strings) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (string.length() == <span class="number">3</span>) &#123;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">deleteEmptyStringsUsingJava7</span><span class="params">(List&lt;String&gt; strings)</span> </span>&#123;</div><div class="line">        List&lt;String&gt; filteredList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (String string : strings) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!string.isEmpty()) &#123;</div><div class="line">                filteredList.add(string);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> filteredList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getMergedStringUsingJava7</span><span class="params">(List&lt;String&gt; strings, String separator)</span> </span>&#123;</div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (String string : strings) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!string.isEmpty()) &#123;</div><div class="line">                stringBuilder.append(string);</div><div class="line">                stringBuilder.append(separator);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        String mergedString = stringBuilder.toString();</div><div class="line">        <span class="keyword">return</span> mergedString.substring(<span class="number">0</span>, mergedString.length() - <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">getSquares</span><span class="params">(List&lt;Integer&gt; numbers)</span> </span>&#123;</div><div class="line">        List&lt;Integer&gt; squaresList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Integer number : numbers) &#123;</div><div class="line">            Integer square = <span class="keyword">new</span> Integer(number.intValue() * number.intValue());</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!squaresList.contains(square)) &#123;</div><div class="line">                squaresList.add(square);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> squaresList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(List&lt;Integer&gt; numbers)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> max = numbers.get(<span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numbers.size(); i++) &#123;</div><div class="line"></div><div class="line">            Integer number = numbers.get(i);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (number.intValue() &gt; max) &#123;</div><div class="line">                max = number.intValue();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">(List&lt;Integer&gt; numbers)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> min = numbers.get(<span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numbers.size(); i++) &#123;</div><div class="line">            Integer number = numbers.get(i);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (number.intValue() &lt; min) &#123;</div><div class="line">                min = number.intValue();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> min;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(List numbers)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = (<span class="keyword">int</span>) (numbers.get(<span class="number">0</span>));</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numbers.size(); i++) &#123;</div><div class="line">            sum += (<span class="keyword">int</span>) numbers.get(i);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAverage</span><span class="params">(List&lt;Integer&gt; numbers)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getSum(numbers) / numbers.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;代码示例：&quot;&gt;&lt;a href=&quot;#代码示例：&quot; class=&quot;headerlink&quot; title=&quot;代码示例：&quot;&gt;&lt;/a&gt;代码示例：&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="java" scheme="http://linraner.github.io/tags/java/"/>
    
      <category term="note" scheme="http://linraner.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Date AND Time API</title>
    <link href="http://linraner.github.io/2018/10/05/Java8%20Date%20Time%20API/"/>
    <id>http://linraner.github.io/2018/10/05/Java8 Date Time API/</id>
    <published>2018-10-05T10:16:21.000Z</published>
    <updated>2018-10-30T03:22:16.021Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java8-引入了新的时间类"><a href="#Java8-引入了新的时间类" class="headerlink" title="Java8 引入了新的时间类"></a>Java8 引入了新的时间类</h2><h3 id="使用-LocalDate-和-LocalTime"><a href="#使用-LocalDate-和-LocalTime" class="headerlink" title="使用 LocalDate 和 LocalTime"></a>使用 <code>LocalDate</code> 和 <code>LocalTime</code></h3><p>创建 <code>LocalDate</code> 对象并读取值<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//2013-03-06</span></div><div class="line">LocalDate date = LocalDate.of(<span class="number">2012</span>,<span class="number">03</span>,<span class="number">06</span>);</div><div class="line"><span class="comment">//2012</span></div><div class="line"><span class="keyword">int</span> year = date.getYear();</div><div class="line"><span class="comment">//MARCH</span></div><div class="line">Month month = date.getMonth();</div><div class="line"><span class="comment">//TUESDAY</span></div><div class="line">DayOfWeek dow = date.getDayOfWeek();</div><div class="line"><span class="comment">//6</span></div><div class="line"><span class="keyword">int</span> day = date.getDayOfMonth();</div><div class="line"><span class="comment">//31</span></div><div class="line"><span class="keyword">int</span> len = date.lengthOfMonth();</div><div class="line"><span class="comment">//false</span></div><div class="line"><span class="keyword">boolean</span> leap = date.isLeapYear();</div><div class="line"><span class="comment">//使用工厂方法获取系统日期</span></div><div class="line">LocalDate today = LocalDate.now();</div><div class="line">LocalTime time = LocalTime.now().withNano(<span class="number">0</span>);<span class="comment">//去除毫秒</span></div></pre></td></tr></table></figure></p><p><code>TemporalField</code> 是一个接口, 定义了如何访问 <code>temporal</code> 对象某个字段的值. <code>ChronoField</code> 枚举实现这一接口.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> year = date.get(ChronoField.YEAR);</div><div class="line"><span class="keyword">int</span> month = date.get(ChronoField.MONTH_OF_YEAR);</div><div class="line"><span class="keyword">int</span> day = date.get(ChronoField.DAY_OF_MONTH);</div></pre></td></tr></table></figure><p><code>LocalDate</code> 和 <code>LocalTime</code> 都可以解析字符串创建.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">LocalDate date = LocalDate.parse(<span class="string">"2012-12-22"</span>);</div><div class="line">LocalTime time = LocalTime.parse(<span class="string">"22:22:22"</span>);</div></pre></td></tr></table></figure><h3 id="操作、解析和格式化"><a href="#操作、解析和格式化" class="headerlink" title="操作、解析和格式化"></a>操作、解析和格式化</h3><h4 id="使用-TemporalAdjuster"><a href="#使用-TemporalAdjuster" class="headerlink" title="使用 TemporalAdjuster"></a>使用 <code>TemporalAdjuster</code></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java8-引入了新的时间类&quot;&gt;&lt;a href=&quot;#Java8-引入了新的时间类&quot; class=&quot;headerlink&quot; title=&quot;Java8 引入了新的时间类&quot;&gt;&lt;/a&gt;Java8 引入了新的时间类&lt;/h2&gt;&lt;h3 id=&quot;使用-LocalDate-和-Lo
      
    
    </summary>
    
    
      <category term="java" scheme="http://linraner.github.io/tags/java/"/>
    
      <category term="note" scheme="http://linraner.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JSP 九大内置对象常用方法</title>
    <link href="http://linraner.github.io/2018/10/01/JSP%20%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://linraner.github.io/2018/10/01/JSP 九大内置对象常用方法/</id>
    <published>2018-10-01T10:16:21.000Z</published>
    <updated>2018-10-17T07:13:17.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-request-对象常用方法"><a href="#1-request-对象常用方法" class="headerlink" title="1. request 对象常用方法"></a>1. <code>request</code> 对象常用方法</h2><p><code>request</code> 是来自客户端的请求. 客户端的请求信息封装在 <code>request</code> 对象中. 以下 <code>HttpServletRequest</code> 类的实例.</p><table><thead><tr><th>方法 ( 类型 + 方法名 )</th><th>描述</th></tr></thead><tbody><tr><td>String getParameter(String strTextName)</td><td>获取表单提交信息</td></tr><tr><td>Enumeration getParameterNames()</td><td>返回可用参数的枚举</td></tr><tr><td>String[] getParameterValues(String name)</td><td>返回包含参数 name 的所有的数组</td></tr><tr><td>Enumeration getAttributeNames()</td><td>返回所有属性名的属性值</td></tr><tr><td>Object getAttribute(String name)</td><td>返回指定属性的属性值</td></tr><tr><td>String getCharacterEncoding()</td><td>返回字节编码方式</td></tr><tr><td>String getProtocol()</td><td>获取用户使用的协议</td></tr><tr><td>String getServletPath()</td><td>获取用户提交信息的页面</td></tr><tr><td>String getMethod()</td><td>获取客户提交信息的方式</td></tr><tr><td>BufferReader getHeader()</td><td>获取 HTTP 头文件的 accept、accept-encoding 和 Host 的值</td></tr><tr><td>String getRemoteAddr()</td><td>获取客户的 IP 地址</td></tr><tr><td>String getRemoteHost()</td><td>获取客户机的名称</td></tr><tr><td>String getserverName()</td><td>获取服务器的名称</td></tr><tr><td>int getServerPort()</td><td>获取服务器端口号</td></tr></tbody></table><h2 id="2-resopnse-对象常用方法"><a href="#2-resopnse-对象常用方法" class="headerlink" title="2. resopnse 对象常用方法"></a>2. <code>resopnse</code> 对象常用方法</h2><p><code>resopnse</code> 对象代表的是对客户端的相应. 向客户端发送文字时直接使用. 以下是 <code>HttpServletResopnse</code> 类的实例.</p><table><thead><tr><th>方法 ( 类型 + 方法名 )</th><th>描述</th></tr></thead><tbody><tr><td>String getCharacterEncoding()</td><td>返回响应用的是什么字符编码</td></tr><tr><td>ServletOutputStream getOutputStream()</td><td>返回响应的一个二进制输出流</td></tr><tr><td>PrintWrite getWrite()</td><td>返回可以向客户端输出字符的一个对象</td></tr><tr><td>void setContentLength(int len)</td><td>设置响应头长度</td></tr><tr><td>void setContentTye(String type)</td><td>设置响应的 MIME 类型</td></tr><tr><td>void sendRedirect(Java.lang.String location)</td><td>重新定向客户端的请求</td></tr></tbody></table><a id="more"></a><h2 id="3-session-常用方法"><a href="#3-session-常用方法" class="headerlink" title="3. session 常用方法"></a>3. <code>session</code> 常用方法</h2><p><code>session</code> 指的是客户端与服务器的一次回话, 从客户连接到服务器的一个 WebApplication 开始, 直到客户端与服务器断开连接为止. 它是 <code>HttpSession</code> 类的实例.</p><table><thead><tr><th>方法 ( 类型 + 方法名 )</th><th>描述</th></tr></thead><tbody><tr><td>long getCreationTime()</td><td>创建 session 创建时间</td></tr><tr><td>public String getId()</td><td>返回 session 创建时JSP引擎为它设置的唯一ID号</td></tr><tr><td>long getLastAccessedTime()</td><td>返回 session 里客户端最近一次请求时间</td></tr><tr><td>int getMaxInactiveInterval()</td><td>返回两次请求间隔多长时间此 session 被取消</td></tr><tr><td>String[] getValueNames()</td><td>返回一个包含此 session 中所有可用属性的数组</td></tr><tr><td>void invalidate()</td><td>取消 session , 使 session 不可用</td></tr><tr><td>boolean isNew()</td><td>返回服务器创建爱你的一个 session , 客户端是否已经加入</td></tr><tr><td>void removeValue(String name)</td><td>删除 session 中指定的属性</td></tr><tr><td>void setMaxInactiveInterval()</td><td>session 被取消 (ms)</td></tr></tbody></table><h2 id="4-out-常用方法"><a href="#4-out-常用方法" class="headerlink" title="4. out 常用方法"></a>4. <code>out</code> 常用方法</h2><p><code>out</code> 对象是 <code>JspWriter</code> 类的实例, 是向客户端输出内容常用的对象.</p><table><thead><tr><th>方法 ( 类型 + 方法名 )</th><th>描述</th></tr></thead><tbody><tr><td>void clear()</td><td>清除缓冲区的内容</td></tr><tr><td>void clearBuffer()</td><td>清除缓冲区的当前内容</td></tr><tr><td>void flush()</td><td>清空流</td></tr><tr><td>int getBufferSize()</td><td>返回缓冲区以字节数的大小,如果不设置为0</td></tr><tr><td>int getRemaining()</td><td>返回缓冲区还有多少剩余可用</td></tr><tr><td>bool isAutoFlush()</td><td>返回缓冲区满时,是自动清空还是抛出异常</td></tr><tr><td>void close()</td><td>关闭输出流</td></tr></tbody></table><h2 id="5-page-常用方法"><a href="#5-page-常用方法" class="headerlink" title="5. page 常用方法"></a>5. <code>page</code> 常用方法</h2><p><code>page</code> 指当前 <code>JSP</code> 页面本身, 有点像类中的 <code>this</code> 指针, 它是 <code>java.langlObject</code> 类的实例. 「page」对象代表正在运行的由 <code>jsp</code> 文件产生的类对象.</p><table><thead><tr><th>方法 ( 类型 + 方法名 )</th><th>描述</th></tr></thead><tbody><tr><td>class getClass()</td><td>返回此 Object 的类</td></tr><tr><td>int hashCode()</td><td>返回此 Object 的 hash 码</td></tr><tr><td>boolean equals(Object obj)</td><td>判断此 Object 是否与指定的 Object 对象相等</td></tr><tr><td>void copy(Object obj)</td><td>把此 Object 拷贝到指定的 Object 对象中</td></tr><tr><td>Object clone()</td><td>克隆此 Object 对象</td></tr><tr><td>String toString()</td><td>把此 Object 对象转换成 String 类的对象</td></tr><tr><td>void notify()</td><td>唤醒一个等待的进程</td></tr><tr><td>void notifyAll()</td><td>唤醒所有等待的进程</td></tr><tr><td>void wait(int timeout)</td><td>使一个进程处于等待直到 timeout 结束或者被唤醒</td></tr><tr><td>void wait()</td><td>使一个线程处于等待直到被唤醒</td></tr><tr><td>void enterMonitor()</td><td>对 Object 进行加锁</td></tr><tr><td>void exitMonitor()</td><td>对 Object 进行开锁</td></tr></tbody></table><h2 id="6-application-常用方法"><a href="#6-application-常用方法" class="headerlink" title="6. application 常用方法"></a>6. <code>application</code> 常用方法</h2><p><code>application</code> 实现了用户间数据的共享, 可存放全局变量. 它开始于服务器的启动, 直到服务器的关闭, 在此期间, 此对象将一直存在; 这样在用户的前后连接或者不同用户之间的连接中, 可以对此对象的同一属性进行操作; 在任何地方对此对象属性的操作, 都将影响到其他对象对此的访问. 服务器的启动和关闭决定了 <code>application</code> 对象的生命. 它是 <code>ServletContest</code>类的实例.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-request-对象常用方法&quot;&gt;&lt;a href=&quot;#1-request-对象常用方法&quot; class=&quot;headerlink&quot; title=&quot;1. request 对象常用方法&quot;&gt;&lt;/a&gt;1. &lt;code&gt;request&lt;/code&gt; 对象常用方法&lt;/h2&gt;&lt;p&gt;&lt;code&gt;request&lt;/code&gt; 是来自客户端的请求. 客户端的请求信息封装在 &lt;code&gt;request&lt;/code&gt; 对象中. 以下 &lt;code&gt;HttpServletRequest&lt;/code&gt; 类的实例.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法 ( 类型 + 方法名 )&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;String getParameter(String strTextName)&lt;/td&gt;
&lt;td&gt;获取表单提交信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enumeration getParameterNames()&lt;/td&gt;
&lt;td&gt;返回可用参数的枚举&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String[] getParameterValues(String name)&lt;/td&gt;
&lt;td&gt;返回包含参数 name 的所有的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Enumeration getAttributeNames()&lt;/td&gt;
&lt;td&gt;返回所有属性名的属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object getAttribute(String name)&lt;/td&gt;
&lt;td&gt;返回指定属性的属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getCharacterEncoding()&lt;/td&gt;
&lt;td&gt;返回字节编码方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getProtocol()&lt;/td&gt;
&lt;td&gt;获取用户使用的协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getServletPath()&lt;/td&gt;
&lt;td&gt;获取用户提交信息的页面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getMethod()&lt;/td&gt;
&lt;td&gt;获取客户提交信息的方式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BufferReader getHeader()&lt;/td&gt;
&lt;td&gt;获取 HTTP 头文件的 accept、accept-encoding 和 Host 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getRemoteAddr()&lt;/td&gt;
&lt;td&gt;获取客户的 IP 地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getRemoteHost()&lt;/td&gt;
&lt;td&gt;获取客户机的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String getserverName()&lt;/td&gt;
&lt;td&gt;获取服务器的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int getServerPort()&lt;/td&gt;
&lt;td&gt;获取服务器端口号&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;2-resopnse-对象常用方法&quot;&gt;&lt;a href=&quot;#2-resopnse-对象常用方法&quot; class=&quot;headerlink&quot; title=&quot;2. resopnse 对象常用方法&quot;&gt;&lt;/a&gt;2. &lt;code&gt;resopnse&lt;/code&gt; 对象常用方法&lt;/h2&gt;&lt;p&gt;&lt;code&gt;resopnse&lt;/code&gt; 对象代表的是对客户端的相应. 向客户端发送文字时直接使用. 以下是 &lt;code&gt;HttpServletResopnse&lt;/code&gt; 类的实例.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法 ( 类型 + 方法名 )&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;String getCharacterEncoding()&lt;/td&gt;
&lt;td&gt;返回响应用的是什么字符编码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ServletOutputStream getOutputStream()&lt;/td&gt;
&lt;td&gt;返回响应的一个二进制输出流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PrintWrite getWrite()&lt;/td&gt;
&lt;td&gt;返回可以向客户端输出字符的一个对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void setContentLength(int len)&lt;/td&gt;
&lt;td&gt;设置响应头长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void setContentTye(String type)&lt;/td&gt;
&lt;td&gt;设置响应的 MIME 类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;void sendRedirect(Java.lang.String location)&lt;/td&gt;
&lt;td&gt;重新定向客户端的请求&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="JSP" scheme="http://linraner.github.io/tags/JSP/"/>
    
      <category term="Java" scheme="http://linraner.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>lambda表达式</title>
    <link href="http://linraner.github.io/2018/09/28/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://linraner.github.io/2018/09/28/lambda表达式/</id>
    <published>2018-09-28T15:20:13.474Z</published>
    <updated>2018-07-16T00:30:14.706Z</updated>
    
    <content type="html"><![CDATA[<p>lambda表达式是一行函数，是函数式编程的一种特性。</p><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>lambda &lt;参数&gt;: 表达式<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> a,b: a + b</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(f)</div><div class="line"><span class="comment">#&lt;type 'function'&gt;</span></div></pre></td></tr></table></figure></p><p>获取整除2的数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(filter(<span class="keyword">lambda</span> x: x%<span class="number">2</span>==<span class="number">0</span>, range(<span class="number">10</span>)))</div><div class="line"><span class="comment">#[0, 2, 4, 6, 8]</span></div></pre></td></tr></table></figure></p><p>列表并行排序<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>];list2 = [<span class="number">9</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = zip(list1, list2)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = sorted(data)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>list1, list2 = map(<span class="keyword">lambda</span> t: list(t), zip(*data))</div></pre></td></tr></table></figure></p><h2 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h2><a id="more"></a><p>c++里的形式是这样的<br>[capture list] (parameter list) -&gt;return type {function body}</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//call the func.</span></div><div class="line">    <span class="keyword">auto</span> f1 = []() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"test"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;; </div><div class="line">    f1();</div><div class="line">    <span class="keyword">int</span> y = <span class="number">2</span>;</div><div class="line">    <span class="keyword">auto</span> f2 = [y](<span class="keyword">int</span> x) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; x + y &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;;</div><div class="line">    f2(<span class="number">4</span>);</div><div class="line">    <span class="comment">//STL</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</div><div class="line">        v.push_back(i);</div><div class="line">    &#125;</div><div class="line">    for_each(v.begin(), v.end(), [](<span class="keyword">int</span> n) &#123; </div><div class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">" "</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;lambda表达式是一行函数，是函数式编程的一种特性。&lt;/p&gt;
&lt;h2 id=&quot;python&quot;&gt;&lt;a href=&quot;#python&quot; class=&quot;headerlink&quot; title=&quot;python&quot;&gt;&lt;/a&gt;python&lt;/h2&gt;&lt;p&gt;lambda &amp;lt;参数&amp;gt;: 表达式&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;f = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; a,b: a + b&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;type(f)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#&amp;lt;type &#39;function&#39;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;获取整除2的数字&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list(filter(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x%&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, range(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#[0, 2, 4, 6, 8]&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;列表并行排序&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list1 = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];list2 = [&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = zip(list1, list2)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;data = sorted(data)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;list1, list2 = map(&lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; t: list(t), zip(*data))&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;cpp&quot;&gt;&lt;a href=&quot;#cpp&quot; class=&quot;headerlink&quot; title=&quot;cpp&quot;&gt;&lt;/a&gt;cpp&lt;/h2&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://linraner.github.io/tags/python/"/>
    
      <category term="函数式编程" scheme="http://linraner.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="cpp" scheme="http://linraner.github.io/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Django重置后台密码</title>
    <link href="http://linraner.github.io/2018/09/28/Django%E9%87%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E5%AF%86%E7%A0%81/"/>
    <id>http://linraner.github.io/2018/09/28/Django重置后台密码/</id>
    <published>2018-09-28T15:20:13.458Z</published>
    <updated>2018-07-11T01:18:51.620Z</updated>
    
    <content type="html"><![CDATA[<p>emmm时间长忘记密码了</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> python manage.py shell</div></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</div><div class="line">In [<span class="number">2</span>]: user = User.objects.get(username=<span class="string">'Username'</span>)</div><div class="line">In [<span class="number">3</span>]: user.set_password(<span class="string">'Password'</span>)</div><div class="line">In [<span class="number">4</span>]: user.save()</div><div class="line">In [<span class="number">5</span>]: exit()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;emmm时间长忘记密码了&lt;/p&gt;
&lt;h3 id=&quot;执行&quot;&gt;&lt;a href=&quot;#执行&quot; class=&quot;headerlink&quot; title=&quot;执行&quot;&gt;&lt;/a&gt;执行&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
      <category term="Django" scheme="http://linraner.github.io/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>c++的字符串与数字的转换</title>
    <link href="http://linraner.github.io/2018/09/28/c++%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>http://linraner.github.io/2018/09/28/c++的字符串与数字的转换/</id>
    <published>2018-09-28T15:20:13.443Z</published>
    <updated>2018-07-01T16:59:10.242Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数字转字符串"><a href="#数字转字符串" class="headerlink" title="数字转字符串"></a>数字转字符串</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="keyword">double</span> a = <span class="number">123.456</span>;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="built_in">stringstream</span> ss;</div><div class="line">ss &lt;&lt; a;</div><div class="line">ss &gt;&gt; s;</div><div class="line">ss.clear();</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; m;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">m[i] = i + <span class="string">'0'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</div><div class="line"><span class="keyword">double</span> a = <span class="number">123.456</span>;</div><div class="line"><span class="built_in">sprintf</span>(str, <span class="string">"%.3lf"</span>, a);</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</div><div class="line"><span class="keyword">int</span> a=<span class="number">175</span>;</div><div class="line"><span class="built_in">sprintf</span>(str,<span class="string">"%x"</span>,a);<span class="comment">//10进制转换成16进制，如果输出大写的字母是sprintf(str,"%X",a)</span></div></pre></td></tr></table></figure><h3 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h3><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></div><div class="line"><span class="built_in">string</span> s = <span class="string">"123.456"</span>;</div><div class="line"><span class="keyword">double</span> a;</div><div class="line"><span class="built_in">stringstream</span> ss;</div><div class="line">ss &lt;&lt; s;</div><div class="line">ss &gt;&gt; a;</div><div class="line">ss.clear();</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    m[i+<span class="string">'0'</span>] = i;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">char</span> str[] = <span class="string">"123.456"</span>;</div><div class="line"><span class="keyword">double</span> a;</div><div class="line"><span class="built_in">sscanf</span>(str, <span class="string">"%lf"</span>, &amp;a);</div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> str[]=<span class="string">"AF"</span>;</div><div class="line"><span class="keyword">int</span> a;</div><div class="line"><span class="built_in">sscanf</span>(str,<span class="string">"%x"</span>,&amp;a); <span class="comment">//16进制转换成10进制</span></div></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">int</span> a;<span class="keyword">float</span> b;<span class="keyword">long</span> c;</div><div class="line">a=atoi(<span class="string">"32"</span>);</div><div class="line">b=atof(<span class="string">"3.1415"</span>);</div><div class="line">c=atol(<span class="string">"567283"</span>);</div><div class="line"><span class="built_in">printf</span> (<span class="string">"%d\n%f\n%d\n"</span>,a,b,c);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数字转字符串&quot;&gt;&lt;a href=&quot;#数字转字符串&quot; class=&quot;headerlink&quot; title=&quot;数字转字符串&quot;&gt;&lt;/a&gt;数字转字符串&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sstream&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;123.456&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;stringstream&lt;/span&gt; ss;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ss &amp;lt;&amp;lt; a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ss &amp;gt;&amp;gt; s;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ss.clear();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;map&lt;/span&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&amp;gt; m;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	m[i] = i + &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; str[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;123.456&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(str, &lt;span class=&quot;string&quot;&gt;&quot;%.3lf&quot;&lt;/span&gt;, a);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; str[&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;number&quot;&gt;175&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(str,&lt;span class=&quot;string&quot;&gt;&quot;%x&quot;&lt;/span&gt;,a);&lt;span class=&quot;comment&quot;&gt;//10进制转换成16进制，如果输出大写的字母是sprintf(str,&quot;%X&quot;,a)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;字符串转数字&quot;&gt;&lt;a href=&quot;#字符串转数字&quot; class=&quot;headerlink&quot; title=&quot;字符串转数字&quot;&gt;&lt;/a&gt;字符串转数字&lt;/h3&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="c++" scheme="http://linraner.github.io/tags/c/"/>
    
      <category term="字符串" scheme="http://linraner.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>位运算笔记</title>
    <link href="http://linraner.github.io/2018/08/01/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%94%E8%AE%B0/"/>
    <id>http://linraner.github.io/2018/08/01/位运算笔记/</id>
    <published>2018-08-01T10:16:21.000Z</published>
    <updated>2019-07-29T11:25:17.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="amp-、-、"><a href="#amp-、-、" class="headerlink" title="&amp; 、|、 ^"></a>&amp; 、|、 ^</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a &amp; a = a</div><div class="line">a | a = a</div><div class="line">a ^ a = <span class="number">0</span></div><div class="line">a &amp; <span class="number">0</span> = <span class="number">0</span></div><div class="line">a | <span class="number">0</span> = a</div><div class="line">a ^ <span class="number">0</span> = a</div><div class="line">a | ( a &amp; b ) = a</div><div class="line">a &amp; ( a | b ) = a</div></pre></td></tr></table></figure><h3 id="a、b值交换"><a href="#a、b值交换" class="headerlink" title="a、b值交换"></a>a、b值交换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a ^= b;</div><div class="line">b ^= a;</div><div class="line">a ^= b;</div></pre></td></tr></table></figure><h3 id="判断奇偶（取最后一位）"><a href="#判断奇偶（取最后一位）" class="headerlink" title="判断奇偶（取最后一位）"></a>判断奇偶（取最后一位）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a &amp; <span class="number">1</span> &lt;==&gt; a % <span class="number">2</span></div></pre></td></tr></table></figure><h3 id="i-1位置为1"><a href="#i-1位置为1" class="headerlink" title="i+1位置为1"></a>i+1位置为1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1110 =&gt; 1111</span></div><div class="line">a |= <span class="number">1</span> &lt;&lt; i</div></pre></td></tr></table></figure><h3 id="i-1位置为0"><a href="#i-1位置为0" class="headerlink" title="i+1位置为0"></a>i+1位置为0</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 1111 =&gt; 1101</div><div class="line">a &amp;= ~(1 &lt;&lt; i)</div></pre></td></tr></table></figure><h3 id="取出i-1位"><a href="#取出i-1位" class="headerlink" title="取出i+1位"></a>取出i+1位</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// i = 2, 7 =&gt; 4</span></div><div class="line">a = a &amp; (<span class="number">1</span> &lt;&lt; i)</div></pre></td></tr></table></figure><h3 id="删除最后的1"><a href="#删除最后的1" class="headerlink" title="删除最后的1"></a>删除最后的1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1100 =&gt; 1000</span></div><div class="line">a = a &amp; (a-<span class="number">1</span>)</div></pre></td></tr></table></figure><h3 id="在对应i-1位，插入b的对应位"><a href="#在对应i-1位，插入b的对应位" class="headerlink" title="在对应i+1位，插入b的对应位"></a>在对应i+1位，插入b的对应位</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a |= 1 &lt;&lt; i; （a的bit位置1）</div><div class="line">a &amp; (b &amp; 1&lt;&lt;i) （与b的bit位相与）</div></pre></td></tr></table></figure><h3 id="得到最高位的1"><a href="#得到最高位的1" class="headerlink" title="得到最高位的1"></a>得到最高位的1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = a |(a&gt;&gt;<span class="number">1</span>);</div><div class="line">a = a |(a&gt;&gt;<span class="number">2</span>);</div><div class="line">a = a |(a&gt;&gt;<span class="number">4</span>);</div><div class="line">a = a |(a&gt;&gt;<span class="number">8</span>);</div><div class="line">a = a |(a&gt;&gt;<span class="number">16</span>);</div><div class="line"><span class="keyword">return</span> (a+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</div></pre></td></tr></table></figure><h3 id="检测一个无符号整数是否是2-n-1的形式"><a href="#检测一个无符号整数是否是2-n-1的形式" class="headerlink" title="检测一个无符号整数是否是2^n -1的形式"></a>检测一个无符号整数是否是2^n -1的形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">x&amp;(x+<span class="number">1</span>)</div></pre></td></tr></table></figure><h3 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h3><p>在<code>Java</code>中正数<code>&gt;&gt;</code>等价于<code>&gt;&gt;&gt;</code>，负数在内存中已补码形式保存，<code>&gt;&gt;&gt;</code>表示无符号右移。</p><h3 id="“1”位计数"><a href="#“1”位计数" class="headerlink" title="“1”位计数"></a>“1”位计数</h3><p>统计一个字（比如32bit）中，有多少个bit是1，有多少个bit是0。</p><p>这里以32bit为例来说明算法，这里基本思想类似折半计算。算法复杂度O(lgn)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">x = (x &amp; <span class="number">0x55555555</span>) + ((x&gt;&gt;<span class="number">1</span>)&amp; <span class="number">0x55555555</span>);</div><div class="line">x = (x &amp; <span class="number">0x33333333</span>) + ((x&gt;&gt;<span class="number">2</span>)&amp; <span class="number">0x33333333</span>);</div><div class="line">x = (x &amp; <span class="number">0x0F0F0F0F</span>) + ((x&gt;&gt;<span class="number">4</span>)&amp; <span class="number">0x0F0F0F0F</span>);</div><div class="line">x = (x &amp; <span class="number">0x00FF00FF</span>) + ((x&gt;&gt;<span class="number">8</span>)&amp; <span class="number">0x00FF00FF</span>);</div><div class="line">x = (x &amp; <span class="number">0x0000FFFF</span>) + ((x&gt;&gt;<span class="number">16</span>)&amp; <span class="number">0x0000FFFF</span>);</div></pre></td></tr></table></figure></p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>—待续</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://book.douban.com/subject/1784887/" target="_blank" rel="noopener">《Hacker’s Delight》</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;位运算&quot;&gt;&lt;a href=&quot;#位运算&quot; class=&quot;headerlink&quot; title=&quot;位运算&quot;&gt;&lt;/a&gt;位运算&lt;/h2&gt;&lt;h3 id=&quot;amp-、-、&quot;&gt;&lt;a href=&quot;#amp-、-、&quot; class=&quot;headerlink&quot; title=&quot;&amp;amp; 、
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://linraner.github.io/tags/algorithm/"/>
    
      <category term="notes" scheme="http://linraner.github.io/tags/notes/"/>
    
  </entry>
  
  <entry>
    <title>20行代码的签到脚本(Python)</title>
    <link href="http://linraner.github.io/2018/07/28/20%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC/"/>
    <id>http://linraner.github.io/2018/07/28/20行代码的签到脚本/</id>
    <published>2018-07-27T16:00:00.000Z</published>
    <updated>2018-08-15T11:09:23.004Z</updated>
    
    <content type="html"><![CDATA[<p>懒得每天在某个网站签到，写了一个python脚本扔在云主机上。网站很简单，代码就几十行。</p><h3 id="签到脚本"><a href="#签到脚本" class="headerlink" title="签到脚本"></a>签到脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">username = <span class="string">"####"</span></div><div class="line">password = <span class="string">"####"</span></div><div class="line">loginUrl = <span class="string">"登录路径/auth/login"</span></div><div class="line">s = requests.Session()</div><div class="line">logindata = &#123;</div><div class="line">    <span class="string">'email'</span>:username,</div><div class="line">    <span class="string">'passwd'</span>:password,</div><div class="line">    <span class="string">'remember_me'</span>:<span class="string">'ture'</span>,</div><div class="line">&#125;</div><div class="line">r = s.post(loginUrl,data=logindata)</div><div class="line">r = s.get(loginUrl)</div><div class="line">checkinUrl=<span class="string">"签到的路径/user/checkin"</span></div><div class="line">rr = s.post(checkinUrl)<span class="comment">#执行签到</span></div><div class="line">rr = s.get(loginUrl)</div><div class="line"><span class="comment"># print(rr)</span></div><div class="line"><span class="comment"># print(rr._content.decode())</span></div><div class="line">exit()</div></pre></td></tr></table></figure><h3 id="在Linux上定时执行这个脚本"><a href="#在Linux上定时执行这个脚本" class="headerlink" title="在Linux上定时执行这个脚本"></a>在Linux上定时执行这个脚本</h3><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab -e</div></pre></td></tr></table></figure><p>进入编辑模式，设置每天8:00运行一次。<br>crontab的语法规范<br>分钟 小时 日期 月份 周 命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">00 8 * * * python /opt/checkin.py</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;懒得每天在某个网站签到，写了一个python脚本扔在云主机上。网站很简单，代码就几十行。&lt;/p&gt;
&lt;h3 id=&quot;签到脚本&quot;&gt;&lt;a href=&quot;#签到脚本&quot; class=&quot;headerlink&quot; title=&quot;签到脚本&quot;&gt;&lt;/a&gt;签到脚本&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; requests&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;username = &lt;span class=&quot;string&quot;&gt;&quot;####&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;password = &lt;span class=&quot;string&quot;&gt;&quot;####&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;loginUrl = &lt;span class=&quot;string&quot;&gt;&quot;登录路径/auth/login&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;s = requests.Session()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;logindata = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;email&#39;&lt;/span&gt;:username,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;passwd&#39;&lt;/span&gt;:password,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;remember_me&#39;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&#39;ture&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r = s.post(loginUrl,data=logindata)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;r = s.get(loginUrl)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;checkinUrl=&lt;span class=&quot;string&quot;&gt;&quot;签到的路径/user/checkin&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rr = s.post(checkinUrl)&lt;span class=&quot;comment&quot;&gt;#执行签到&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rr = s.get(loginUrl)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# print(rr)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# print(rr._content.decode())&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;exit()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;在Linux上定时执行这个脚本&quot;&gt;&lt;a href=&quot;#在Linux上定时执行这个脚本&quot; class=&quot;headerlink&quot; title=&quot;在Linux上定时执行这个脚本&quot;&gt;&lt;/a&gt;在Linux上定时执行这个脚本&lt;/h3&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://linraner.github.io/tags/python/"/>
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
      <category term="linux" scheme="http://linraner.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>django链接MySQL问题</title>
    <link href="http://linraner.github.io/2018/06/21/django%E9%93%BE%E6%8E%A5mysql%E9%97%AE%E9%A2%98/"/>
    <id>http://linraner.github.io/2018/06/21/django链接mysql问题/</id>
    <published>2018-06-21T04:00:00.000Z</published>
    <updated>2018-07-01T16:12:58.600Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">（django.db.utils.OperationalError: (1045, &quot;Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO)&quot;)）</div></pre></td></tr></table></figure><h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><ul><li>Django2.0 </li><li>MySQL8.0.11</li></ul><a id="more"></a><p>Mysql 8.0 的部分语法，密码的加密方式发生了改变，在8.0 中的用户密码采用的是cha2 加密方法, 从而密码认证错误。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mysql -u root -p</div><div class="line">mysql&gt; use mysql;</div><div class="line">mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;错误&quot;&gt;&lt;a href=&quot;#错误&quot; class=&quot;headerlink&quot; title=&quot;错误&quot;&gt;&lt;/a&gt;错误&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;（django.db.utils.OperationalError: (1045, &amp;quot;Access denied for user &amp;apos;root&amp;apos;@&amp;apos;localhost&amp;apos; (using password: NO)&amp;quot;)）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;环境：&quot;&gt;&lt;a href=&quot;#环境：&quot; class=&quot;headerlink&quot; title=&quot;环境：&quot;&gt;&lt;/a&gt;环境：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Django2.0 &lt;/li&gt;
&lt;li&gt;MySQL8.0.11&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
      <category term="django" scheme="http://linraner.github.io/tags/django/"/>
    
      <category term="mysql" scheme="http://linraner.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>nothing added to commit but untracked files present解决方法</title>
    <link href="http://linraner.github.io/2018/05/30/nothing-added-to-commit-but-untracked-files-present%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://linraner.github.io/2018/05/30/nothing-added-to-commit-but-untracked-files-present解决方法/</id>
    <published>2018-05-30T09:05:53.000Z</published>
    <updated>2018-07-01T16:55:26.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git commit                                                         </div><div class="line">On branch master                                                     </div><div class="line">                                                                     </div><div class="line">Initial commit                                                       </div><div class="line">                                                                     </div><div class="line">Untracked files:                                                     </div><div class="line">        .gitignore                                                   </div><div class="line">        Test/                                                        </div><div class="line">        blogpost/                                                    </div><div class="line">        manage.py                                                    </div><div class="line">                                                                     </div><div class="line">nothing added to commit but untracked files present</div></pre></td></tr></table></figure><p><strong>文件被追踪，但是没有被添加git中</strong></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><a id="more"></a><p><strong>git status 列出当前目录所有还没有被git管理的文件和被git管理且被修改但还未提交(git commit)的文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> git add manage.py</div><div class="line"><span class="meta">$</span> git add blogpost\</div><div class="line"><span class="meta">$</span> git add Test\</div><div class="line"><span class="meta">$</span> git add .gitignore</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt; git commit                                                         &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;On branch master                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Initial commit                                                       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Untracked files:                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        .gitignore                                                   &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Test/                                                        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        blogpost/                                                    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        manage.py                                                    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                                     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nothing added to commit but untracked files present&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;文件被追踪，但是没有被添加git中&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h2&gt;
    
    </summary>
    
    
      <category term="git" scheme="http://linraner.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>c++枚举next_premutation</title>
    <link href="http://linraner.github.io/2018/05/28/c++%E6%9E%9A%E4%B8%BEnext_premutation/"/>
    <id>http://linraner.github.io/2018/05/28/c++枚举next_premutation/</id>
    <published>2018-05-28T02:39:53.000Z</published>
    <updated>2018-07-01T16:54:49.673Z</updated>
    
    <content type="html"><![CDATA[<h3 id="平均复杂度即为O-n"><a href="#平均复杂度即为O-n" class="headerlink" title="平均复杂度即为O(n)"></a>平均复杂度即为O(n)</h3><ul><li><p>next_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“下一个排列次序”；</p></li><li><p>prev_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“上一个排列次序”；</p></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>&#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.size();i++)&#123;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;v[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</div><div class="line">v.push_back(<span class="number">1</span>);</div><div class="line">v.push_back(<span class="number">3</span>);</div><div class="line">v.push_back(<span class="number">2</span>);</div><div class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"原排列 ： "</span>;</div><div class="line">f(v); </div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">next_permutation(v.begin(),v.end());<span class="comment">//升序序列  或者下一个排列次序 按照字典序生成下一个序列 </span></div><div class="line">f(v);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//for(int i=0;i&lt;5;i++)&#123;</span></div><div class="line"><span class="comment">//prev_permutation(v.begin(),v.end());//降序 </span></div><div class="line"><span class="comment">//f(v);</span></div><div class="line"><span class="comment">//&#125; </span></div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;平均复杂度即为O-n&quot;&gt;&lt;a href=&quot;#平均复杂度即为O-n&quot; class=&quot;headerlink&quot; title=&quot;平均复杂度即为O(n)&quot;&gt;&lt;/a&gt;平均复杂度即为O(n)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;next_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“下一个排列次序”；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;prev_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“上一个排列次序”；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h2&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="c++" scheme="http://linraner.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu错误-Could not get lock /var/lib/dpkg/lock</title>
    <link href="http://linraner.github.io/2018/05/15/Ubuntu%E9%94%99%E8%AF%AF-Could-not-get-lock-var-lib-dpkg-lock/"/>
    <id>http://linraner.github.io/2018/05/15/Ubuntu错误-Could-not-get-lock-var-lib-dpkg-lock/</id>
    <published>2018-05-15T09:45:02.000Z</published>
    <updated>2018-07-01T16:54:32.589Z</updated>
    
    <content type="html"><![CDATA[<h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable) </div><div class="line">E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?</div></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><a id="more"></a><h4 id="查看运行的线程"><a href="#查看运行的线程" class="headerlink" title="查看运行的线程"></a>查看运行的线程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ps -A | grep apt-get</div><div class="line"><span class="meta">#</span> sudo kill processnumber</div><div class="line"><span class="meta">#</span> 关闭apt进程</div></pre></td></tr></table></figure><p>我的没有发现进程， 可能是上次运行安装或更新时没有正常完成造成的</p><h4 id="终端输入"><a href="#终端输入" class="headerlink" title="终端输入"></a>终端输入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo rm /var/cache/apt/archives/lock</div><div class="line">sudo rm /var/lib/dpkg/lock</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;报错信息&quot;&gt;&lt;a href=&quot;#报错信息&quot; class=&quot;headerlink&quot; title=&quot;报错信息&quot;&gt;&lt;/a&gt;报错信息&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable) &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;解决办法&quot;&gt;&lt;a href=&quot;#解决办法&quot; class=&quot;headerlink&quot; title=&quot;解决办法&quot;&gt;&lt;/a&gt;解决办法&lt;/h3&gt;
    
    </summary>
    
    
      <category term="skill" scheme="http://linraner.github.io/tags/skill/"/>
    
      <category term="ubuntu" scheme="http://linraner.github.io/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>c++ std::ios_base::sync_with_stdio 加速输入输出</title>
    <link href="http://linraner.github.io/2018/05/14/c-std-ios-base-sync-with-stdio-%E5%8A%A0%E9%80%9F%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>http://linraner.github.io/2018/05/14/c-std-ios-base-sync-with-stdio-加速输入输出/</id>
    <published>2018-05-14T06:57:41.000Z</published>
    <updated>2018-07-01T16:55:49.760Z</updated>
    
    <content type="html"><![CDATA[<h3 id="static-bool-sync-with-stdio-bool-sync-true"><a href="#static-bool-sync-with-stdio-bool-sync-true" class="headerlink" title="static bool sync_with_stdio( bool sync = true );"></a><code>static bool sync_with_stdio( bool sync = true );</code></h3><p>设置标准 C++ 流是否与标准 C 流在每次输入/输出操作后同步。</p><p>遇到cin TLE时可以用于取消cin同步, 取消之后不能和 scanf，sscanf, getchar, fgets 之类同用。</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a\n"</span>;</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">printf</span>(<span class="string">"b\n"</span>);</div><div class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"c\n"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="输出-（环境-g-5-4-0）"><a href="#输出-（环境-g-5-4-0）" class="headerlink" title="输出 （环境 g++5.4.0）"></a>输出 （环境 g++5.4.0）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">b</div><div class="line">c</div><div class="line">a</div></pre></td></tr></table></figure><p>默认的情况下cin绑定的是cout，每次执行 &lt;&lt; 操作符的时候都要调用flush，这样会增加IO负担。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</div><div class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</div></pre></td></tr></table></figure><p>参考一 ： <a href="http://zh.cppreference.com/w/cpp/io/ios_base/sync_with_stdio" target="_blank" rel="noopener">http://zh.cppreference.com/w/cpp/io/ios_base/sync_with_stdio</a></p><p>参考二 ：<a href="http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html" target="_blank" rel="noopener">http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;static-bool-sync-with-stdio-bool-sync-true&quot;&gt;&lt;a href=&quot;#static-bool-sync-with-stdio-bool-sync-true&quot; class=&quot;headerlink&quot; title=&quot;static bool sync_with_stdio( bool sync = true );&quot;&gt;&lt;/a&gt;&lt;code&gt;static bool sync_with_stdio( bool sync = true );&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;设置标准 C++ 流是否与标准 C 流在每次输入/输出操作后同步。&lt;/p&gt;
&lt;p&gt;遇到cin TLE时可以用于取消cin同步, 取消之后不能和 scanf，sscanf, getchar, fgets 之类同用。&lt;/p&gt;
&lt;h4 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h4&gt;
    
    </summary>
    
    
      <category term="acm" scheme="http://linraner.github.io/tags/acm/"/>
    
      <category term="c++" scheme="http://linraner.github.io/tags/c/"/>
    
  </entry>
  
</feed>
