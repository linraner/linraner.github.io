<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>对IDEA调优</title>
    <url>/2019/10/25/%E4%B8%80%E6%AC%A1%E5%AF%B9IDEA%E7%9A%84%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul>
<li>jps</li>
<li>jstat -gcutil 9448 1000</li>
<li>jconsole.exe</li>
</ul>
<h2 id="IDEA调优后的参数"><a href="#IDEA调优后的参数" class="headerlink" title="IDEA调优后的参数"></a>IDEA调优后的参数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-server</span><br><span class="line">-Xms3g</span><br><span class="line">-Xmx3g</span><br><span class="line">-XX:NewRatio&#x3D;5</span><br><span class="line">-Xss16m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:+CMSParallelRemarkEnabled</span><br><span class="line">-XX:ConcGCThreads&#x3D;4</span><br><span class="line"></span><br><span class="line">-XX:ReservedCodeCacheSize&#x3D;512m</span><br><span class="line">-XX:+TieredCompilation</span><br><span class="line"></span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB&#x3D;50</span><br><span class="line">-ea</span><br><span class="line">-Dsun.io.useCanonCaches&#x3D;false-Djava.net.preferIPv4Stack&#x3D;true-XX:+HeapDumpOnOutOfMemoryError</span><br><span class="line">-XX:-OmitStackTraceInFastThrow</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="相关参数介绍"><a href="#相关参数介绍" class="headerlink" title="相关参数介绍"></a>相关参数介绍</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># custom IntelliJ IDEA VM options</span><br><span class="line"></span><br><span class="line">##################JVM模式############################</span><br><span class="line"></span><br><span class="line"># IDEA的JVM以Server模式启动（新生代默认使用ParNew）</span><br><span class="line">-server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##################内存分配############################</span><br><span class="line"></span><br><span class="line"># 堆初始值占用3G，意味着IDEA启动即分配3G内存</span><br><span class="line">-Xms3g</span><br><span class="line"></span><br><span class="line"># 堆最大值占用3G</span><br><span class="line">-Xmx3g</span><br><span class="line"></span><br><span class="line"># 强制JVM在启动时申请到足够的堆内存（否则IDEA启动时堆初始大小不足3g）</span><br><span class="line">-XX:+AlwaysPreTouch</span><br><span class="line"></span><br><span class="line"># 年轻代与老年代比例为1:3（默认值是1:4），降低年轻代的回收频率</span><br><span class="line">-XX:NewRatio&#x3D;3</span><br><span class="line"></span><br><span class="line"># 栈帧大小为16m</span><br><span class="line">-Xss16m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##################老年代回收器############################</span><br><span class="line"></span><br><span class="line"># 使用CMS老年代回收器</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line"></span><br><span class="line"># CMS的重新标记步骤：多线程一起执行</span><br><span class="line">-XX:+CMSParallelRemarkEnabled</span><br><span class="line"></span><br><span class="line"># CMS的并发标记步骤：启用4个线程并发标记（理论上越多越好，前提是CPU核心足够多）</span><br><span class="line">-XX:ConcGCThreads&#x3D;4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##################JIT编译器############################</span><br><span class="line"></span><br><span class="line"># 代码缓存，用于存放Just In Time编译后的本地代码，如果塞满，JVM将只解释执行，不再编译native代码。</span><br><span class="line">-XX:ReservedCodeCacheSize&#x3D;512m</span><br><span class="line"></span><br><span class="line"># 分层编译，JIT编译优化越来越好，IDEA运行时间越久越快</span><br><span class="line">-XX:+TieredCompilation</span><br><span class="line"></span><br><span class="line"># 节省64位指针占用的空间，代价是JVM额外开销</span><br><span class="line">-XX:+UseCompressedOops</span><br><span class="line"></span><br><span class="line"># 增大软引用在JVM中的存活时长（堆空闲空间越大越久）</span><br><span class="line">-XX:SoftRefLRUPolicyMSPerMB&#x3D;50</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-Dsun.io.useCanonCaches&#x3D;false</span><br><span class="line"></span><br><span class="line">-Djava.net.preferIPv4Stack&#x3D;true</span><br><span class="line"></span><br><span class="line">-Djsse.enableSNIExtension&#x3D;false</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>java</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL练习题</title>
    <url>/2019/10/15/%E5%87%A0%E9%81%93SQL%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<hr>
<p>闲着没事情做几道SQL题。<br>Orcal SQL: <a href="https://livesql.oracle.com" target="_blank" rel="noopener">在线SQL测试</a></p>
<p>MySQL指定进入某个端口命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p -P 3307</span><br><span class="line">``` </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 问题描述</span></span></span><br><span class="line">1.学生表</span><br><span class="line">Student(SID,Sname,Sage,Ssex) --SID 学生编号,Sname 学生姓名,Sage 出生年月,Ssex 学生性别.</span><br><span class="line">2.课程表</span><br><span class="line">Course(CID,Cname,TID) --CID --课程编号,Cname 课程名称,TID 教师编号.</span><br><span class="line">3.教师表</span><br><span class="line">Teacher(TID,Tname) --TID 教师编号,Tname 教师姓名.</span><br><span class="line">4.成绩表</span><br><span class="line">SC(SID,CID,score) --SID 学生编号,CID 课程编号,score 分数.</span><br><span class="line">建表语句:</span><br><span class="line">```sql</span><br><span class="line">create table Student(SID varchar(10),Sname nvarchar(10),Sage datetime,Ssex nvarchar(10));</span><br><span class="line">insert into Student values('01' , '赵雷' , '1990-01-01' , '男');</span><br><span class="line">insert into Student values('02' , '钱电' , '1990-12-21' , '男');</span><br><span class="line">insert into Student values('03' , '孙风' , '1990-05-20' , '男');</span><br><span class="line">insert into Student values('04' , '李云' , '1990-08-06' , '男');</span><br><span class="line">insert into Student values('05' , '周梅' , '1991-12-01' , '女');</span><br><span class="line">insert into Student values('06' , '吴兰' , '1992-03-01' , '女');</span><br><span class="line">insert into Student values('07' , '郑竹' , '1989-07-01' , '女');</span><br><span class="line">insert into Student values('08' , '王菊' , '1990-01-20' , '女');</span><br><span class="line">create table Course(CID varchar(10),Cname nvarchar(10),TID varchar(10));</span><br><span class="line">insert into Course values('01' , '语文' , '02');</span><br><span class="line">insert into Course values('02' , '数学' , '01');</span><br><span class="line">insert into Course values('03' , '英语' , '03');</span><br><span class="line">create table Teacher(TID varchar(10),Tname nvarchar(10));</span><br><span class="line">insert into Teacher values('01' , '张三');</span><br><span class="line">insert into Teacher values('02' , '李四');</span><br><span class="line">insert into Teacher values('03' , '王五');</span><br><span class="line">create table SC(SID varchar(10),CID varchar(10),score decimal(18,1));</span><br><span class="line">insert into SC values('01' , '01' , 80);</span><br><span class="line">insert into SC values('01' , '02' , 90);</span><br><span class="line">insert into SC values('01' , '03' , 99);</span><br><span class="line">insert into SC values('02' , '01' , 70);</span><br><span class="line">insert into SC values('02' , '02' , 60);</span><br><span class="line">insert into SC values('02' , '03' , 80);</span><br><span class="line">insert into SC values('03' , '01' , 80);</span><br><span class="line">insert into SC values('03' , '02' , 80);</span><br><span class="line">insert into SC values('03' , '03' , 80);</span><br><span class="line">insert into SC values('04' , '01' , 50);</span><br><span class="line">insert into SC values('04' , '02' , 30);</span><br><span class="line">insert into SC values('04' , '03' , 20);</span><br><span class="line">insert into SC values('05' , '01' , 76);</span><br><span class="line">insert into SC values('05' , '02' , 87);</span><br><span class="line">insert into SC values('06' , '01' , 31);</span><br><span class="line">insert into SC values('06' , '03' , 34);</span><br><span class="line">insert into SC values('07' , '02' , 89);</span><br><span class="line">insert into SC values('07' , '03' , 98);</span><br></pre></td></tr></table></figure>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol>
<li>查询”01”课程比”02”课程成绩高的学生的信息及课程分数</li>
</ol>
<ul>
<li>查询同时存在”01”课程和”02”课程的情况<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+---------------------+------+------------+------------+</span><br><span class="line">| SID  | Sname | Sage                | Ssex | 01课程分数 | 02课程分数 |</span><br><span class="line">+------+-------+---------------------+------+------------+------------+</span><br><span class="line">| 02   | 钱电  | 1990-12-21 00:00:00 | 男   |       70.0 |       60.0 |</span><br><span class="line">| 04   | 李云  | 1990-08-06 00:00:00 | 男   |       50.0 |       30.0 |</span><br><span class="line">+------+-------+---------------------+------+------------+------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.* , b.score <span class="number">01</span>课程分数, c.score <span class="number">02</span>课程分数 <span class="keyword">from</span> Student a, SC b, SC c</span><br><span class="line"><span class="keyword">where</span> a.SID=b.SID <span class="keyword">and</span> a.SID=c.SID <span class="keyword">and</span> b.CID=<span class="string">"01"</span> <span class="keyword">and</span> c.CID=<span class="string">"02"</span> <span class="keyword">and</span> b.score&gt;c.score;</span><br></pre></td></tr></table></figure></li>
<li>查询同时存在”01”课程和”02”课程的情况和存在”01”课程但可能不存在”02”课程的情况(不存在时显示为null)(以下存在相同内容时不再解释).<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+---------------------+------+------------+------------+</span><br><span class="line">| SID  | Sname | Sage                | Ssex | 01课程分数 | 02课程分数 |</span><br><span class="line">+------+-------+---------------------+------+------------+------------+</span><br><span class="line">| 01   | 赵雷  | 1990-01-01 00:00:00 | 男   |       80.0 |       90.0 |</span><br><span class="line">| 02   | 钱电  | 1990-12-21 00:00:00 | 男   |       70.0 |       60.0 |</span><br><span class="line">| 03   | 孙风  | 1990-05-20 00:00:00 | 男   |       80.0 |       80.0 |</span><br><span class="line">| 04   | 李云  | 1990-08-06 00:00:00 | 男   |       50.0 |       30.0 |</span><br><span class="line">| 05   | 周梅  | 1991-12-01 00:00:00 | 女   |       76.0 |       87.0 |</span><br><span class="line">| 06   | 吴兰  | 1992-03-01 00:00:00 | 女   |       31.0 |       NULL |</span><br><span class="line">+------+-------+---------------------+------+------------+------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.*,b.score <span class="number">01</span>课程分数,c.score <span class="number">02</span>课程分数 <span class="keyword">from</span> Student a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> SC b <span class="keyword">on</span> b.SID=a.SID <span class="keyword">and</span> b.CID=<span class="string">'01'</span></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> SC c <span class="keyword">on</span> c.SID=a.SID <span class="keyword">and</span> c.CID=<span class="string">'02'</span></span><br><span class="line"><span class="keyword">where</span> b.score&gt;<span class="keyword">isnull</span>(c.score);</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩.<br><code>CAST()</code>函数:<code>CAST(&#39;12.5&#39; AS decimal(9,2))</code><br>如果通过<code>CAST()</code>函数将这个值转换为<code>decimal</code>表示精度与小数位数分别为9与2.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+-----------+</span><br><span class="line">| SID  | Sname | avg_socre |</span><br><span class="line">+------+-------+-----------+</span><br><span class="line">| 01   | 赵雷  |     89.67 |</span><br><span class="line">| 02   | 钱电  |     70.00 |</span><br><span class="line">| 03   | 孙风  |     80.00 |</span><br><span class="line">| 05   | 周梅  |     81.50 |</span><br><span class="line">| 07   | 郑竹  |     93.50 |</span><br><span class="line">+------+-------+-----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.SID,a.Sname,<span class="keyword">cast</span>(<span class="keyword">avg</span>(b.score) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>))avg_socre</span><br><span class="line"><span class="keyword">from</span> Student a, SC b</span><br><span class="line"><span class="keyword">where</span> a.SID=b.SID</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.SID,a.Sname</span><br><span class="line"><span class="keyword">having</span> <span class="keyword">cast</span>(<span class="keyword">avg</span>(b.score) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">10</span>,<span class="number">2</span>))&gt;=<span class="number">60</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.SID;</span><br></pre></td></tr></table></figure></li>
<li>查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩.</li>
</ol>
<ul>
<li>查询所有有成绩的SQL.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+----------+--------+</span><br><span class="line">| SID  | Sname | 选课总数 | 总成绩 |</span><br><span class="line">+------+-------+----------+--------+</span><br><span class="line">| 01   | 赵雷  |        3 |  269.0 |</span><br><span class="line">| 02   | 钱电  |        3 |  210.0 |</span><br><span class="line">| 03   | 孙风  |        3 |  240.0 |</span><br><span class="line">| 04   | 李云  |        3 |  100.0 |</span><br><span class="line">| 05   | 周梅  |        2 |  163.0 |</span><br><span class="line">| 06   | 吴兰  |        2 |   65.0 |</span><br><span class="line">| 07   | 郑竹  |        2 |  187.0 |</span><br><span class="line">+------+-------+----------+--------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.SID,a.Sname,<span class="keyword">count</span>(b.CID) 选课总数,<span class="keyword">sum</span>(b.score) 总成绩</span><br><span class="line"><span class="keyword">from</span> Student a, SC b</span><br><span class="line"><span class="keyword">where</span> a.SID=b.SID</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.SID, a.Sname</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.SID</span><br></pre></td></tr></table></figure></li>
<li>查询所有(包括有成绩和无成绩)的SQL.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+--------------+------------+</span><br><span class="line">| SID  | Sname | count(b.CID) | sum(score) |</span><br><span class="line">+------+-------+--------------+------------+</span><br><span class="line">| 01   | 赵雷  |            3 |      269.0 |</span><br><span class="line">| 02   | 钱电  |            3 |      210.0 |</span><br><span class="line">| 03   | 孙风  |            3 |      240.0 |</span><br><span class="line">| 04   | 李云  |            3 |      100.0 |</span><br><span class="line">| 05   | 周梅  |            2 |      163.0 |</span><br><span class="line">| 06   | 吴兰  |            2 |       65.0 |</span><br><span class="line">| 07   | 郑竹  |            2 |      187.0 |</span><br><span class="line">| 08   | 王菊  |            0 |       NULL |</span><br><span class="line">+------+-------+--------------+------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.SID,a.Sname,<span class="keyword">count</span>(b.CID),<span class="keyword">sum</span>(score)</span><br><span class="line"><span class="keyword">from</span> Student a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> SC b</span><br><span class="line"><span class="keyword">on</span> a.SID=b.SID</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.SID, a.Sname</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.SID;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li>查询”李”姓老师的数量.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| 教师数量 |</span><br><span class="line">+----------+</span><br><span class="line">|        1 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(Tname)教师数量 <span class="keyword">from</span> Teacher <span class="keyword">where</span> Tname <span class="keyword">like</span> <span class="string">'李%'</span>; </span><br><span class="line"><span class="comment">-- 2</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(Tname)教师数量 <span class="keyword">from</span> Teacher <span class="keyword">where</span> <span class="keyword">left</span>(Tname, <span class="number">1</span>)=<span class="string">'李'</span>;</span><br></pre></td></tr></table></figure></li>
<li>查询学过”张三”老师授课的同学的信息.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+---------------------+------+</span><br><span class="line">| SID  | Sname | Sage                | Ssex |</span><br><span class="line">+------+-------+---------------------+------+</span><br><span class="line">| 01   | 赵雷  | 1990-01-01 00:00:00 | 男   |</span><br><span class="line">| 02   | 钱电  | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风  | 1990-05-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云  | 1990-08-06 00:00:00 | 男   |</span><br><span class="line">| 05   | 周梅  | 1991-12-01 00:00:00 | 女   |</span><br><span class="line">| 07   | 郑竹  | 1989-07-01 00:00:00 | 女   |</span><br><span class="line">+------+-------+---------------------+------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> Student.* </span><br><span class="line"><span class="keyword">from</span> Student,SC,Course,Teacher</span><br><span class="line"><span class="keyword">where</span> Student.SID=SC.SID <span class="keyword">and</span> SC.CID=Course.CID <span class="keyword">and</span> Course.TID=Teacher.TID </span><br><span class="line"><span class="keyword">and</span> Teacher.Tname=<span class="string">"张三"</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Student.SID;</span><br></pre></td></tr></table></figure></li>
<li>查询没学过”张三”老师授课的同学的信息<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+---------------------+------+</span><br><span class="line">| SID  | Sname | Sage                | Ssex |</span><br><span class="line">+------+-------+---------------------+------+</span><br><span class="line">| 06   | 吴兰  | 1992-03-01 00:00:00 | 女   |</span><br><span class="line">| 08   | 王菊  | 1990-01-20 00:00:00 | 女   |</span><br><span class="line">+------+-------+---------------------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.*</span><br><span class="line"><span class="keyword">from</span> Student s</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">SID</span> <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> SC.SID</span><br><span class="line"><span class="keyword">from</span> SC,Course,Teacher</span><br><span class="line"><span class="keyword">where</span> SC.CID=Course.CID <span class="keyword">and</span> Course.TID=Teacher.TID </span><br><span class="line"><span class="keyword">and</span> Teacher.Tname=<span class="string">"张三"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> s.SID;</span><br></pre></td></tr></table></figure></li>
<li>查询学过编号为”01”并且也学过编号为”02”的课程的同学的信息.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+---------------------+------+</span><br><span class="line">| SID  | Sname | Sage                | Ssex |</span><br><span class="line">+------+-------+---------------------+------+</span><br><span class="line">| 01   | 赵雷  | 1990-01-01 00:00:00 | 男   |</span><br><span class="line">| 02   | 钱电  | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风  | 1990-05-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云  | 1990-08-06 00:00:00 | 男   |</span><br><span class="line">| 05   | 周梅  | 1991-12-01 00:00:00 | 女   |</span><br><span class="line">+------+-------+---------------------+------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">select</span> Student.*</span><br><span class="line"><span class="keyword">from</span> Student,SC</span><br><span class="line"><span class="keyword">where</span> Student.SID=SC.SID <span class="keyword">and</span> SC.CID=<span class="string">'01'</span></span><br><span class="line"><span class="keyword">and</span> <span class="keyword">exists</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> SC sc_2 <span class="keyword">where</span> sc_2.CID=<span class="string">'02'</span> <span class="keyword">and</span> sc_2.SID=SC.SID</span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Student.SID;</span><br><span class="line"><span class="comment">-- 2</span></span><br><span class="line"><span class="keyword">select</span> s.* <span class="keyword">from</span> Student s <span class="keyword">where</span> s.SID <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">SID</span> <span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">SID</span> <span class="keyword">from</span> SC <span class="keyword">where</span> SC.CID=<span class="string">'01'</span></span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">SID</span> <span class="keyword">from</span> SC <span class="keyword">where</span> SC.CID=<span class="string">'02'</span></span><br><span class="line">    ) t <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">SID</span> <span class="keyword">having</span> <span class="keyword">count</span>(<span class="number">1</span>) = <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> s.SID;</span><br></pre></td></tr></table></figure></li>
<li>查询没有学全所有课程的同学的信息.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+---------------------+------+</span><br><span class="line">| SID  | Sname | Sage                | Ssex |</span><br><span class="line">+------+-------+---------------------+------+</span><br><span class="line">| 05   | 周梅  | 1991-12-01 00:00:00 | 女   |</span><br><span class="line">| 06   | 吴兰  | 1992-03-01 00:00:00 | 女   |</span><br><span class="line">| 07   | 郑竹  | 1989-07-01 00:00:00 | 女   |</span><br><span class="line">+------+-------+---------------------+------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">select</span> Student.* <span class="keyword">from</span> Student,SC</span><br><span class="line"><span class="keyword">where</span> Student.SID=SC.SID </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> Student.SID,Student.Sname,Student.Sage,Student.Ssex <span class="keyword">having</span> <span class="keyword">count</span>(CID) &lt; (<span class="keyword">select</span> <span class="keyword">count</span>(CID) <span class="keyword">from</span> Course);</span><br><span class="line"><span class="comment">-- 2</span></span><br><span class="line"><span class="keyword">select</span> Student.* <span class="keyword">from</span> Student</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> SC <span class="keyword">on</span> Student.SID=SC.SID</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> Student.SID,Student.Sname,Student.Sage,Student.Ssex <span class="keyword">having</span> <span class="keyword">count</span>(CID)&lt;(<span class="keyword">select</span> <span class="keyword">count</span>(CID) <span class="keyword">from</span> Course);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> Student</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> SC <span class="keyword">on</span> Student.SID=SC.SID</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Course <span class="keyword">on</span> SC.CID=Course.CID</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Student.SID;</span><br></pre></td></tr></table></figure></li>
<li>查询至少有一门课与学号为”01”的同学所学相同的同学的信息.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+---------------------+------+</span><br><span class="line">| SID  | Sname | Sage                | Ssex |</span><br><span class="line">+------+-------+---------------------+------+</span><br><span class="line">| 02   | 钱电  | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风  | 1990-05-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云  | 1990-08-06 00:00:00 | 男   |</span><br><span class="line">| 05   | 周梅  | 1991-12-01 00:00:00 | 女   |</span><br><span class="line">| 06   | 吴兰  | 1992-03-01 00:00:00 | 女   |</span><br><span class="line">| 07   | 郑竹  | 1989-07-01 00:00:00 | 女   |</span><br><span class="line">+------+-------+---------------------+------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> Student.*</span><br><span class="line"><span class="keyword">from</span> Student, SC</span><br><span class="line"><span class="keyword">where</span> Student.SID=SC.SID <span class="keyword">and</span> SC.CID <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> CID <span class="keyword">from</span> SC <span class="keyword">where</span> SC.SID=<span class="string">'01'</span></span><br><span class="line">) <span class="keyword">and</span> Student.SID!=<span class="string">'01'</span>;</span><br></pre></td></tr></table></figure></li>
<li>查询没学过”张三”老师讲授的任一门课程的学生姓名.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+</span><br><span class="line">| SID  | Sname |</span><br><span class="line">+------+-------+</span><br><span class="line">| 06   | 吴兰  |</span><br><span class="line">| 08   | 王菊  |</span><br><span class="line">+------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> Student.SID,Student.Sname <span class="keyword">from</span> Student <span class="keyword">where</span> Student.SID <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> SC.SID <span class="keyword">from</span> SC,Course,Teacher <span class="keyword">where</span> SC.CID=Course.CID <span class="keyword">and</span> Course.TID=Teacher.TID <span class="keyword">and</span> Teacher.Tname=<span class="string">"张三"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> Student.SID;</span><br></pre></td></tr></table></figure></li>
<li>查询和”01”号的同学学习的课程完全相同的其他同学的信息.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+---------------------+------+</span><br><span class="line">| SID  | Sname | Sage                | Ssex |</span><br><span class="line">+------+-------+---------------------+------+</span><br><span class="line">| 02   | 钱电  | 1990-12-21 00:00:00 | 男   |</span><br><span class="line">| 03   | 孙风  | 1990-05-20 00:00:00 | 男   |</span><br><span class="line">| 04   | 李云  | 1990-08-06 00:00:00 | 男   |</span><br><span class="line">+------+-------+---------------------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 这个只是按数量算...</span></span><br><span class="line"><span class="keyword">select</span> Student.* <span class="keyword">from</span> Student <span class="keyword">where</span> <span class="keyword">SID</span> <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> SC.SID <span class="keyword">from</span> SC <span class="keyword">where</span> <span class="keyword">SID</span>!=<span class="string">'01'</span> <span class="keyword">and</span> SC.CID <span class="keyword">in</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">distinct</span> CID <span class="keyword">from</span> SC <span class="keyword">where</span> <span class="keyword">SID</span>=<span class="string">'01'</span></span><br><span class="line">    ) <span class="keyword">group</span> <span class="keyword">by</span> SC.SID <span class="keyword">having</span> <span class="keyword">count</span>(<span class="number">1</span>)=(<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> SC <span class="keyword">where</span> <span class="keyword">SID</span>=<span class="string">'01'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li>查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+-----------+</span><br><span class="line">| SID  | Sname | avg_score |</span><br><span class="line">+------+-------+-----------+</span><br><span class="line">| 04   | 李云  |     33.33 |</span><br><span class="line">| 06   | 吴兰  |     32.50 |</span><br><span class="line">+------+-------+-----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- group by(分组)having(条件) 用法.</span></span><br><span class="line"><span class="comment">--  select Ssex from Student group by Ssex having Ssex!='男';</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">SID</span> <span class="keyword">from</span> SC <span class="keyword">where</span> score &lt; <span class="number">60</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">SID</span> <span class="keyword">having</span> <span class="keyword">count</span>(<span class="number">1</span>) &gt;= <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> Student.SID, Student.Sname, <span class="keyword">cast</span>(<span class="keyword">avg</span>(score) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">10</span>, <span class="number">2</span>)) avg_score <span class="keyword">from</span> Student, SC</span><br><span class="line"><span class="keyword">where</span> Student.SID=SC.SID <span class="keyword">and</span> Student.SID <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">SID</span> <span class="keyword">from</span> SC <span class="keyword">where</span> score&lt;<span class="number">60</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">SID</span> <span class="keyword">having</span> <span class="keyword">count</span>(<span class="number">1</span>)&gt;=<span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> Student.SID,Student.Sname;</span><br></pre></td></tr></table></figure></li>
<li>检索”01”课程分数小于60，按分数降序排列的学生信息.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+-------+---------------------+------+-------+------+</span><br><span class="line">| SID  | Sname | Sage                | Ssex | score | CID  |</span><br><span class="line">+------+-------+---------------------+------+-------+------+</span><br><span class="line">| 04   | 李云  | 1990-08-06 00:00:00 | 男   |  50.0 | 01   |</span><br><span class="line">| 06   | 吴兰  | 1992-03-01 00:00:00 | 女   |  34.0 | 03   |</span><br><span class="line">| 06   | 吴兰  | 1992-03-01 00:00:00 | 女   |  31.0 | 01   |</span><br><span class="line">| 04   | 李云  | 1990-08-06 00:00:00 | 男   |  30.0 | 02   |</span><br><span class="line">| 04   | 李云  | 1990-08-06 00:00:00 | 男   |  20.0 | 03   |</span><br><span class="line">+------+-------+---------------------+------+-------+------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> Student.*,SC.score,Course.CID <span class="keyword">from</span> Student,SC,Course <span class="keyword">where</span> Student.SID=SC.SID <span class="keyword">and</span> SC.CID=Course.CID <span class="keyword">and</span> Student.SID <span class="keyword">in</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">SID</span> <span class="keyword">from</span> SC,Course <span class="keyword">where</span> SC.CID=Course.CID <span class="keyword">and</span> SC.score&lt;<span class="number">60</span> <span class="keyword">and</span> Course.CID=<span class="string">'01'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> SC.score <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure></li>
<li>按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------+------+------+------+------+--------+</span><br><span class="line">| 学号 | 姓名 | 语文 | 数学 | 英语 | 平均分 |</span><br><span class="line">+------+------+------+------+------+--------+</span><br><span class="line">| 07   | 郑竹 | NULL | 89.0 | 98.0 |  93.50 |</span><br><span class="line">| 01   | 赵雷 | 80.0 | 90.0 | 99.0 |  89.67 |</span><br><span class="line">| 05   | 周梅 | 76.0 | 87.0 | NULL |  81.50 |</span><br><span class="line">| 03   | 孙风 | 80.0 | 80.0 | 80.0 |  80.00 |</span><br><span class="line">| 02   | 钱电 | 70.0 | 60.0 | 80.0 |  70.00 |</span><br><span class="line">| 04   | 李云 | 50.0 | 30.0 | 20.0 |  33.33 |</span><br><span class="line">| 06   | 吴兰 | 31.0 | NULL | 34.0 |  32.50 |</span><br><span class="line">| 08   | 王菊 | NULL | NULL | NULL |   NULL |</span><br><span class="line">+------+------+------+------+------+--------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 列转行</span></span><br><span class="line"><span class="keyword">select</span> a.SID 学号,a.Sname 姓名,</span><br><span class="line"><span class="keyword">max</span>(<span class="keyword">case</span> c.Cname <span class="keyword">when</span> <span class="string">'语文'</span> <span class="keyword">then</span> b.score <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) 语文,</span><br><span class="line"><span class="keyword">max</span>(<span class="keyword">case</span> c.Cname <span class="keyword">when</span> <span class="string">'数学'</span> <span class="keyword">then</span> b.score <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) 数学,</span><br><span class="line"><span class="keyword">max</span>(<span class="keyword">case</span> c.Cname <span class="keyword">when</span> <span class="string">'英语'</span> <span class="keyword">then</span> b.score <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span>) 英语,</span><br><span class="line"><span class="keyword">cast</span>(<span class="keyword">avg</span>(b.score) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">18</span>, <span class="number">2</span>)) 平均分</span><br><span class="line"><span class="keyword">from</span> student a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> SC b <span class="keyword">on</span> a.SID=b.SID</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Course c <span class="keyword">on</span> b.CID=c.CID</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.SID, a.Sname</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 平均分 <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure></li>
<li>查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率</li>
</ol>
<p>–及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90.<br>结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+----------+----------+--------+--------+--------+--------+--------+--------+--------+</span><br><span class="line">| 课程编号 | 课程名称 | 最高分 | 最低分 | 平均分 | 及格率 | 中等率 | 优良率 | 优秀率 |</span><br><span class="line">+----------+----------+--------+--------+--------+--------+--------+--------+--------+</span><br><span class="line">| 01       | 语文     |   80.0 |   31.0 |  64.50 |  66.67 |  33.33 |  33.33 |   0.00 |</span><br><span class="line">| 02       | 数学     |   90.0 |   30.0 |  72.67 |  83.33 |   0.00 |  50.00 |  16.67 |</span><br><span class="line">| 03       | 英语     |   99.0 |   20.0 |  68.50 |  66.67 |   0.00 |  33.33 |  33.33 |</span><br><span class="line">+----------+----------+--------+--------+--------+--------+--------+--------+--------+</span><br><span class="line">3 rows in set (0.07 sec)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">select</span> m.CID 课程编号,m.Cname 课程名称,<span class="keyword">max</span>(n.score) 最高分,<span class="keyword">min</span>(n.score) 最低分,</span><br><span class="line"><span class="keyword">cast</span>(<span class="keyword">avg</span>(n.score) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">18</span>,<span class="number">2</span>)) 平均分,</span><br><span class="line"><span class="keyword">cast</span>((<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> sc <span class="keyword">where</span> CID=m.CID <span class="keyword">and</span> score&gt;=<span class="number">60</span>)*<span class="number">100.0</span>/(<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> sc <span class="keyword">where</span> CID=m.CID) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">18</span>, <span class="number">2</span>)) 及格率,</span><br><span class="line"><span class="keyword">cast</span>((<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> sc <span class="keyword">where</span> CID = m.CID <span class="keyword">and</span> score &gt;= <span class="number">70</span> <span class="keyword">and</span> score &lt; <span class="number">80</span> )*<span class="number">100.0</span> / (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> sc <span class="keyword">where</span> CID = m.CID) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">18</span>,<span class="number">2</span>))  中等率 ,</span><br><span class="line"><span class="keyword">cast</span>((<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> sc <span class="keyword">where</span> CID = m.CID <span class="keyword">and</span> score &gt;= <span class="number">80</span> <span class="keyword">and</span> score &lt; <span class="number">90</span> )*<span class="number">100.0</span> / (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> sc <span class="keyword">where</span> CID = m.CID) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">18</span>,<span class="number">2</span>))  优良率 ,</span><br><span class="line"><span class="keyword">cast</span>((<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> sc <span class="keyword">where</span> CID = m.CID <span class="keyword">and</span> score &gt;= <span class="number">90</span>)*<span class="number">100.0</span> / (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> sc <span class="keyword">where</span> CID = m.CID) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">18</span>,<span class="number">2</span>))  优秀率 </span><br><span class="line"><span class="keyword">from</span> course m,sc n</span><br><span class="line"><span class="keyword">where</span> m.CID=n.CID</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> m.CID,m.Cname</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> m.CID;</span><br><span class="line"><span class="comment">-- 2</span></span><br><span class="line"><span class="keyword">select</span> m.CID  课程编号 , m.Cname  课程名称 , </span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">max</span>(score) <span class="keyword">from</span> SC <span class="keyword">where</span> CID = m.CID)  最高分 ,</span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">min</span>(score) <span class="keyword">from</span> SC <span class="keyword">where</span> CID = m.CID)  最低分 ,</span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">cast</span>(<span class="keyword">avg</span>(score) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">18</span>,<span class="number">2</span>)) <span class="keyword">from</span> SC <span class="keyword">where</span> CID = m.CID)  平均分 ,</span><br><span class="line"><span class="keyword">cast</span>((<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> SC <span class="keyword">where</span> CID = m.CID <span class="keyword">and</span> score &gt;= <span class="number">60</span>)*<span class="number">100.0</span> / (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> SC <span class="keyword">where</span> CID = m.CID) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">18</span>,<span class="number">2</span>))  及格率,</span><br><span class="line"><span class="keyword">cast</span>((<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> SC <span class="keyword">where</span> CID = m.CID <span class="keyword">and</span> score &gt;= <span class="number">70</span> <span class="keyword">and</span> score &lt; <span class="number">80</span> )*<span class="number">100.0</span> / (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> SC <span class="keyword">where</span> CID = m.CID) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">18</span>,<span class="number">2</span>))  中等率 ,</span><br><span class="line"><span class="keyword">cast</span>((<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> SC <span class="keyword">where</span> CID = m.CID <span class="keyword">and</span> score &gt;= <span class="number">80</span> <span class="keyword">and</span> score &lt; <span class="number">90</span> )*<span class="number">100.0</span> / (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> SC <span class="keyword">where</span> CID = m.CID) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">18</span>,<span class="number">2</span>))  优良率 ,</span><br><span class="line"><span class="keyword">cast</span>((<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> SC <span class="keyword">where</span> CID = m.CID <span class="keyword">and</span> score &gt;= <span class="number">90</span>)*<span class="number">100.0</span> / (<span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> SC <span class="keyword">where</span> CID = m.CID) <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">18</span>,<span class="number">2</span>))  优秀率</span><br><span class="line"><span class="keyword">from</span> Course m </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> m.CID;</span><br></pre></td></tr></table></figure>
<hr>
<p>我实在是太难了…………<br>16. 按各科成绩进行排序，并显示排名.</p>
<ul>
<li>Score重复时保留名次空缺.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--- emmm</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>Score重复时合并名次(DENSE_RANK完成).<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">&#96;&#96;&#96;sql</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="17">
<li>查询学生的总成绩并进行排名.</li>
</ol>
<ul>
<li>查询学生的总成绩.<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">&#96;&#96;&#96;sql</span><br></pre></td></tr></table></figure></li>
<li>查询学生的总成绩并进行排名，sql 2000用子查询完成，分总分重复时保留名次空缺和不保留名次空缺两种。<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">&#96;&#96;&#96;sql</span><br></pre></td></tr></table></figure></li>
<li>查询学生的总成绩并进行排名，sql 2005用rank,DENSE_RANK完成，分总分重复时保留名次空缺和不保留名次空缺两种。<br>结果:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">&#96;&#96;&#96;sql</span><br></pre></td></tr></table></figure>
未完待续~</li>
</ul>
]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程检测死锁</title>
    <url>/2019/08/10/Java%E7%BA%BF%E7%A8%8B%E6%A3%80%E6%B5%8B%E6%AD%BB%E9%94%81/</url>
    <content><![CDATA[<hr>
<p>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p>
<p>Java线程中我们构造两个相互等待对方释放资源的线程就构成了死锁。</p>
<a id="more"></a>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockSimulation</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String A = <span class="string">"a"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String B = <span class="string">"b"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> DeadLockSimulation().deadLock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deadLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"t1"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (B) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (A) &#123;</span><br><span class="line">                        System.out.println(<span class="string">"t2"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行上边的代码产生死锁。<code>JDK</code>自带的工具有<code>jconsole</code>、<code>jvisualvm</code>、<code>jstack</code>等。</p>
<h2 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h2><p>运行<code>jvisualvm</code>如下：</p>
<p><img data-src="https://i.loli.net/2019/09/24/vKgWpnUO8Je7uwE.png" alt=""></p>
<p>发现提示检测到死锁。</p>
<h2 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h2><p>查看进程号：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps // 查看Java任务进程号</span><br><span class="line">2784 Jps</span><br><span class="line">8672 Main</span><br><span class="line">18068 Launcher</span><br><span class="line">12520 KotlinCompileDaemon</span><br><span class="line">16776 DeadLockSimulation</span><br><span class="line">9576</span><br><span class="line">16668 RemoteMavenServer</span><br></pre></td></tr></table></figure>

<p>运行jstack。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jstack [进程号] // 查看当前进程堆栈</span><br><span class="line"></span><br><span class="line">Found one Java-level deadlock:                                                                           </span><br><span class="line">=============================                                                                            </span><br><span class="line">"Thread-0":                                                                           </span><br><span class="line">  waiting to lock monitor 0x0000012f11b53e80 (object 0x0000000741d763e8, a java.lang.String),            </span><br><span class="line">  which is held by "Thread-1"                                                        </span><br><span class="line">"Thread-1":                                                          </span><br><span class="line">  waiting to lock monitor 0x0000012f11b51e80 (object 0x0000000741d76400, a java.lang.String),            </span><br><span class="line">  which is held by "Thread-0"                                                        </span><br><span class="line">Java stack information for the threads listed above:                                                     </span><br><span class="line">===================================================                                   </span><br><span class="line">"Thread-0":                                                                                              </span><br><span class="line">        at com.lin.juc.mydesign.DeadLockSimulation$1.run(DeadLockSimulation.java:28)                     </span><br><span class="line">        - waiting to lock &lt;0x0000000741d763e8&gt; (a java.lang.String)                                      </span><br><span class="line">        - locked &lt;0x0000000741d76400&gt; (a java.lang.String)                                               </span><br><span class="line">        at java.lang.Thread.run(java.base@11.0.1/Thread.java:834)                                        </span><br><span class="line">"Thread-1":                                                                          </span><br><span class="line">        at com.lin.juc.mydesign.DeadLockSimulation$2.run(DeadLockSimulation.java:39)                     </span><br><span class="line">        - waiting to lock &lt;0x0000000741d76400&gt; (a java.lang.String)                  </span><br><span class="line">        - locked &lt;0x0000000741d763e8&gt; (a java.lang.String)                           </span><br><span class="line">        at java.lang.Thread.run(java.base@11.0.1/Thread.java:834)                   </span><br><span class="line">Found 1 deadlock.</span><br></pre></td></tr></table></figure>
<h2 id="MXBean"><a href="#MXBean" class="headerlink" title="MXBean"></a>MXBean</h2><p><code>MXBean</code>是<code>JDK</code>自带的用于扫描程序是否存在死锁包， 但是扫描的过程中存在性能损耗。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScanDeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scanDeadLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadMXBean mxBean = ManagementFactory.getThreadMXBean();</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            <span class="keyword">long</span>[] ids = mxBean.findDeadlockedThreads();</span><br><span class="line">            System.out.println(<span class="string">"扫描死锁..."</span>);</span><br><span class="line">            <span class="keyword">if</span> (ids != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ThreadInfo[] threadInfos = mxBean.getThreadInfo(ids);</span><br><span class="line">                <span class="keyword">for</span> (ThreadInfo info : threadInfos) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"info = "</span> + info);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ExecutorService executorService = Executors.newScheduledThreadPool(<span class="number">4</span>);</span><br><span class="line">        executorService.execute(runnable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h2><ul>
<li>避免一个线程同时获取多个锁。</li>
<li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。</li>
<li>尝试使用定时锁，使用lock.tryLock（timeout）来替代使用内部锁机制。</li>
<li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>notes</tag>
        <tag>Lock</tag>
      </tags>
  </entry>
  <entry>
    <title>Java两个线程之间共享数据</title>
    <url>/2019/07/01/Java%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<hr>
<p>Java里面进行多线程通信的主要方式就是共享内存的方式，共享内存主要的关注点有两个：<strong>可见性</strong>和<strong>有序性原子性</strong>。</p>
<p>Java 内存模型（JMM）解决了可见性和有序性的问题，而锁解决了原子性的问题，理想情况下我们希望做到“同步”和“互斥”。</p>
<a id="more"></a>
<p>有以下常规实现方法：</p>
<p> 一、数据抽象成一个类，对数据操作的方法封装在类里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyData1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyData1 data = <span class="keyword">new</span> MyData1();</span><br><span class="line">        AddRunnable addRunnable = <span class="keyword">new</span> AddRunnable(data);</span><br><span class="line">        DecRunnable decRunnable = <span class="keyword">new</span> DecRunnable(data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(addRunnable).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(decRunnable).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        j++;</span><br><span class="line">        System.out.println(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">" j为："</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        j--;</span><br><span class="line">        System.out.println(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">" j为："</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    MyData1 data1 = <span class="keyword">new</span> MyData1();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddRunnable</span><span class="params">(MyData1 data1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data1 = data1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        data1.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    MyData1 data1 = <span class="keyword">new</span> MyData1();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DecRunnable</span><span class="params">(MyData1 data1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data1 = data1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        data1.dec();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二、Runnable对象作为一个类的内部类，共享数据作为这个类的内部变量，每个线程对类的操作封装在外部类中，从而实现各个数据之间的互斥和同步，内部类的各个Runnable对象都可以调用外部方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyData2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        j++;</span><br><span class="line">        System.out.println(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">" j为："</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">dec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        j--;</span><br><span class="line">        System.out.println(<span class="string">"线程："</span> + Thread.currentThread().getName() + <span class="string">" j为："</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> MyData2 data = <span class="keyword">new</span> MyData2();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    data.add();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    data.dec();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础复习（一）</title>
    <url>/2019/05/01/Java%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<hr>
<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="面向对象六原则一法则"><a href="#面向对象六原则一法则" class="headerlink" title="面向对象六原则一法则"></a>面向对象六原则一法则</h3><h4 id="单一职责原则（Single-Resposibility-Principle）"><a href="#单一职责原则（Single-Resposibility-Principle）" class="headerlink" title="单一职责原则（Single-Resposibility Principle）"></a>单一职责原则（Single-Resposibility Principle）</h4><p>一个类只做它该做的事情。（单一职责原则想表达的就是”高内聚”，写代码最终极的原则只有六个字”高内聚、低耦合”，所谓的高内聚就是一个代码模块只完成一项功能，在面向对象中，如果只让一个类完成它该做的事，而不涉及与它无关的领域就是践行了高内聚的原则，这个类就只有单一职责。另一个是模块化一个好的软件系统，它里面的每个功能模块也应该是可以轻易的拿到其他系统中使用的，这样才能实现软件复用的目标。）。</p>
<h4 id="开放封闭原则（Open-Closed-principle）"><a href="#开放封闭原则（Open-Closed-principle）" class="headerlink" title="开放封闭原则（Open-Closed principle）"></a>开放封闭原则（Open-Closed principle）</h4><p>软件实体应当对扩展开放，对修改关闭。（在理想的状态下，当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类就可以，不需要修改原来的任何一行代码。要做到开闭有两个要点：1. 抽象是关键，一个系统中如果没有抽象类或接口系统就没有扩展点；2. 封装可变性，将系统中的各种可变因素封装到一个继承结构中，如果多个可变因素混杂在一起，系统将变得复杂而换乱，如果不清楚如何封装可变性）</p>
<h4 id="Liskov替换原则（Liskov-Substituion-Principle）"><a href="#Liskov替换原则（Liskov-Substituion-Principle）" class="headerlink" title="Liskov替换原则（Liskov-Substituion Principle）"></a>Liskov替换原则（Liskov-Substituion Principle）</h4><p>里氏替换原则，任何时候都可以用子类型替换掉父类型。（关于里氏替换原则的描述，Barbara Liskov女士的描述比这个要复杂得多，但简单的说就是能用父类型的地方就一定能使用子类型。里氏替换原则可以检查继承关系是否合理，如果一个继承关系违背了里氏替换原则，那么这个继承关系一定是错误的，需要对代码进行重构。例如让猫继承狗，或者狗继承猫，又或者让正方形继承长方形都是错误的继承关系，因为你很容易找到违反里氏替换原则的场景。需要注意的是：子类一定是增加父类的能力而不是减少父类的能力，因为子类比父类的能力更多，把能力多的对象当成能力少的对象来用当然没有任何问题。）代表约定、代表角色，能否正确的使用接口一定是编程水平高低的重要标识。）</p>
<h4 id="依赖倒置原则（Dependecy-Inversion-Principle）"><a href="#依赖倒置原则（Dependecy-Inversion-Principle）" class="headerlink" title="依赖倒置原则（Dependecy-Inversion Principle）"></a>依赖倒置原则（Dependecy-Inversion Principle）</h4><p>面向接口编程。（该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代，请参考下面的里氏替换原则。）</p>
<h4 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface-Segregation Principle）"></a>接口隔离原则（Interface-Segregation Principle）</h4><p>接口要小而专，绝不能大而全。（臃肿的接口是对接口的污染，既然接口表示能力，那么一个接口只应该描述一种能力，接口也应该是高度内聚的。例如，琴棋书画就应该分别设计为四个接口，而不应设计成一个接口中的四个方法，因为如果设计成一个接口中的四个方法，那么这个接口很难用，毕竟琴棋书画四样都精通的人还是少数，而如果设计成四个接口，会几项就实现几个接口，这样的话每个接口被复用的可能性是很高的。Java中的接口代表能力、 分离的手段主要有以下两种：1. 委托分离，通过增加一个新的类型来委托客户的请求，隔离客户和接口的直接依赖，但是会增加系统的开销。2. 多重继承分离，通过接口多继承来实现客户的需求，这种方式是较好的。</p>
<h4 id="合成聚合复用原则"><a href="#合成聚合复用原则" class="headerlink" title="合成聚合复用原则"></a>合成聚合复用原则</h4><p>优先使用聚合或合成关系复用代码。（通过继承来复用代码是面向对象程序设计中被滥用得最多的东西，因为所有的教科书都无一例外的对继承进行了鼓吹从而误导了初学者，类与类之间简单的说有三种关系，Is-A关系、Has-A关系、Use-A关系，分别代表继承、关联和依赖。其中，关联关系根据其关联的强度又可以进一步划分为关联、聚合和合成，但说白了都是Has-A关系，合成聚合复用原则想表达的是优先考虑Has-A关系而不是Is-A关系复用代码，原因嘛可以自己从百度上找到一万个理由，需要说明的是，即使在Java的API中也有不少滥用继承的例子，例如Properties类继承了Hashtable类，Stack类继承了Vector类，这些继承明显就是错误的，更好的做法是在Properties类中放置一个Hashtable类型的成员并且将其键和值都设置为字符串来存储数据，而Stack类的设计也应该是在Stack类中放一个Vector对象来存储数据。记住：任何时候都不要继承工具类，工具是可以拥有并可以使用的，而不是拿来继承的。）</p>
<h4 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h4><p>迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。再复杂的系统都可以为用户提供一个简单的门面，Java Web开发中作为前端控制器的Servlet或Filter不就是一个门面吗，浏览器对服务器的运作方式一无所知，但是通过前端控制器就能够根据你的请求得到相应的服务。调停者模式也可以举一个简单的例子来说明，例如一台计算机，CPU、内存、硬盘、显卡、声卡各种设备需要相互配合才能很好的工作，但是如果这些东西都直接连接到一起，计算机的布线将异常复杂，在这种情况下，主板作为一个调停者的身份出现，它将各个设备连接在一起而不需要每个设备之间直接交换数据，这样就减小了系统的耦合度和复杂度。</p>
<h3 id="Java如何实现的平台无关"><a href="#Java如何实现的平台无关" class="headerlink" title="Java如何实现的平台无关"></a>Java如何实现的平台无关</h3><ul>
<li>Java语言规范<ul>
<li>通过规定Java语言中基本数据类型的取值范围和行为</li>
</ul>
</li>
<li>Class文件<ul>
<li>所有Java文件要编译成统一的Class文件</li>
</ul>
</li>
<li>Java虚拟机<ul>
<li>通过Java虚拟机将Class文件转成对应平台的二进制文件等</li>
</ul>
</li>
</ul>
<p>JVM支持哪些语言（Kotlin、Groovy、JRuby、Jython、Scala）</p>
<h3 id="值传递、引用传递"><a href="#值传递、引用传递" class="headerlink" title="值传递、引用传递"></a>值传递、引用传递</h3><p>Java中只有值传递</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        Integer b = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        swap(a, b);</span><br><span class="line">        System.out.println(String.format(<span class="string">"a:%d    b:%d"</span>, a, b));</span><br><span class="line">        swap(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对于对象而言传递的是对象引用的地址作为值</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, Integer b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">996</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">OutPut:</span></span><br><span class="line"><span class="comment">a:10    b:20</span></span><br><span class="line"><span class="comment">[996, 2]</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>值传递（pass by value）是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</li>
<li>引用传递（pass by reference）是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。<a id="more"></a>

</li>
</ul>
<h3 id="成员变量和方法作用域"><a href="#成员变量和方法作用域" class="headerlink" title="成员变量和方法作用域"></a>成员变量和方法作用域</h3><table>
<thead>
<tr>
<th align="center">作用域</th>
<th align="center">当前类</th>
<th align="center">同package</th>
<th align="center">子孙类</th>
<th align="center">不同package</th>
</tr>
</thead>
<tbody><tr>
<td align="center">public</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
</tr>
<tr>
<td align="center">protected</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">fridendly(默认)</td>
<td align="center">√</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
<tr>
<td align="center">private</td>
<td align="center">√</td>
<td align="center">×</td>
<td align="center">×</td>
<td align="center">×</td>
</tr>
</tbody></table>
<p>例子：protected在其子类中可以访问，无论是子类内部还是子类的实例，无论它们是在哪个包中, 但如果子类与父类不在同一个包中，在子类中用父类的实例去访问的话不可以。</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>public</td>
<td>可以被任何类访问</td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>可以被同一包中的所有类访问</td>
<td>子类没有在同一包中也可以访问</td>
</tr>
<tr>
<td>private</td>
<td>只能够被 当前类的方法访问</td>
<td></td>
</tr>
<tr>
<td>缺省无访问修饰符</td>
<td>只能够被 当前类的方法访问</td>
<td>如果子类没有在同一个包中，也不能访问</td>
</tr>
</tbody></table>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>八种基本数据类型：整型（byte8、short16、int32、long64)、浮点型（float32、double63）、布尔型（boolean8）、字符型（char16）。</p>
<p>自动转换顺序<br>从低到高的顺序转换。不同类型数据间的优先关系如下：<br>低———————————————&gt;高<br>byte,short,char-&gt; int -&gt; long -&gt; float -&gt; double</p>
<p>“ <strong>除了long和double类型</strong>，Java基本数据类型都是的简单读写都是原子的，而简单读写就是赋值和return语句。”因此而对于其他自加自减以及其他运算操作，是非原子操作。基本类型的数据对于其他线程来说不能保证是最新修改值，因此，声明为volative可以保证可视性。</p>
<p>对于32位操作系统来说，单次操作能处理的最长长度为32bit，而long类型8字节64bit，所以对long的读写都要两条指令才能完成（即每次读写64bit中的32bit）。如果JVM要保证long和double读写的原子性，势必要做额外的处理。不加volatile的话 ，并发情况下针对某个元素的访问可能出现脏读(cpu cache导致的)，单纯的替换如果允许脏读的话 ，可以不加这些修饰符 ，如果涉及到非幂等操作 ，还是要用同步修饰符。</p>
<h3 id="Integer的缓存机制"><a href="#Integer的缓存机制" class="headerlink" title="Integer的缓存机制"></a>Integer的缓存机制</h3><p>缓存支持-128到127之间的自动装箱过程。最大值127可以通过-XX:AutoBoxCacheMax=size修改。 缓存通过一个for循环实现。从低到高并创建尽可能多的整数并存储在一个整数数组中。这个缓存会在Integer类第一次被使用的时候被初始化出来。以后，就可以使用缓存中包含的实例对象，而不是创建一个新的实例(在自动装箱的情况下)。Java 5范围是固定的-128 至 +127。Java 6中，可以通过java.lang.Integer.IntegerCache.high设置最大值。根据应用程序的实际情况灵活地调整来提高性能。到底是什么原因选择这个-128到127范围呢？</p>
<p>Byte, Short, Long有固定范围: -128 到 127。对于Character, 范围是 0 到 127。除了Integer以外，这个范围都不能改变。</p>
<h3 id="字符串的不可变性"><a href="#字符串的不可变性" class="headerlink" title="字符串的不可变性"></a>字符串的不可变性</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">"asd"</span>;<span class="comment">//s1保存String对象的引用</span></span><br><span class="line">String s2 = s1;<span class="comment">//s2保存为s1的引用</span></span><br><span class="line">s1 = s1.replace(<span class="string">"a"</span>, <span class="string">"asd"</span>);<span class="comment">//保存新创建对象的引用</span></span><br></pre></td></tr></table></figure>
<p>repalce源码，每次都产生一个新的String对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> oldChar, <span class="keyword">char</span> newChar)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (oldChar != newChar) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = value.length;</span><br><span class="line">            <span class="keyword">int</span> i = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">char</span>[] val = value; <span class="comment">/* avoid getfield opcode */</span></span><br><span class="line">            <span class="keyword">while</span> (++i &lt; len) &#123;</span><br><span class="line">                <span class="keyword">if</span> (val[i] == oldChar) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; len) &#123;</span><br><span class="line">                <span class="keyword">char</span> buf[] = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                    buf[j] = val[j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">                    <span class="keyword">char</span> c = val[i];</span><br><span class="line">                    buf[i] = (c == oldChar) ? newChar : c;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> String(buf, <span class="keyword">true</span>);<span class="comment">//构造新的String对象</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="String拼接"><a href="#String拼接" class="headerlink" title="String拼接"></a>String拼接</h3><p><code>String s = &quot;a&quot; + &quot;b&quot;</code>，编译器会进行常量折叠(因为两个都是编译期常量，编译期可知)，即变成 String s = “ab”。</p>
<p>对于能够进行优化的(String s = “a” + 变量 等)底层是StringBuilder 的 append() 方法替代，最后调用 toString() 方法 (底层就是一个 new String())，Java本身是不支持运算符重载的。</p>
<p>对于Java的字符串拼接从效率比较：</p>
<p>StringBuilder&gt;StringBuffer（synchronized）&gt;concat&gt;+&gt;StringUtils.join</p>
<h3 id="Arrays-asList获得的List使用时需要注意什么"><a href="#Arrays-asList获得的List使用时需要注意什么" class="headerlink" title="Arrays.asList获得的List使用时需要注意什么"></a>Arrays.asList获得的List使用时需要注意什么</h3><ol>
<li>asList 得到的只是一个 Arrays 的内部类，一个原来数组的视图 List，因此如果对它进行增删操作会报错</li>
<li>用 ArrayList 的构造器可以将其转变成真正的 ArrayList</li>
</ol>
<h3 id="fail-fast和fail-safe"><a href="#fail-fast和fail-safe" class="headerlink" title="fail-fast和fail-safe"></a>fail-fast和fail-safe</h3><p>Java集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生 fail-fast 机制。记住是有可能，而不是一定。例如：假设存在两个线程（线程 1、线程2），线程 1 通过 Iterator 在遍历集合 A 中的元素，在某个时候线程 2 修改了集合 A 的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 ConcurrentModificationException 异常。</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; fruits = <span class="keyword">new</span> ArrayList&lt;String&gt;() &#123;&#123;</span><br><span class="line">    add(<span class="string">"apple"</span>);</span><br><span class="line">    add(<span class="string">"orange"</span>);</span><br><span class="line">    add(<span class="string">"orange"</span>);</span><br><span class="line">    add(<span class="string">"chestnut"</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String fruit : fruits) &#123;</span><br><span class="line">    <span class="keyword">if</span> (fruit.equals(<span class="string">"orange"</span>)) &#123;</span><br><span class="line">        fruits.remove(fruit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(fruits.toString());</span><br></pre></td></tr></table></figure>
<p>代码抛出CMException异常，在增强for循环中，集合遍历是通过iterator进行的，但是元素的add/remove却是直接使用的集合类自己的方法。这就导致iterator在遍历的时候，会发现有一个元素在自己不知不觉的情况下就被删除/添加了，就会抛出一个异常，用来提示用户，可能发生了并发修改。</p>
<p>java.util.concurrent包下的容器都是fail-safe的，可以在多线程下并发使用，并发修改。同时也可以在foreach中进行add/remove 。</p>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; fruits = <span class="keyword">new</span> CopyOnWriteArrayList&lt;String&gt;() &#123;&#123;</span><br><span class="line">    add(<span class="string">"apple"</span>);</span><br><span class="line">    add(<span class="string">"orange"</span>);</span><br><span class="line">    add(<span class="string">"orange"</span>);</span><br><span class="line">    add(<span class="string">"chestnut"</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String fruit : fruits) &#123;</span><br><span class="line">    <span class="keyword">if</span> (fruit.equals(<span class="string">"orange"</span>)) &#123;</span><br><span class="line">        fruits.remove(fruit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(fruits.toString());</span><br></pre></td></tr></table></figure>
<p>以上代码，使用CopyOnWriteArrayList代替了ArrayList，就不会发生异常。</p>
<p>fail-safe集合的所有对集合的修改都是先拷贝一份副本，然后在副本集合上进行的，并不是直接对原集合进行修改。并且这些修改方法，如add/remove都是通过加锁来控制并发的。<br>所以，CopyOnWriteArrayList中的迭代器在迭代的过程中不需要做fail-fast的并发检测。（因为fail-fast的主要目的就是识别并发，然后通过异常的方式通知用户）。</p>
<h4 id="Copy-On-Write"><a href="#Copy-On-Write" class="headerlink" title="Copy-On-Write"></a>Copy-On-Write</h4><p>Copy-On-Write简称COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容Copy出去形成一个新的内容然后再改，这是一种延时懒惰策略。</p>
<p>CopyOnWrite容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。</p>
<p>CopyOnWriteArrayList中add/remove等写方法是需要加锁的，目的是为了避免Copy出N个副本出来，导致并发写。读方法未加锁，这样做的好处是我们可以对CopyOnWrite容器进行并发的读，当然，这里读到的数据可能不是最新的。因为写时复制的思想是通过延时更新的策略来实现数据的最终一致性的，并非强一致性。</p>
<p>CopyOnWrite容器是一种读写分离的思想，读和写不同的容器。而Vector在读写的时候使用同一个容器，读写互斥，同时只能做一件事儿。</p>
<p>CopyOnWrite并发容器用于读多写少的并发场景：白名单、黑名单、商品类目的访问和更新场景。</p>
<p>和ArrayList比较，它具有以下特性：</p>
<p>支持高效率并发且是线程安全的 因为通常需要复制整个基础数组，所以可变操作（add()、set() 和 remove() 等等）的开销很大 迭代器支持hasNext(), next()等不可变操作，但不支持可变 remove()等操作 使用迭代器进行遍历的速度很快，并且不会与其他线程发生冲突。在构造迭代器时，迭代器依赖于不变的数组快照</p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>Iterator接口中提供了很多对集合元素迭代的方法。每个集合中都有可以返回迭代器对象的方法iterator()。迭代器在迭代的过程中可以删除底层集合的元素。</p>
<h4 id="Iterator和ListIterator的区别？"><a href="#Iterator和ListIterator的区别？" class="headerlink" title="Iterator和ListIterator的区别？"></a>Iterator和ListIterator的区别？</h4><ul>
<li>Iterator可以用来遍历Set和List集合，但是ListIterator只能遍历List</li>
<li>Iterator对集合只能向前遍历（next()）；而ListIterator可以向前遍历（next()），也可以向后遍历（previous()）</li>
<li>ListIterator实现了Iterator接口</li>
</ul>
<h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><p><img data-src="https://i.loli.net/2019/07/25/5d39ae37ad0cb28695.png" alt="IO"></p>
<h4 id="BIO、NIO和AIO"><a href="#BIO、NIO和AIO" class="headerlink" title="BIO、NIO和AIO"></a>BIO、NIO和AIO</h4><p>— 待续</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.hollischuang.com/archives/3280" target="_blank" rel="noopener">Java工程师成神之路（2019正式版）</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库事务</title>
    <url>/2019/04/10/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<hr>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote>
<p>数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。</p>
</blockquote>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>事务应该具有4个属性：<strong>原子性</strong>、<strong>一致性</strong>、<strong>隔离性</strong>、<strong>持久性</strong>。</p>
<p><strong>原子性</strong>（Atomicity）：数据库事务是一个不可分割的单位。只有事务中所有的数据库操作成功，才算整个事务才算成功。只读操作，保证一致性很简单，一旦出现错误，要么重试，要么返回错误代码。</p>
<p><strong>一致性</strong>（Consistency）：事务将数据库从一种状态转变为下一种一致的状态。事务开始之前和结束之后，数据库的完整性约束没有被破坏。例如，数据操作失败，表中姓名字段在唯一的情况下，撤销之后导致重复，从而破坏了事务的一致性。</p>
<p><strong>隔离性</strong>（Isolation）：别的称呼，并发控制（concurrency control）、可串行化（serialzability）、锁（locking）等。事务隔离性要求每个读写事务对其他事务的操作对象能实现相互分离，即事务提交之前对其他事务不可见，通常使用锁实现。</p>
<p><strong>持久性</strong>（Durability）：事务一旦提交结果是永久性的，发生宕机等事故，数据库也能将数据恢复。持久性事务保证的是高可靠性，而不是高可用性，事务本身不能完成，需要系统共同配合来实现。</p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>扁平事务、带有保存点的扁平事务、链事务、嵌套事务、分布式事务。</p>
<a id="more"></a>
<h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><ul>
<li>未提交读(Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据</li>
<li>提交读(Read Committed)：只能读取到已经提交的数据。Oracle等多数数据库默认都是该级别 (不重复读)</li>
<li>可重复读(Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB默认级别。在SQL标准中，该隔离级别消除了不可重复读，但是还存在幻象读</li>
<li>串行读(Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞</li>
</ul>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>丢失更新</th>
<th>不可重复读</th>
<th>幻读</th>
<th>并发模型</th>
<th>更新冲突检测</th>
</tr>
</thead>
<tbody><tr>
<td>未提交读：Read Uncommited</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>悲观</td>
<td>×</td>
</tr>
<tr>
<td>已提交读：Read commited</td>
<td>×</td>
<td>×</td>
<td>√</td>
<td>√</td>
<td>悲观</td>
<td>×</td>
</tr>
<tr>
<td>可重复读：Repeatable Read</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>√</td>
<td>悲观</td>
<td>×</td>
</tr>
<tr>
<td>可串行读：Serializable</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>×</td>
<td>悲观</td>
<td>×</td>
</tr>
</tbody></table>
<p>接下来详细解释，假设有下面两个事务同时执行：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>; <span class="comment">-- 事务1</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> table1 (somevaue); <span class="comment">-- 随意写的伪sql</span></span><br><span class="line"><span class="keyword">update</span> table2 <span class="keyword">set</span> aa = aa + <span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span>; <span class="comment">-- 事务2</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> table1; <span class="comment">-- 第一次读count</span></span><br><span class="line"><span class="keyword">select</span> aa <span class="keyword">from</span> table2 <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>; <span class="comment">-- 第一次读aa</span></span><br><span class="line"><span class="comment">-- 假设在这个点 事务1成功提交</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> table1; <span class="comment">-- 第二次读count</span></span><br><span class="line"><span class="keyword">select</span> aa <span class="keyword">from</span> table2 <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">1</span>; <span class="comment">-- 第二次读aa</span></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<p><strong>串行化</strong>不用解释了，依次执行，不会产生冲突。</p>
<p><strong>可重复读</strong>是什么意思呢？ 事务2执行到一半时，事务1 成功提交：</p>
<p>事务2中 第二次读count得到的值和第一次读count得到的值不一样(因为事务1新增了一条数据)，这叫幻读，不隔离新增的数据。<br>事务2中 第一次读aa 和第二次读aa得到的值是一样的，对刚更新的值不可见，隔离已经存在的数据。 可以重复读，读到的数据都是一样的。</p>
<p><strong>读取已提交</strong>是什么意思呢？ 事务2执行到一半时，事务1 成功提交：<br>事务2中 第二次读count得到的值和第一次读count得到的值不一样(因为事务1新增了一条数据)，这叫幻读，不隔离新增的数据。<br>事务2中 第一次读aa 和第二次读aa得到的值是不一样的，对刚提交的值可见，不隔离已经存在的数据。 不可以重复读，读到的数据是不一样的(如果成功修改)。</p>
<p><strong>读取未提交</strong>是什么意思呢？ 事务2执行到一半时，事务1 还未提交：<br>事务2中 第二次读count得到的值和第一次读count得到的值不一样(因为事务1新增了一条数据)，这叫幻读，不隔离新增的数据。<br>事务2中 第一次读aa 和第二次读aa得到的值是不一样的（事务1未提交），对最新版本的值可见，不隔离已经存在的数据。 不可以重复读，读到的数据是不一样的。如果此时事务1因为其他原因回滚了，事务2第二次读到的数据是无意义的，因为修改没有发生(回滚了)，这叫脏读 。</p>
<p>在现实环境中，串行化一般不会被使用，因为性能太低。</p>
<p>如果对一致性有要求，比如转账交易，那么要使用可重复读，并发性能相对较差。 原因是，为了实现可重复读，在对更新记录加锁时，除了使用记录锁，还可能会使用间隙锁锁住区间(看update语句的where条件)，这会增加其他事务等待时间。</p>
<p>如果对一致性要求不高，一般使用读取已提交, 由于不考虑重复读，在加锁时一般只加记录锁，不会使用间隙锁，并发性较好，据说使用的最多。</p>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>事务隔离性由锁实现。原子性、一致性、持久性通过数据库的<code>redo log</code>（重做日志保证原子性和持久性）和<code>undo log</code>（保证一致性）完成。</p>
<p>redo和undo都可视为恢复操作，redo恢复事务提交的页操作，undo回滚到某个特定版本。根据内容分别分为物理日志（页的物理修改操作）和逻辑日志（根据每行进行记录）</p>
<h3 id="事务日志"><a href="#事务日志" class="headerlink" title="事务日志"></a>事务日志</h3><p>数据库通过事务日志来达到这个目标。 事务的每一个操作（增/删/改）产生一条日志，内容组成大概如下：</p>
<ul>
<li>LSN：一个按时间顺序分配的唯一日志序列号，靠后的操作的LSN比靠前的大。</li>
<li>TransID：产生操作的事务ID。</li>
<li>PageID：被修改的数据在磁盘上的位置，数据以页为单位存储。</li>
<li>PrevLSN：同一个事务产生的上一条日志记录的指针。</li>
<li>UNDO：取消本次操作的方法，按照此方法回滚。</li>
<li>REDO：重复本次操作的方法，如有必要，重复此方法保证操作成功。</li>
</ul>
<p><img data-src="https://i.loli.net/2019/07/25/5d3880fd4ae2c60183.png" alt=""></p>
<p>磁盘上每个页（保存数据的，不是保存日志的）都记录着最后一个修改该数据操作的LSN。数据库会通过解析事务日志，将修改真正落到磁盘上(写盘)，随后清理事务日志(正常情况下)。</p>
<p>这也是数据库在保证数据安全和性能这两个点之前的折中办法：</p>
<ul>
<li>如果每次更新都写盘，由于数据是随机的，会造成大量的随机IO，性能会非常差</li>
<li>如果每次更新不马上写盘，那一旦数据库崩溃，数据就会丢失</li>
</ul>
<p>折中的办法就是：</p>
<ul>
<li>将数据的变更以事务日志的方式，按照时间先后追加到日志缓冲区，由特定算法写入事务日志，这是顺序IO，性能较好</li>
<li>通过数据管理器解析事务日志，由特定的算法择机进行写盘</li>
</ul>
<h3 id="数据库恢复"><a href="#数据库恢复" class="headerlink" title="数据库恢复"></a>数据库恢复</h3><p>当数据库从崩溃中恢复时，会有以下几个步骤：</p>
<p>1.解析存在的事务日志，分析哪些事务需要回滚，哪些需要写盘(还没来得及写盘，数据库就崩溃了)。</p>
<p>2.Redo，进行写盘。检测对应数据所在数据页的LSN，如果数据页的LSN&gt;=事务操作的LSN，说明已经写过盘，不然进行写盘操作。</p>
<p>3.Undo, 按照LSN倒序进行回滚</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/43493165" target="_blank" rel="noopener">深入理解数据库事务</a></p>
<p><a href="https://www.jianshu.com/p/eb150b4f7ce0" target="_blank" rel="noopener">我理解的数据库事务</a></p>
]]></content>
      <tags>
        <tag>notes</tag>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式复习</title>
    <url>/2019/04/01/%E9%9D%A2%E8%AF%95-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<hr>
<h2 id="设计模式复习"><a href="#设计模式复习" class="headerlink" title="设计模式复习"></a>设计模式复习</h2><p>23种设计模式主要分为三类：创建型模式、结构型模式、行为型模式。</p>
<h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote>
<p>实现单例模式的思路是：一个类能返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名称）；当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用；同时我们还将该类的构造函数定义为私有方法，这样其他处的代码就无法通过调用该类的构造函数来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例。</p>
</blockquote>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ol>
<li><p>饿汉式 线程安全</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">         <span class="keyword">return</span> instance;  </span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>懒汉式 双向检查锁定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// volatile 多线程安全, 但屏蔽Java虚拟机优化, 效率降低</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 锁定代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用静态内部类实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IoDH 初始化不会失败使用, 延迟加载</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用枚举类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>枚举类反编译之后会被转换成形如public final class T extends Enum的定义。枚举中的各个枚举项通过static来定义。</p>
</li>
</ol>
<p>一个Java类第一次被真正使用到的时候静态资源被初始化、Java类的加载和初始化过程都是线程安全的（因为虚拟机在加载枚举的类的时候，会使用ClassLoader的loadClass方法，而这个方法使用同步代码块保证了线程安全），所以枚举类是线程安全的。</p>
<h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><blockquote>
<p>给某一个对象提供一个代理或占位符，并由代理对象来控制对原对象的访问，必须经过代理才能访问被代理对象。在应用场景上不同于装饰者模式，更偏向于代理的含义，代理模式重点在于控制对象的行为，而装饰模式侧重于增加对象的职能，为对象增加额外的职能。</p>
</blockquote>
<p>结构如下：</p>
<p><img data-src="https://i.loli.net/2019/07/16/5d2d6cc468f4062204.png" alt="代理模式"></p>
<h4 id="Java中实现动态代理"><a href="#Java中实现动态代理" class="headerlink" title="Java中实现动态代理"></a>Java中实现动态代理</h4><p>Java中代理模式有动态代理、静态代理、Cglib代理。</p>
<p>Java中实现动态代理的步骤：<br>1.定义一个委托类和公共接口。</p>
<p>2.自己定义一个类（调用处理器类，即实现 InvocationHandler 接口），这个类的目的是指定运行时将生成的代理类需要完成的具体任务（包括Preprocess和Postprocess），即代理类调用任何方法都会经过这个调用处理器类</p>
<p>3.生成代理对象（当然也会生成代理类），需要为他指定(1)委托对象(2)实现的一系列接口(3)调用处理器类的实例。因此可以看出一个代理对象对应一个委托对象，对应一个调用处理器实例。</p>
<p>4.Java 实现动态代理主要涉及以下几个类：</p>
<ol>
<li><p>java.lang.reflect.Proxy: 这是生成代理类的主类，通过 Proxy 类生成的代理类都继承了 Proxy 类，即 DynamicProxyClass extends Proxy。</p>
</li>
<li><p>java.lang.reflect.InvocationHandler: 这里称他为”调用处理器”，他是一个接口，我们动态生成的代理类需要完成的具体内容需要自己定义一个类，而这个类必须实现 InvocationHandler 接口。</p>
</li>
</ol>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RealSubject realSubject = <span class="keyword">new</span> RealSubject();<span class="comment">//1.创建委托对象</span></span><br><span class="line">        ProxyHandler handler = <span class="keyword">new</span> ProxyHandler(realSubject);<span class="comment">//2.创建调用处理器对象</span></span><br><span class="line">        <span class="comment">//3.动态生成代理对象</span></span><br><span class="line">        Subject proxySubject = (Subject) Proxy.newProxyInstance(RealSubject<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(), </span></span><br><span class="line"><span class="class">        <span class="title">RealSubject</span>.<span class="title">class</span>.<span class="title">getInterfaces</span>(), <span class="title">handler</span>)</span>;    </span><br><span class="line">        proxySubject.request();    <span class="comment">//4.通过代理对象调用方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 委托类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Real Subject Request"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代理类的调用处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Subject subject;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyHandler</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//定义预处理的工作，当然你也可以根据 method 的不同进行不同的预处理工作</span></span><br><span class="line">        System.out.println(<span class="string">"====before===="</span>);</span><br><span class="line">        Object result = method.invoke(subject, args);</span><br><span class="line">        System.out.println(<span class="string">"====after===="</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p><img data-src="https://i.loli.net/2019/07/16/5d2d6cdfcf79f34132.png" alt="观察者模式"></p>
<p>观察者模式优点：</p>
<p>观察者模式在被观察者和观察者之间建立一个抽象的耦合。被观察者角色所知道的只是一个具体观察者列表，每一个具体观察者都符合一个抽象观察者的接口。被观察者并不认识任何一个具体观察者，它只知道它们都有一个共同的接口。由于被观察者和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。如果被观察者和观察者都被扔到一起，那么这个对象必然跨越抽象化和具体化层次。</p>
<p>观察者模式缺点：</p>
<p>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</p>
<p>如果在被观察者之间有循环依赖的话，被观察者会触发它们之间进行循环调用，导致系统崩溃。在使用观察者模式是要特别注意这一点。</p>
<p>如果对观察者的通知是通过另外的线程进行异步投递的话，系统必须保证投递是以自恰的方式进行的。</p>
<p>虽然观察者模式可以随时使观察者知道所观察的对象发生了变化，但是观察者模式没有相应的机制使观察者知道所观察的对象是怎么发生变化的。</p>
<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><blockquote>
<p>策略模式也叫政策模式，是一种行为型设计模式，是一种比较简单的设计模式。策略模式采用了面向对象的继承和多态机制。</p>
</blockquote>
<p>策略模式适合使用在：1.多个类只有在算法或行为上稍有不同的场景。2.算法需要自由切换的场景。3.需要屏蔽算法规则的场景。</p>
<p>使用策略模式当然也有需要注意的地方，那么就是策略类不要太多，如果一个策略家族的具体策略数量超过4个，则需要考虑混合模式，解决策略类膨胀和对外暴露问题。在实际项目中，我们一般通过工厂方法模式来实现策略类的声明。</p>
<p><img data-src="https://i.loli.net/2019/07/16/5d2d6ceedac8664650.png" alt="策略模式"></p>
<p>优点：1.算法可以自由切换。2.避免使用多重条件判断。3.扩展性良好。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.hollischuang.com/archives/2498" target="_blank" rel="noopener">为什么我墙裂建议大家使用枚举来实现单例。</a></li>
<li><a href="https://xiazdong.github.io/2014/11/27/代理模式及Java实现动态代理/" target="_blank" rel="noopener">代理模式及Java实现动态代理</a></li>
</ul>
]]></content>
      <tags>
        <tag>notes</tag>
        <tag>interview</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>常见排序算法实现</title>
    <url>/2019/02/20/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88Java%EF%BC%89%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="排序比较"><a href="#排序比较" class="headerlink" title="排序比较"></a>排序比较</h1><p><img data-src="https://i.loli.net/2019/08/01/5d4255963984735231.png" alt="排序"></p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="comment">// 分割数组，找到分割点</span></span><br><span class="line">        <span class="keyword">int</span> point = partition(list, left, right);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归调用，对左子数组进行快速排序</span></span><br><span class="line">        quickSort(list, left, point - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 递归调用，对右子数组进行快速排序</span></span><br><span class="line">        quickSort(list, point + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分割数组，找到分割点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用数组的第一个元素作为基准数</span></span><br><span class="line">    <span class="keyword">int</span> first = list[left];</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; list[right] &gt;= first) &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 交换</span></span><br><span class="line">        swap(list, left, right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; list[left] &lt;= first) &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 交换</span></span><br><span class="line">        swap(list, left, right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回分割点所在的位置</span></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组中两个位置的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        temp = list[left];</span><br><span class="line">        list[left] = list[right];</span><br><span class="line">        list[right] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 希尔排序算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] list)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = list.length ;</span><br><span class="line">    <span class="comment">// 取增量</span></span><br><span class="line">    <span class="keyword">int</span> gap = len / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (gap &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 无序序列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = list[i];</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 有序序列</span></span><br><span class="line">            <span class="keyword">for</span> (j = i - gap; j &gt;= <span class="number">0</span> &amp;&amp; list[j] &gt; temp; j = j - gap) &#123;</span><br><span class="line">                list[j + gap] = list[j];</span><br><span class="line">            &#125;</span><br><span class="line">            list[j + gap] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 缩小增量</span></span><br><span class="line">        gap = gap / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] list)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将无序堆构造成一个大根堆，大根堆有length/2个父节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = list.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        headAdjust(list, i, list.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 逐步将每个最大值的根节点与末尾元素交换，并且再调整其为大根堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = list.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 将堆顶节点和当前未经排序的子序列的最后一个元素交换位置</span></span><br><span class="line">        swap(list, <span class="number">0</span>, i);</span><br><span class="line">        headAdjust(list, <span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造大根堆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">headAdjust</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> parent, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保存当前父节点</span></span><br><span class="line">    <span class="keyword">int</span> temp = list[parent];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 得到左孩子节点</span></span><br><span class="line">    <span class="keyword">int</span> leftChild = <span class="number">2</span> * parent + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (leftChild &lt; length) &#123;</span><br><span class="line">        <span class="comment">// 如果parent有右孩子，则要判断左孩子是否小于右孩子</span></span><br><span class="line">        <span class="keyword">if</span> (leftChild + <span class="number">1</span> &lt; length &amp;&amp; list[leftChild] &lt; list[leftChild + <span class="number">1</span>]) &#123;</span><br><span class="line">            leftChild++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 父亲节点大于子节点，就不用做交换</span></span><br><span class="line">        <span class="keyword">if</span> (temp &gt;= list[leftChild]) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将较大子节点的值赋给父亲节点</span></span><br><span class="line">        list[parent] = list[leftChild];</span><br><span class="line">        <span class="comment">// 然后将子节点做为父亲节点</span></span><br><span class="line">        parent = leftChild;</span><br><span class="line">        <span class="comment">// 找到该父亲节点较小的左孩子节点</span></span><br><span class="line">        leftChild = <span class="number">2</span> * parent + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 最后将temp值赋给较大的子节点，以形成两值交换</span></span><br><span class="line">    list[parent] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组中两个位置的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> top, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = list[top];</span><br><span class="line">    list[top] = list[last];</span><br><span class="line">    list[last] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 归并排序算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list     待排序的列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tempList 临时列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head     列表开始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rear     列表结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span>[] tempList, <span class="keyword">int</span> head, <span class="keyword">int</span> rear)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head &lt; rear) &#123;</span><br><span class="line">        <span class="comment">// 取分割位置</span></span><br><span class="line">        <span class="keyword">int</span> middle = (head + rear) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 递归划分列表的左序列</span></span><br><span class="line">        mergeSort(list, tempList, head, middle);</span><br><span class="line">        <span class="comment">// 递归划分列表的右序列</span></span><br><span class="line">        mergeSort(list, tempList, middle + <span class="number">1</span>, rear);</span><br><span class="line">        <span class="comment">// 列表的合并操作</span></span><br><span class="line">        merge(list, tempList, head, middle + <span class="number">1</span>, rear);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并操作(列表的两两合并)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tempList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> middle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rear</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span>[] tempList, <span class="keyword">int</span> head, <span class="keyword">int</span> middle, <span class="keyword">int</span> rear)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 左指针尾</span></span><br><span class="line">    <span class="keyword">int</span> headEnd = middle - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 右指针头</span></span><br><span class="line">    <span class="keyword">int</span> rearStart = middle;</span><br><span class="line">    <span class="comment">// 临时列表的下标</span></span><br><span class="line">    <span class="keyword">int</span> tempIndex = head;</span><br><span class="line">    <span class="comment">// 列表合并后的长度</span></span><br><span class="line">    <span class="keyword">int</span> tempLength = rear - head + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先循环两个区间段都没有结束的情况</span></span><br><span class="line">    <span class="keyword">while</span> ((headEnd &gt;= head) &amp;&amp; (rearStart &lt;= rear)) &#123;</span><br><span class="line">        <span class="comment">// 如果发现右序列大，则将此数放入临时列表</span></span><br><span class="line">        <span class="keyword">if</span> (list[head] &lt; list[rearStart]) &#123;</span><br><span class="line">            tempList[tempIndex++] = list[head++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tempList[tempIndex++] = list[rearStart++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断左序列是否结束</span></span><br><span class="line">    <span class="keyword">while</span> (head &lt;= headEnd) &#123;</span><br><span class="line">        tempList[tempIndex++] = list[head++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断右序列是否结束</span></span><br><span class="line">    <span class="keyword">while</span> (rearStart &lt;= rear) &#123;</span><br><span class="line">        tempList[tempIndex++] = list[rearStart++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tempLength; i++) &#123;</span><br><span class="line">        list[rear] = tempList[rear];</span><br><span class="line">        rear--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接选择排序算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] list)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = list.length ;</span><br><span class="line">    <span class="comment">// 要遍历的次数（length-1次）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 将当前下标定义为最小值下标</span></span><br><span class="line">        <span class="keyword">int</span> min = i;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历min后面的数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= len - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// 如果有小于当前最小值的元素，将它的下标赋值给min</span></span><br><span class="line">            <span class="keyword">if</span> (list[j] &lt; list[min]) &#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果min不等于i，说明找到真正的最小值</span></span><br><span class="line">        <span class="keyword">if</span> (min != i) &#123;</span><br><span class="line">            swap(list, min, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组中两个位置的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] list, <span class="keyword">int</span> min, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = list[min];</span><br><span class="line">    list[min] = list[i];</span><br><span class="line">    list[i] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 直接插入排序算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] list)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = list.length ;</span><br><span class="line">    <span class="comment">// 从无序序列中取出第一个元素 (注意无序序列是从第二个元素开始的)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = list[i];</span><br><span class="line">        <span class="keyword">int</span> j;</span><br><span class="line">        <span class="comment">// 遍历有序序列</span></span><br><span class="line">        <span class="comment">// 如果有序序列中的元素比临时元素大，则将有序序列中比临时元素大的元素依次后移</span></span><br><span class="line">        <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; list[j] &gt; temp; j--) &#123;</span><br><span class="line">            list[j + <span class="number">1</span>] = list[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将临时元素插入到腾出的位置中</span></span><br><span class="line">        list[j + <span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] list)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = list.length ;</span><br><span class="line">    <span class="comment">// 做多少轮排序（最多length-1轮）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 每一轮比较多少个</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list[j] &gt; list[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 交换次序</span></span><br><span class="line">            	<span class="keyword">int</span> temp = list[j];</span><br><span class="line">                list[j] = list[j + <span class="number">1</span>];</span><br><span class="line">                list[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>algorithm</tag>
        <tag>java</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>问卷星自动提交脚本</title>
    <url>/2019/01/01/%E9%97%AE%E5%8D%B7%E6%98%9F%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<hr>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li><p>分析页面结构, 问题标号: <code>q+第几题</code>, 问题选项: <code>q+第几题+_第几个选项</code>.<br><img data-src="https://i.loli.net/2019/07/24/5d38688779d8545711.png" alt="1"></p>
<a id="more"></a></li>
<li><p>对一次提交进行抓包, 抓取post数据包.<br><img data-src="https://i.loli.net/2019/07/24/5d3868b80e17938093.png" alt=""><br>对<code>submidata</code>进行解码得到如下.<br><img data-src="https://i.loli.net/2019/07/24/5d3868c51134133886.png" alt=""><br>明显看出是<code>题号$选项号}</code>组成的.</p>
</li>
<li><p>写<code>python</code>脚本构造post请求.利用<code>X-Forwarded-For</code>绕过服务器IP地址过滤.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'www.wjx.cn'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0'</span>,</span><br><span class="line">        <span class="string">'X-Forwarded-For'</span>: str(randint(<span class="number">1</span>, <span class="number">255</span>)) + <span class="string">'.'</span> + str(randint(<span class="number">1</span>, <span class="number">255</span>)) + <span class="string">'.'</span> + str(randint(<span class="number">1</span>, <span class="number">255</span>)) + <span class="string">'.'</span> + str(</span><br><span class="line">            randint(<span class="number">1</span>, <span class="number">255</span>)),</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'https://www.wjx.cn###.aspx'</span>,</span><br><span class="line">        <span class="string">'Cookie'</span>: <span class="string">'acw_tc=2f624a1f154##'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="string">"第 "</span> + str(i) + <span class="string">" 提交"</span> + <span class="string">" Using IP:"</span> + header[<span class="string">'X-Forwarded-For'</span>] + <span class="string">' to compalte this Q.'</span>)</span><br><span class="line">    data = <span class="string">"submitdata=1$%s&#125;2$%s&#125;3$%s&#125;4$%s&#125;5$%s&#125;6$%s&#125;7$%s&#125;8$3&#125;9$-3&#125;10$-3&#125;11$%s&#125;12$%s&#125;13$%s&#125;14$%s&#125;15$%s&#125;16$%s&#125;17$%s&#125;18$%s"</span> % (</span><br><span class="line">        str(randint(<span class="number">1</span>, <span class="number">7</span>)), str(randint(<span class="number">1</span>, <span class="number">9</span>)), str(randint(<span class="number">1</span>, <span class="number">4</span>)), str(randint(<span class="number">1</span>, <span class="number">3</span>)), str(randint(<span class="number">1</span>, <span class="number">4</span>)),</span><br><span class="line">        str(randint(<span class="number">1</span>, <span class="number">3</span>)), str(randint(<span class="number">1</span>, <span class="number">3</span>)), str(randint(<span class="number">1</span>, <span class="number">2</span>)), str(randint(<span class="number">1</span>, <span class="number">2</span>)), str(randint(<span class="number">1</span>, <span class="number">4</span>)),</span><br><span class="line">        str(randint(<span class="number">1</span>, <span class="number">2</span>)), str(randint(<span class="number">1</span>, <span class="number">2</span>)), str(randint(<span class="number">1</span>, <span class="number">3</span>)), str(randint(<span class="number">1</span>, <span class="number">2</span>)), str(randint(<span class="number">1</span>, <span class="number">3</span>)))</span><br><span class="line">    url = <span class="string">'https://www.wjx.cn/joinnew/processjq.ashx?curid=34131883&amp;starttime=2019%2F1%2F25%2021%3A37%3A12&amp;source=directphone&amp;submittype=1&amp;ktimes=213&amp;hlv=1&amp;rn=1034449004.44465961&amp;t=1548423507485&amp;jqnonce=c5825f6b-67d7-40c8-ba2e-e1ffb82c4642&amp;jqsign=%606%3B16e5a.54g4.73%60%3B.ab1f.f2eea%3B1%607571'</span></span><br><span class="line">    r = requests.post(url, data=data, headers=header)</span><br><span class="line">    <span class="comment"># print(r)</span></span><br><span class="line">print(<span class="string">"Complate."</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>skill</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Manacher算法-最长回文串</title>
    <url>/2018/11/15/Manacher-%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
    <content><![CDATA[<hr>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>求解字符串最长回文串。</p>
<p>leetcode: <a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">最长回文子串</a></p>
<h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">121</span><br><span class="line">1</span><br><span class="line">daccbba</span><br><span class="line">bb</span><br></pre></td></tr></table></figure>

<h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">121</span><br><span class="line">1</span><br><span class="line">accbba</span><br><span class="line">bb</span><br></pre></td></tr></table></figure>

<p><code>Manacher</code>算法，时间复杂度O(n), 空间复杂度O(1)。</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>先对s串处理转换为奇数长度的串。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; &quot;12212321&quot;</span><br><span class="line">&#x3D;&#x3D;&gt;</span><br><span class="line">S # 1 # 2 # 2 # 1 # 2 # 3 # 2 # 1 #</span><br><span class="line">P 1 2 1 2 5 2 1 4 1 2 1 6 1 2 1 2 1</span><br></pre></td></tr></table></figure>
<p>p[i]表示记录以字符S[i]为中心的最长回文子串向左或向右扩张的长度（包括S[i]）。<br>即以i为原点的最大回文半径。</p>
<p>Manacher算法增加两个辅助变量id和mx。</p>
<p>id代表当前“已经匹配完毕的结尾最远的回文串”中心为s的第ID位。</p>
<p>mx = p[i] + id代表当前“已经匹配完毕的结尾最远的回文串”到达了s的第Mx位。</p>
<p>最长回文子串长度 = p[i] - 1 = 5。</p>
<p>2*id - i是i关于id的对称点</p>
<a id="more"></a>
<p>故p[i] = min(p[2*id-i], mx-i)</p>
<p>主要代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对s进行修改</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; s.length()<span class="number">-1</span>; i++) </span><br><span class="line">&#123;</span><br><span class="line">    p[i] = mx &gt; i ? <span class="built_in">min</span>(p[<span class="number">2</span> * id - i], mx - i) : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (s[i + p[i]] == s[i - p[i]]) </span><br><span class="line">        p[i]++;</span><br><span class="line">    <span class="keyword">if</span> (i + p[i] &gt; mx) </span><br><span class="line">    &#123;</span><br><span class="line">        mx = i + p[i];</span><br><span class="line">        id = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 求结果串</span></span><br></pre></td></tr></table></figure>

<p>ac代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ipublic <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        String s = <span class="string">"12212321"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">preProcess</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"^$"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder ret = <span class="keyword">new</span> StringBuilder(<span class="string">"^"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            ret.append(<span class="string">"#"</span>).append(s.charAt(i));</span><br><span class="line">        ret.append(<span class="string">"#$"</span>);</span><br><span class="line">        <span class="keyword">return</span> ret.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String t = s;</span><br><span class="line">        s = preProcess(s);</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span>[] p = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span> mx = <span class="number">0</span>, id = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            p[i] = (mx &gt; i) ? Math.min(p[<span class="number">2</span> * id - i], mx - i) : <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (s.charAt(i + p[i]) == s.charAt(i - p[i])) &#123;</span><br><span class="line">                p[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i + p[i] &gt; mx) &#123;</span><br><span class="line">                mx = i + p[i];</span><br><span class="line">                id = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> maxLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> centerIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; p.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p[i] &gt; maxLen) &#123;</span><br><span class="line">                maxLen = p[i];</span><br><span class="line">                centerIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> start = (centerIndex - maxLen) / <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">return</span> t.substring(start, start + maxLen - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000008484167" target="_blank" rel="noopener">Manacher算法</a></p>
]]></content>
      <tags>
        <tag>algorithm</tag>
        <tag>Java</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>清除提交到github上的账号密码</title>
    <url>/2018/11/01/%E6%B8%85%E9%99%A4%E6%8F%90%E4%BA%A4%E5%88%B0github%E4%B8%8A%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<hr>
<h2 id="一、删库"><a href="#一、删库" class="headerlink" title="一、删库"></a>一、删库</h2><p>。。。。</p>
<h2 id="二、使用BFG-Repo-Cleaner"><a href="#二、使用BFG-Repo-Cleaner" class="headerlink" title="二、使用BFG Repo-Cleaner"></a>二、使用BFG Repo-Cleaner</h2><p>地址： <a href="https://rtyley.github.io/bfg-repo-cleaner/" target="_blank" rel="noopener">BFG Repo-Cleaner</a></p>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#克隆副本</span><br><span class="line">git clone --mirror git:&#x2F;&#x2F;example.com&#x2F;example.git</span><br><span class="line">#清理分支</span><br><span class="line">java -jar bfg-1.13.0.jar --replace-text pwd.txt example.git</span><br><span class="line">cd example.git &amp; git reflog expire --expire&#x3D;now --all &amp;&amp; git gc --prune&#x3D;now --aggressive &amp; git push</span><br></pre></td></tr></table></figure>
<h3 id="git-取消对某个文件的track"><a href="#git-取消对某个文件的track" class="headerlink" title="git 取消对某个文件的track"></a>git 取消对某个文件的track</h3><p>.gitignore无法对已经track的文件忽略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rm --cached example.files</span><br><span class="line">git commit</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 Stream</title>
    <url>/2018/10/07/Java8%20Stream/</url>
    <content><![CDATA[<h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Stream</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用 Java 7: "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算空字符串</span></span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(<span class="string">"abc"</span>, <span class="string">""</span>, <span class="string">"bc"</span>, <span class="string">"efg"</span>, <span class="string">"abcd"</span>, <span class="string">""</span>, <span class="string">"jkl"</span>);</span><br><span class="line">        System.out.println(<span class="string">"列表: "</span> + strings);</span><br><span class="line">        <span class="keyword">long</span> count = getCountEmptyStringUsingJava7(strings);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"空字符数量为: "</span> + count);</span><br><span class="line">        count = getCountLength3UsingJava7(strings);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"字符串长度为 3 的数量为: "</span> + count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除空字符串</span></span><br><span class="line">        List&lt;String&gt; filtered = deleteEmptyStringsUsingJava7(strings);</span><br><span class="line">        System.out.println(<span class="string">"筛选后的列表: "</span> + filtered);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除空字符串，并使用逗号把它们合并起来</span></span><br><span class="line">        String mergedString = getMergedStringUsingJava7(strings, <span class="string">", "</span>);</span><br><span class="line">        System.out.println(<span class="string">"合并字符串: "</span> + mergedString);</span><br><span class="line">        List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取列表元素平方数</span></span><br><span class="line">        List&lt;Integer&gt; squaresList = getSquares(numbers);</span><br><span class="line">        System.out.println(<span class="string">"平方数列表: "</span> + squaresList);</span><br><span class="line">        List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">17</span>, <span class="number">8</span>, <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"列表: "</span> + integers);</span><br><span class="line">        System.out.println(<span class="string">"列表中最大的数 : "</span> + getMax(integers));</span><br><span class="line">        System.out.println(<span class="string">"列表中最小的数 : "</span> + getMin(integers));</span><br><span class="line">        System.out.println(<span class="string">"所有数之和 : "</span> + getSum(integers));</span><br><span class="line">        System.out.println(<span class="string">"平均数 : "</span> + getAverage(integers));</span><br><span class="line">        System.out.println(<span class="string">"随机数: "</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出10个随机数</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(random.nextInt());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"使用 Java 8: "</span>);</span><br><span class="line">        System.out.println(<span class="string">"列表: "</span> + strings);</span><br><span class="line"></span><br><span class="line">        count = strings.stream().filter(string -&gt; string.isEmpty()).count();</span><br><span class="line">        System.out.println(<span class="string">"空字符串数量为: "</span> + count);</span><br><span class="line"></span><br><span class="line">        count = strings.stream().filter(string -&gt; string.length() == <span class="number">3</span>).count();</span><br><span class="line">        System.out.println(<span class="string">"字符串长度为 3 的数量为: "</span> + count);</span><br><span class="line"></span><br><span class="line">        filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">"筛选后的列表: "</span> + filtered);</span><br><span class="line"></span><br><span class="line">        mergedString = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.joining(<span class="string">", "</span>));</span><br><span class="line">        System.out.println(<span class="string">"合并字符串: "</span> + mergedString);</span><br><span class="line"></span><br><span class="line">        squaresList = numbers.stream().map(i -&gt; i * i).distinct().collect(Collectors.toList());</span><br><span class="line">        System.out.println(<span class="string">"Squares List: "</span> + squaresList);</span><br><span class="line">        System.out.println(<span class="string">"列表: "</span> + integers);</span><br><span class="line"></span><br><span class="line">        IntSummaryStatistics stats = integers.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"列表中最大的数 : "</span> + stats.getMax());</span><br><span class="line">        System.out.println(<span class="string">"列表中最小的数 : "</span> + stats.getMin());</span><br><span class="line">        System.out.println(<span class="string">"所有数之和 : "</span> + stats.getSum());</span><br><span class="line">        System.out.println(<span class="string">"平均数 : "</span> + stats.getAverage());</span><br><span class="line">        System.out.println(<span class="string">"随机数: "</span>);</span><br><span class="line"></span><br><span class="line">        random.ints().limit(<span class="number">10</span>).sorted().forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 并行处理</span></span><br><span class="line">        count = strings.parallelStream().filter(string -&gt; string.isEmpty()).count();</span><br><span class="line">        System.out.println(<span class="string">"空字符串的数量为: "</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCountEmptyStringUsingJava7</span><span class="params">(List&lt;String&gt; strings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (string.isEmpty()) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCountLength3UsingJava7</span><span class="params">(List&lt;String&gt; strings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (string.length() == <span class="number">3</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">deleteEmptyStringsUsingJava7</span><span class="params">(List&lt;String&gt; strings)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; filteredList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!string.isEmpty()) &#123;</span><br><span class="line">                filteredList.add(string);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filteredList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getMergedStringUsingJava7</span><span class="params">(List&lt;String&gt; strings, String separator)</span> </span>&#123;</span><br><span class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String string : strings) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!string.isEmpty()) &#123;</span><br><span class="line">                stringBuilder.append(string);</span><br><span class="line">                stringBuilder.append(separator);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String mergedString = stringBuilder.toString();</span><br><span class="line">        <span class="keyword">return</span> mergedString.substring(<span class="number">0</span>, mergedString.length() - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">getSquares</span><span class="params">(List&lt;Integer&gt; numbers)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; squaresList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer number : numbers) &#123;</span><br><span class="line">            Integer square = <span class="keyword">new</span> Integer(number.intValue() * number.intValue());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!squaresList.contains(square)) &#123;</span><br><span class="line">                squaresList.add(square);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> squaresList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(List&lt;Integer&gt; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = numbers.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numbers.size(); i++) &#123;</span><br><span class="line"></span><br><span class="line">            Integer number = numbers.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (number.intValue() &gt; max) &#123;</span><br><span class="line">                max = number.intValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">(List&lt;Integer&gt; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = numbers.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numbers.size(); i++) &#123;</span><br><span class="line">            Integer number = numbers.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (number.intValue() &lt; min) &#123;</span><br><span class="line">                min = number.intValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(List numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = (<span class="keyword">int</span>) (numbers.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; numbers.size(); i++) &#123;</span><br><span class="line">            sum += (<span class="keyword">int</span>) numbers.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getAverage</span><span class="params">(List&lt;Integer&gt; numbers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSum(numbers) / numbers.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8 Date AND Time API</title>
    <url>/2018/10/05/Java8%20Date%20Time%20API/</url>
    <content><![CDATA[<h2 id="Java8-引入了新的时间类"><a href="#Java8-引入了新的时间类" class="headerlink" title="Java8 引入了新的时间类"></a>Java8 引入了新的时间类</h2><h3 id="使用-LocalDate-和-LocalTime"><a href="#使用-LocalDate-和-LocalTime" class="headerlink" title="使用 LocalDate 和 LocalTime"></a>使用 <code>LocalDate</code> 和 <code>LocalTime</code></h3><p>创建 <code>LocalDate</code> 对象并读取值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2013-03-06</span></span><br><span class="line">LocalDate date = LocalDate.of(<span class="number">2012</span>,<span class="number">03</span>,<span class="number">06</span>);</span><br><span class="line"><span class="comment">//2012</span></span><br><span class="line"><span class="keyword">int</span> year = date.getYear();</span><br><span class="line"><span class="comment">//MARCH</span></span><br><span class="line">Month month = date.getMonth();</span><br><span class="line"><span class="comment">//TUESDAY</span></span><br><span class="line">DayOfWeek dow = date.getDayOfWeek();</span><br><span class="line"><span class="comment">//6</span></span><br><span class="line"><span class="keyword">int</span> day = date.getDayOfMonth();</span><br><span class="line"><span class="comment">//31</span></span><br><span class="line"><span class="keyword">int</span> len = date.lengthOfMonth();</span><br><span class="line"><span class="comment">//false</span></span><br><span class="line"><span class="keyword">boolean</span> leap = date.isLeapYear();</span><br><span class="line"><span class="comment">//使用工厂方法获取系统日期</span></span><br><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">LocalTime time = LocalTime.now().withNano(<span class="number">0</span>);<span class="comment">//去除毫秒</span></span><br></pre></td></tr></table></figure>
<p><code>TemporalField</code> 是一个接口, 定义了如何访问 <code>temporal</code> 对象某个字段的值. <code>ChronoField</code> 枚举实现这一接口.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> year = date.get(ChronoField.YEAR);</span><br><span class="line"><span class="keyword">int</span> month = date.get(ChronoField.MONTH_OF_YEAR);</span><br><span class="line"><span class="keyword">int</span> day = date.get(ChronoField.DAY_OF_MONTH);</span><br></pre></td></tr></table></figure>

<p><code>LocalDate</code> 和 <code>LocalTime</code> 都可以解析字符串创建.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate date = LocalDate.parse(<span class="string">"2012-12-22"</span>);</span><br><span class="line">LocalTime time = LocalTime.parse(<span class="string">"22:22:22"</span>);</span><br></pre></td></tr></table></figure>

<h3 id="操作、解析和格式化"><a href="#操作、解析和格式化" class="headerlink" title="操作、解析和格式化"></a>操作、解析和格式化</h3><h4 id="使用-TemporalAdjuster"><a href="#使用-TemporalAdjuster" class="headerlink" title="使用 TemporalAdjuster"></a>使用 <code>TemporalAdjuster</code></h4>]]></content>
      <tags>
        <tag>java</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP 九大内置对象常用方法</title>
    <url>/2018/10/01/JSP%20%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1-request-对象常用方法"><a href="#1-request-对象常用方法" class="headerlink" title="1. request 对象常用方法"></a>1. <code>request</code> 对象常用方法</h2><p><code>request</code> 是来自客户端的请求. 客户端的请求信息封装在 <code>request</code> 对象中. 以下 <code>HttpServletRequest</code> 类的实例.</p>
<table>
<thead>
<tr>
<th>方法 ( 类型 + 方法名 )</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>String getParameter(String strTextName)</td>
<td>获取表单提交信息</td>
</tr>
<tr>
<td>Enumeration getParameterNames()</td>
<td>返回可用参数的枚举</td>
</tr>
<tr>
<td>String[] getParameterValues(String name)</td>
<td>返回包含参数 name 的所有的数组</td>
</tr>
<tr>
<td>Enumeration getAttributeNames()</td>
<td>返回所有属性名的属性值</td>
</tr>
<tr>
<td>Object getAttribute(String name)</td>
<td>返回指定属性的属性值</td>
</tr>
<tr>
<td>String getCharacterEncoding()</td>
<td>返回字节编码方式</td>
</tr>
<tr>
<td>String getProtocol()</td>
<td>获取用户使用的协议</td>
</tr>
<tr>
<td>String getServletPath()</td>
<td>获取用户提交信息的页面</td>
</tr>
<tr>
<td>String getMethod()</td>
<td>获取客户提交信息的方式</td>
</tr>
<tr>
<td>BufferReader getHeader()</td>
<td>获取 HTTP 头文件的 accept、accept-encoding 和 Host 的值</td>
</tr>
<tr>
<td>String getRemoteAddr()</td>
<td>获取客户的 IP 地址</td>
</tr>
<tr>
<td>String getRemoteHost()</td>
<td>获取客户机的名称</td>
</tr>
<tr>
<td>String getserverName()</td>
<td>获取服务器的名称</td>
</tr>
<tr>
<td>int getServerPort()</td>
<td>获取服务器端口号</td>
</tr>
</tbody></table>
<h2 id="2-resopnse-对象常用方法"><a href="#2-resopnse-对象常用方法" class="headerlink" title="2. resopnse 对象常用方法"></a>2. <code>resopnse</code> 对象常用方法</h2><p><code>resopnse</code> 对象代表的是对客户端的相应. 向客户端发送文字时直接使用. 以下是 <code>HttpServletResopnse</code> 类的实例.</p>
<table>
<thead>
<tr>
<th>方法 ( 类型 + 方法名 )</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>String getCharacterEncoding()</td>
<td>返回响应用的是什么字符编码</td>
</tr>
<tr>
<td>ServletOutputStream getOutputStream()</td>
<td>返回响应的一个二进制输出流</td>
</tr>
<tr>
<td>PrintWrite getWrite()</td>
<td>返回可以向客户端输出字符的一个对象</td>
</tr>
<tr>
<td>void setContentLength(int len)</td>
<td>设置响应头长度</td>
</tr>
<tr>
<td>void setContentTye(String type)</td>
<td>设置响应的 MIME 类型</td>
</tr>
<tr>
<td>void sendRedirect(Java.lang.String location)</td>
<td>重新定向客户端的请求</td>
</tr>
</tbody></table>
<a id="more"></a>
<h2 id="3-session-常用方法"><a href="#3-session-常用方法" class="headerlink" title="3. session 常用方法"></a>3. <code>session</code> 常用方法</h2><p><code>session</code> 指的是客户端与服务器的一次回话, 从客户连接到服务器的一个 WebApplication 开始, 直到客户端与服务器断开连接为止. 它是 <code>HttpSession</code> 类的实例.</p>
<table>
<thead>
<tr>
<th>方法 ( 类型 + 方法名 )</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>long getCreationTime()</td>
<td>创建 session 创建时间</td>
</tr>
<tr>
<td>public String getId()</td>
<td>返回 session 创建时JSP引擎为它设置的唯一ID号</td>
</tr>
<tr>
<td>long getLastAccessedTime()</td>
<td>返回 session 里客户端最近一次请求时间</td>
</tr>
<tr>
<td>int getMaxInactiveInterval()</td>
<td>返回两次请求间隔多长时间此 session 被取消</td>
</tr>
<tr>
<td>String[] getValueNames()</td>
<td>返回一个包含此 session 中所有可用属性的数组</td>
</tr>
<tr>
<td>void invalidate()</td>
<td>取消 session , 使 session 不可用</td>
</tr>
<tr>
<td>boolean isNew()</td>
<td>返回服务器创建爱你的一个 session , 客户端是否已经加入</td>
</tr>
<tr>
<td>void removeValue(String name)</td>
<td>删除 session 中指定的属性</td>
</tr>
<tr>
<td>void setMaxInactiveInterval()</td>
<td>session 被取消 (ms)</td>
</tr>
</tbody></table>
<h2 id="4-out-常用方法"><a href="#4-out-常用方法" class="headerlink" title="4. out 常用方法"></a>4. <code>out</code> 常用方法</h2><p><code>out</code> 对象是 <code>JspWriter</code> 类的实例, 是向客户端输出内容常用的对象.</p>
<table>
<thead>
<tr>
<th>方法 ( 类型 + 方法名 )</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>void clear()</td>
<td>清除缓冲区的内容</td>
</tr>
<tr>
<td>void clearBuffer()</td>
<td>清除缓冲区的当前内容</td>
</tr>
<tr>
<td>void flush()</td>
<td>清空流</td>
</tr>
<tr>
<td>int getBufferSize()</td>
<td>返回缓冲区以字节数的大小,如果不设置为0</td>
</tr>
<tr>
<td>int getRemaining()</td>
<td>返回缓冲区还有多少剩余可用</td>
</tr>
<tr>
<td>bool isAutoFlush()</td>
<td>返回缓冲区满时,是自动清空还是抛出异常</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭输出流</td>
</tr>
</tbody></table>
<h2 id="5-page-常用方法"><a href="#5-page-常用方法" class="headerlink" title="5. page 常用方法"></a>5. <code>page</code> 常用方法</h2><p><code>page</code> 指当前 <code>JSP</code> 页面本身, 有点像类中的 <code>this</code> 指针, 它是 <code>java.langlObject</code> 类的实例. 「page」对象代表正在运行的由 <code>jsp</code> 文件产生的类对象.</p>
<table>
<thead>
<tr>
<th>方法 ( 类型 + 方法名 )</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>class getClass()</td>
<td>返回此 Object 的类</td>
</tr>
<tr>
<td>int hashCode()</td>
<td>返回此 Object 的 hash 码</td>
</tr>
<tr>
<td>boolean equals(Object obj)</td>
<td>判断此 Object 是否与指定的 Object 对象相等</td>
</tr>
<tr>
<td>void copy(Object obj)</td>
<td>把此 Object 拷贝到指定的 Object 对象中</td>
</tr>
<tr>
<td>Object clone()</td>
<td>克隆此 Object 对象</td>
</tr>
<tr>
<td>String toString()</td>
<td>把此 Object 对象转换成 String 类的对象</td>
</tr>
<tr>
<td>void notify()</td>
<td>唤醒一个等待的进程</td>
</tr>
<tr>
<td>void notifyAll()</td>
<td>唤醒所有等待的进程</td>
</tr>
<tr>
<td>void wait(int timeout)</td>
<td>使一个进程处于等待直到 timeout 结束或者被唤醒</td>
</tr>
<tr>
<td>void wait()</td>
<td>使一个线程处于等待直到被唤醒</td>
</tr>
<tr>
<td>void enterMonitor()</td>
<td>对 Object 进行加锁</td>
</tr>
<tr>
<td>void exitMonitor()</td>
<td>对 Object 进行开锁</td>
</tr>
</tbody></table>
<h2 id="6-application-常用方法"><a href="#6-application-常用方法" class="headerlink" title="6. application 常用方法"></a>6. <code>application</code> 常用方法</h2><p><code>application</code> 实现了用户间数据的共享, 可存放全局变量. 它开始于服务器的启动, 直到服务器的关闭, 在此期间, 此对象将一直存在; 这样在用户的前后连接或者不同用户之间的连接中, 可以对此对象的同一属性进行操作; 在任何地方对此对象属性的操作, 都将影响到其他对象对此的访问. 服务器的启动和关闭决定了 <code>application</code> 对象的生命. 它是 <code>ServletContest</code>类的实例.</p>
]]></content>
      <tags>
        <tag>JSP</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>位运算笔记</title>
    <url>/2018/08/01/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="amp-、-、"><a href="#amp-、-、" class="headerlink" title="&amp; 、|、 ^"></a>&amp; 、|、 ^</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a &amp; a = a</span><br><span class="line">a | a = a</span><br><span class="line">a ^ a = <span class="number">0</span></span><br><span class="line">a &amp; <span class="number">0</span> = <span class="number">0</span></span><br><span class="line">a | <span class="number">0</span> = a</span><br><span class="line">a ^ <span class="number">0</span> = a</span><br><span class="line">a | ( a &amp; b ) = a</span><br><span class="line">a &amp; ( a | b ) = a</span><br></pre></td></tr></table></figure>
<h3 id="a、b值交换"><a href="#a、b值交换" class="headerlink" title="a、b值交换"></a>a、b值交换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a ^= b;</span><br><span class="line">b ^= a;</span><br><span class="line">a ^= b;</span><br></pre></td></tr></table></figure>
<h3 id="判断奇偶（取最后一位）"><a href="#判断奇偶（取最后一位）" class="headerlink" title="判断奇偶（取最后一位）"></a>判断奇偶（取最后一位）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a &amp; <span class="number">1</span> &lt;==&gt; a % <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="i-1位置为1"><a href="#i-1位置为1" class="headerlink" title="i+1位置为1"></a>i+1位置为1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1110 =&gt; 1111</span></span><br><span class="line">a |= <span class="number">1</span> &lt;&lt; i</span><br></pre></td></tr></table></figure>
<h3 id="i-1位置为0"><a href="#i-1位置为0" class="headerlink" title="i+1位置为0"></a>i+1位置为0</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 1111 &#x3D;&gt; 1101</span><br><span class="line">a &amp;&#x3D; ~(1 &lt;&lt; i)</span><br></pre></td></tr></table></figure>
<h3 id="取出i-1位"><a href="#取出i-1位" class="headerlink" title="取出i+1位"></a>取出i+1位</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// i = 2, 7 =&gt; 4</span></span><br><span class="line">a = a &amp; (<span class="number">1</span> &lt;&lt; i)</span><br></pre></td></tr></table></figure>
<h3 id="删除最后的1"><a href="#删除最后的1" class="headerlink" title="删除最后的1"></a>删除最后的1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1100 =&gt; 1000</span></span><br><span class="line">a = a &amp; (a-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="在对应i-1位，插入b的对应位"><a href="#在对应i-1位，插入b的对应位" class="headerlink" title="在对应i+1位，插入b的对应位"></a>在对应i+1位，插入b的对应位</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a |&#x3D; 1 &lt;&lt; i; （a的bit位置1）</span><br><span class="line">a &amp; (b &amp; 1&lt;&lt;i) （与b的bit位相与）</span><br></pre></td></tr></table></figure>
<h3 id="得到最高位的1"><a href="#得到最高位的1" class="headerlink" title="得到最高位的1"></a>得到最高位的1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = a |(a&gt;&gt;<span class="number">1</span>);</span><br><span class="line">a = a |(a&gt;&gt;<span class="number">2</span>);</span><br><span class="line">a = a |(a&gt;&gt;<span class="number">4</span>);</span><br><span class="line">a = a |(a&gt;&gt;<span class="number">8</span>);</span><br><span class="line">a = a |(a&gt;&gt;<span class="number">16</span>);</span><br><span class="line"><span class="keyword">return</span> (a+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h3 id="检测一个无符号整数是否是2-n-1的形式"><a href="#检测一个无符号整数是否是2-n-1的形式" class="headerlink" title="检测一个无符号整数是否是2^n -1的形式"></a>检测一个无符号整数是否是2^n -1的形式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x&amp;(x+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h3><p>在<code>Java</code>中正数<code>&gt;&gt;</code>等价于<code>&gt;&gt;&gt;</code>，负数在内存中已补码形式保存，<code>&gt;&gt;&gt;</code>表示无符号右移。</p>
<h3 id="“1”位计数"><a href="#“1”位计数" class="headerlink" title="“1”位计数"></a>“1”位计数</h3><p>统计一个字（比如32bit）中，有多少个bit是1，有多少个bit是0。</p>
<p>这里以32bit为例来说明算法，这里基本思想类似折半计算。算法复杂度O(lgn)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x = (x &amp; <span class="number">0x55555555</span>) + ((x&gt;&gt;<span class="number">1</span>)&amp; <span class="number">0x55555555</span>);</span><br><span class="line">x = (x &amp; <span class="number">0x33333333</span>) + ((x&gt;&gt;<span class="number">2</span>)&amp; <span class="number">0x33333333</span>);</span><br><span class="line">x = (x &amp; <span class="number">0x0F0F0F0F</span>) + ((x&gt;&gt;<span class="number">4</span>)&amp; <span class="number">0x0F0F0F0F</span>);</span><br><span class="line">x = (x &amp; <span class="number">0x00FF00FF</span>) + ((x&gt;&gt;<span class="number">8</span>)&amp; <span class="number">0x00FF00FF</span>);</span><br><span class="line">x = (x &amp; <span class="number">0x0000FFFF</span>) + ((x&gt;&gt;<span class="number">16</span>)&amp; <span class="number">0x0000FFFF</span>);</span><br></pre></td></tr></table></figure>
<h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>—待续</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://book.douban.com/subject/1784887/" target="_blank" rel="noopener">《Hacker’s Delight》</a></li>
</ol>
]]></content>
      <tags>
        <tag>algorithm</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title>20行代码的签到脚本(Python)</title>
    <url>/2018/07/28/20%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>懒得每天在某个网站签到，写了一个python脚本扔在云主机上。网站很简单，代码就几十行。</p>
<h3 id="签到脚本"><a href="#签到脚本" class="headerlink" title="签到脚本"></a>签到脚本</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">username = <span class="string">"####"</span></span><br><span class="line">password = <span class="string">"####"</span></span><br><span class="line">loginUrl = <span class="string">"登录路径/auth/login"</span></span><br><span class="line">s = requests.Session()</span><br><span class="line">logindata = &#123;</span><br><span class="line">    <span class="string">'email'</span>:username,</span><br><span class="line">    <span class="string">'passwd'</span>:password,</span><br><span class="line">    <span class="string">'remember_me'</span>:<span class="string">'ture'</span>,</span><br><span class="line">&#125;</span><br><span class="line">r = s.post(loginUrl,data=logindata)</span><br><span class="line">r = s.get(loginUrl)</span><br><span class="line">checkinUrl=<span class="string">"签到的路径/user/checkin"</span></span><br><span class="line">rr = s.post(checkinUrl)<span class="comment">#执行签到</span></span><br><span class="line">rr = s.get(loginUrl)</span><br><span class="line"><span class="comment"># print(rr)</span></span><br><span class="line"><span class="comment"># print(rr._content.decode())</span></span><br><span class="line">exit()</span><br></pre></td></tr></table></figure>

<h3 id="在Linux上定时执行这个脚本"><a href="#在Linux上定时执行这个脚本" class="headerlink" title="在Linux上定时执行这个脚本"></a>在Linux上定时执行这个脚本</h3><a id="more"></a>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>
<p>进入编辑模式，设置每天8:00运行一次。<br>crontab的语法规范<br>分钟 小时 日期 月份 周 命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00 8 * * * python &#x2F;opt&#x2F;checkin.py</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
        <tag>skill</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Django重置后台密码</title>
    <url>/2018/07/15/Django%E9%87%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>emmm时间长忘记密码了</p>
<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python manage.py shell</span></span><br></pre></td></tr></table></figure>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User</span><br><span class="line">In [<span class="number">2</span>]: user = User.objects.get(username=<span class="string">'Username'</span>)</span><br><span class="line">In [<span class="number">3</span>]: user.set_password(<span class="string">'Password'</span>)</span><br><span class="line">In [<span class="number">4</span>]: user.save()</span><br><span class="line">In [<span class="number">5</span>]: exit()</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>skill</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>lambda表达式</title>
    <url>/2018/07/15/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<p>lambda表达式是一行函数，是函数式编程的一种特性。</p>
<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p>lambda &lt;参数&gt;: 表达式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> a,b: a + b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(f)</span><br><span class="line"><span class="comment">#&lt;type 'function'&gt;</span></span><br></pre></td></tr></table></figure>
<p>获取整除2的数字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(filter(<span class="keyword">lambda</span> x: x%<span class="number">2</span>==<span class="number">0</span>, range(<span class="number">10</span>)))</span><br><span class="line"><span class="comment">#[0, 2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>
<p>列表并行排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>];list2 = [<span class="number">9</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = zip(list1, list2)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = sorted(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1, list2 = map(<span class="keyword">lambda</span> t: list(t), zip(*data))</span><br></pre></td></tr></table></figure>
<h2 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h2><a id="more"></a>
<p>c++里的形式是这样的<br>[capture list] (parameter list) -&gt;return type {function body}</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//call the func.</span></span><br><span class="line">    <span class="keyword">auto</span> f1 = []() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"test"</span> &lt;&lt; <span class="built_in">endl</span>; &#125;; </span><br><span class="line">    f1();</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">auto</span> f2 = [y](<span class="keyword">int</span> x) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x + y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    f2(<span class="number">4</span>);</span><br><span class="line">    <span class="comment">//STL</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">        v.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    for_each(v.begin(), v.end(), [](<span class="keyword">int</span> n) &#123; </span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>函数式编程</tag>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>django链接MySQL问题</title>
    <url>/2018/06/21/django%E9%93%BE%E6%8E%A5mysql%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（django.db.utils.OperationalError: (1045, &quot;Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: NO)&quot;)）</span><br></pre></td></tr></table></figure>
<h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><ul>
<li>Django2.0 </li>
<li>MySQL8.0.11</li>
</ul>
<a id="more"></a>
<p>Mysql 8.0 的部分语法，密码的加密方式发生了改变，在8.0 中的用户密码采用的是cha2 加密方法, 从而密码认证错误。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决:"></a>解决:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;password&#39;;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>skill</tag>
        <tag>django</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nothing added to commit but untracked files present解决方法</title>
    <url>/2018/05/30/nothing-added-to-commit-but-untracked-files-present%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit                                                         </span></span><br><span class="line">On branch master                                                     </span><br><span class="line">                                                                     </span><br><span class="line">Initial commit                                                       </span><br><span class="line">                                                                     </span><br><span class="line">Untracked files:                                                     </span><br><span class="line">        .gitignore                                                   </span><br><span class="line">        Test/                                                        </span><br><span class="line">        blogpost/                                                    </span><br><span class="line">        manage.py                                                    </span><br><span class="line">                                                                     </span><br><span class="line">nothing added to commit but untracked files present</span><br></pre></td></tr></table></figure>

<p><strong>文件被追踪，但是没有被添加git中</strong></p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><a id="more"></a>
<p><strong>git status 列出当前目录所有还没有被git管理的文件和被git管理且被修改但还未提交(git commit)的文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add manage.py</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add blogpost\</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add Test\</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git add .gitignore</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>c++枚举next_premutation</title>
    <url>/2018/05/28/c++%E6%9E%9A%E4%B8%BEnext_premutation/</url>
    <content><![CDATA[<h3 id="平均复杂度即为O-n"><a href="#平均复杂度即为O-n" class="headerlink" title="平均复杂度即为O(n)"></a>平均复杂度即为O(n)</h3><ul>
<li><p>next_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“下一个排列次序”；</p>
</li>
<li><p>prev_permutation()    会改变区间[begin,end)内的元素次序，使它们符合“上一个排列次序”；</p>
</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;v.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;v[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">	v.push_back(<span class="number">1</span>);</span><br><span class="line">	v.push_back(<span class="number">3</span>);</span><br><span class="line">	v.push_back(<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"原排列 ： "</span>;</span><br><span class="line">	f(v); </span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">		next_permutation(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());<span class="comment">//升序序列  或者下一个排列次序 按照字典序生成下一个序列 </span></span><br><span class="line">		f(v);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//for(int i=0;i&lt;5;i++)&#123;</span></span><br><span class="line">	<span class="comment">//	prev_permutation(v.begin(),v.end());//降序 </span></span><br><span class="line">	<span class="comment">//	f(v);</span></span><br><span class="line">	<span class="comment">//&#125; </span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>acm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu错误-Could not get lock /var/lib/dpkg/lock</title>
    <url>/2018/05/15/Ubuntu%E9%94%99%E8%AF%AF-Could-not-get-lock-var-lib-dpkg-lock/</url>
    <content><![CDATA[<h3 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable) </span><br><span class="line">E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?</span><br></pre></td></tr></table></figure>

<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><a id="more"></a>
<h4 id="查看运行的线程"><a href="#查看运行的线程" class="headerlink" title="查看运行的线程"></a>查看运行的线程</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -A | grep apt-get</span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo <span class="built_in">kill</span> processnumber</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭apt进程</span></span><br></pre></td></tr></table></figure>
<p>我的没有发现进程， 可能是上次运行安装或更新时没有正常完成造成的</p>
<h4 id="终端输入"><a href="#终端输入" class="headerlink" title="终端输入"></a>终端输入</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm /var/cache/apt/archives/lock</span><br><span class="line">sudo rm /var/lib/dpkg/lock</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>skill</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>c++ std::ios_base::sync_with_stdio 加速输入输出</title>
    <url>/2018/05/14/c-std-ios-base-sync-with-stdio-%E5%8A%A0%E9%80%9F%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h3 id="static-bool-sync-with-stdio-bool-sync-true"><a href="#static-bool-sync-with-stdio-bool-sync-true" class="headerlink" title="static bool sync_with_stdio( bool sync = true );"></a><code>static bool sync_with_stdio( bool sync = true );</code></h3><p>设置标准 C++ 流是否与标准 C 流在每次输入/输出操作后同步。</p>
<p>遇到cin TLE时可以用于取消cin同步, 取消之后不能和 scanf，sscanf, getchar, fgets 之类同用。</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"a\n"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">printf</span>(<span class="string">"b\n"</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"c\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="输出-（环境-g-5-4-0）"><a href="#输出-（环境-g-5-4-0）" class="headerlink" title="输出 （环境 g++5.4.0）"></a>输出 （环境 g++5.4.0）</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">b</span><br><span class="line">c</span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<p>默认的情况下cin绑定的是cout，每次执行 &lt;&lt; 操作符的时候都要调用flush，这样会增加IO负担。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>参考一 ： <a href="http://zh.cppreference.com/w/cpp/io/ios_base/sync_with_stdio" target="_blank" rel="noopener">http://zh.cppreference.com/w/cpp/io/ios_base/sync_with_stdio</a></p>
<p>参考二 ：<a href="http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html" target="_blank" rel="noopener">http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html</a></p>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10 WIFI 热点问题</title>
    <url>/2018/05/08/Window-WIFI-%E7%83%AD%E7%82%B9%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>win10玄学bug之一</p>
<p>解决方案 ： </p>
<p>命令行输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netsh wlan <span class="built_in">set</span> hostednetwork mode=allow ssid=NAME key=PASSWORD</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> netsh wlan start hostednetwork</span></span><br></pre></td></tr></table></figure>
<p>然后在网络适配器的本地连接-&gt;属性-&gt;共享-&gt;设置共享刚才设置的WIFI热点</p>
]]></content>
      <tags>
        <tag>windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>Python解决字符编码问题</title>
    <url>/2018/05/05/Python%E8%A7%A3%E5%86%B3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>字符串分为unicode 和 str 两种类型</p>
<p>文本字符和二进制数据分别用 str 和 byte表示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#系统默认编码设置为utf-8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.getdefultencoding</span><br><span class="line"><span class="string">'utf-8'</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>str 与 bytes 之间的转换可以用 encode 和从decode </p>
<a id="more"></a>
<p><img data-src="https://foofish.net/images/python3-str2.jpg" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"Python测试"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = s.encode()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line"><span class="string">b'Python\xe6\xb5\x8b\xe8\xaf\x95'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = s.decode()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line"><span class="string">'Python测试'</span></span><br></pre></td></tr></table></figure>
<h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">"asdasd"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = base64.b64encode(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = base64.b64decode(s)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(s)</span><br></pre></td></tr></table></figure>
<hr>
<p>参考 ： <a href="https://foofish.net/how-python3-handle-charset-encoding.html" target="_blank" rel="noopener">https://foofish.net/how-python3-handle-charset-encoding.html</a></p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>skill</tag>
      </tags>
  </entry>
  <entry>
    <title>BFS</title>
    <url>/2018/04/01/BFS/</url>
    <content><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="迷宫问题（最短路径）"><a href="#迷宫问题（最短路径）" class="headerlink" title="迷宫问题（最短路径）"></a>迷宫问题（最短路径）</h3><h3 id="INPUT"><a href="#INPUT" class="headerlink" title="INPUT:"></a>INPUT:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">SXXXX</span><br><span class="line">...XX</span><br><span class="line">.X...</span><br><span class="line">..XXX</span><br><span class="line">....G</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6 6</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">.S..X.</span><br><span class="line">XXX...</span><br><span class="line">....X.</span><br><span class="line">.X..XX</span><br><span class="line">.GX...</span><br></pre></td></tr></table></figure>
<h3 id="OUPUT"><a href="#OUPUT" class="headerlink" title="OUPUT:"></a>OUPUT:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">100000007</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mx = <span class="number">1007</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; P;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> maze[mx][mx];<span class="comment">//地图</span></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> sx, sy;<span class="comment">//开始坐标 </span></span><br><span class="line"><span class="keyword">int</span> gx, gy;<span class="comment">//结束坐标 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[mx][mx];<span class="comment">//到各个位置的最短距离数组 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;, dy[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;<span class="comment">//移动向量 </span></span><br><span class="line"><span class="comment">//（sx,sy)----&gt;(gx,gy)最短路径</span></span><br><span class="line"><span class="comment">//无法到达就是 INF </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;P&gt; que;</span><br><span class="line">	<span class="comment">//初始化所有位置为INF </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			d[i][j]=INF;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//放入起点 </span></span><br><span class="line">	que.push(P(sx,sy));</span><br><span class="line">	d[sx][sy]=<span class="number">0</span>;</span><br><span class="line">	<span class="comment">//队列不为空一直执行 </span></span><br><span class="line">	<span class="keyword">while</span>(que.size())&#123;</span><br><span class="line">		<span class="comment">//取出队列前端元素 </span></span><br><span class="line">		P p=que.front();</span><br><span class="line">		que.pop();</span><br><span class="line">		<span class="comment">//取出为终点结束搜索 </span></span><br><span class="line">		<span class="keyword">if</span>(p.first==gx&amp;&amp;p.second==gy) <span class="keyword">break</span>;</span><br><span class="line">		<span class="comment">//4个方向的移动 </span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">			<span class="comment">//移动之后的位置 </span></span><br><span class="line">			<span class="keyword">int</span> nx=p.first+dx[i], ny=p.second+dy[i];</span><br><span class="line">			<span class="comment">//判断是否访问过 </span></span><br><span class="line">			<span class="keyword">if</span>(<span class="number">0</span>&lt;=nx&amp;&amp;nx&lt;n&amp;&amp;<span class="number">0</span>&lt;=ny&amp;&amp;ny&lt;m&amp;&amp;d[nx][ny]==INF&amp;&amp;maze[nx][ny]!=<span class="string">'X'</span>)&#123;</span><br><span class="line">				que.push(P(nx,ny));<span class="comment">//放入队列， 并到该位置的距离+1 </span></span><br><span class="line">				d[nx][ny]=d[p.first][p.second]+<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> d[gx][gy];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=bfs();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,maze[i]);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(maze[i][j]==<span class="string">'S'</span>)&#123;</span><br><span class="line">				sx=i;sy=j;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(maze[i][j]==<span class="string">'G'</span>)&#123;</span><br><span class="line">				gx=i;gy=j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	solve();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>acm</tag>
        <tag>图论</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集</title>
    <url>/2018/04/01/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h3 id="题目-L2-010-排座位"><a href="#题目-L2-010-排座位" class="headerlink" title="题目 : L2-010. 排座位"></a>题目 : <a href="https://www.patest.cn/contests/gplt/L2-010" target="_blank" rel="noopener">L2-010. 排座位</a></h3><p>布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。</p>
<a id="more"></a>
<h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出3个正整数：N（&lt;= 100），即前来参宴的宾客总人数，则这些人从1到N编号；M为已知两两宾客之间的关系数；K为查询的条数。随后M行，每行给出一对宾客之间的关系，格式为：“宾客1 宾客2 关系”，其中“关系”为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后K行，每行给出一对需要查询的宾客编号。</p>
<p>这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。</p>
<h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出“No problem”；如果他们之间并不是朋友，但也不敌对，则输出“OK”；如果他们之间有敌对，然而也有共同的朋友，则输出“OK but…”；如果他们之间只有敌对关系，则输出“No way”。</p>
<h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">7 8 4</span><br><span class="line">5 6 1</span><br><span class="line">2 7 -1</span><br><span class="line">1 3 1</span><br><span class="line">3 4 1</span><br><span class="line">6 7 -1</span><br><span class="line">1 2 1</span><br><span class="line">1 4 1</span><br><span class="line">2 3 -1</span><br><span class="line">3 4</span><br><span class="line">5 7</span><br><span class="line">2 3</span><br><span class="line">7 2</span><br></pre></td></tr></table></figure>
<h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No problem</span><br><span class="line">OK</span><br><span class="line">OK but...</span><br><span class="line">No way</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">11 8 6</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">5 6</span></span><br><span class="line"><span class="comment">5 7</span></span><br><span class="line"><span class="comment">6 8</span></span><br><span class="line"><span class="comment">7 9</span></span><br><span class="line"><span class="comment">10 11</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">4 6</span></span><br><span class="line"><span class="comment">3 9</span></span><br><span class="line"><span class="comment">5 9</span></span><br><span class="line"><span class="comment">11 6</span></span><br><span class="line"><span class="comment">7 8</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> pre[<span class="number">100007</span>];<span class="comment">//节点 </span></span><br><span class="line"><span class="keyword">int</span> enemy[<span class="number">1007</span>][<span class="number">1007</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">//查找源头标号 </span></span><br><span class="line">	<span class="keyword">int</span> r = x;</span><br><span class="line">    <span class="keyword">while</span> (pre[r] != r)</span><br><span class="line">        r = pre[r];</span><br><span class="line">    <span class="keyword">int</span> i = x, j;</span><br><span class="line">    <span class="keyword">while</span> (i != r)<span class="comment">//路径压缩算法</span></span><br><span class="line">    &#123;</span><br><span class="line">        j = pre[i];<span class="comment">//在改变他的前导点时，存储他的值</span></span><br><span class="line">        pre[i] = r;</span><br><span class="line">        i = j;<span class="comment">//改变他的前导点为根节点</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1---&gt;2---&gt;3 </span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">        1---&gt;3</span></span><br><span class="line"><span class="comment">			/</span></span><br><span class="line"><span class="comment">		   /</span></span><br><span class="line"><span class="comment">		  /</span></span><br><span class="line"><span class="comment">        2</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;<span class="comment">//合并 </span></span><br><span class="line">	a=find(a);</span><br><span class="line">	b=find(b);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(a==b) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (a!=b)</span><br><span class="line">		pre[a]=b; </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n,m,p;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line">	<span class="comment">//初始每个元素为一个根节点 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		pre[i]=i;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">int</span> a,b,c;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">		<span class="keyword">if</span>(c==<span class="number">1</span>)&#123;</span><br><span class="line">			Union(a,b);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			enemy[a][b]=<span class="number">1</span>;</span><br><span class="line">			enemy[b][a]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;p;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">		<span class="keyword">if</span>(find(a)==find(b)&amp;&amp;enemy[a][b]==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"No problem"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(find(a)!=find(b)&amp;&amp;enemy[a][b]==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"OK"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(find(a)==find(b)&amp;&amp;enemy[a][b]==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"OK but..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(enemy[a][b]==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="built_in">cout</span>&lt;&lt;<span class="string">"No way"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>acm</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>DFS</title>
    <url>/2018/04/01/DFS/</url>
    <content><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="求连通块"><a href="#求连通块" class="headerlink" title="求连通块"></a>求连通块</h3><h3 id="INPUT"><a href="#INPUT" class="headerlink" title="INPUT :"></a>INPUT :</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 1</span><br><span class="line">*</span><br><span class="line">3 5</span><br><span class="line">*@*@*</span><br><span class="line">**@**</span><br><span class="line">*@*@*</span><br><span class="line">1 8</span><br><span class="line">@@****@*</span><br><span class="line">5 5 </span><br><span class="line">****@</span><br><span class="line">*@@*@</span><br><span class="line">*@**@</span><br><span class="line">@@@*@</span><br><span class="line">@@**@</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure>
<h3 id="OUTPUT"><a href="#OUTPUT" class="headerlink" title="OUTPUT :"></a>OUTPUT :</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mx = <span class="number">10007</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> field[mx][mx];<span class="comment">//地图 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">	field[x][y] = <span class="string">'*'</span>;<span class="comment">//替换现在位置 </span></span><br><span class="line">	<span class="comment">//遍历8个方向 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> dx=<span class="number">-1</span>;dx&lt;=<span class="number">1</span>;dx++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> dy=<span class="number">-1</span>;dy&lt;=<span class="number">1</span>;dy++)&#123;</span><br><span class="line">			<span class="keyword">int</span> nx=x+dx, ny=y+dy;</span><br><span class="line">			<span class="keyword">if</span>(<span class="number">0</span>&lt;=nx&amp;&amp;nx&lt;n&amp;&amp;<span class="number">0</span>&lt;=ny&amp;&amp;ny&lt;m&amp;&amp;field[nx][ny]==<span class="string">'@'</span>)</span><br><span class="line">				dfs(nx,ny);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">			<span class="comment">//从@处开始遍历 </span></span><br><span class="line">			<span class="keyword">if</span>(field[i][j]==<span class="string">'@'</span>)&#123;</span><br><span class="line">				dfs(i,j);</span><br><span class="line">				ans++;</span><br><span class="line">			&#125;	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,field[i]);</span><br><span class="line">	&#125;	</span><br><span class="line">	solve();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>acm</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title>c++的字符串与数字的转换</title>
    <url>/2018/03/16/c++%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h3 id="数字转字符串"><a href="#数字转字符串" class="headerlink" title="数字转字符串"></a>数字转字符串</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">double</span> a = <span class="number">123.456</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss &lt;&lt; a;</span><br><span class="line">ss &gt;&gt; s;</span><br><span class="line">ss.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">char</span>&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">	m[i] = i + <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">double</span> a = <span class="number">123.456</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(str, <span class="string">"%.3lf"</span>, a);</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">175</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(str,<span class="string">"%x"</span>,a);<span class="comment">//10进制转换成16进制，如果输出大写的字母是sprintf(str,"%X",a)</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串转数字"><a href="#字符串转数字" class="headerlink" title="字符串转数字"></a>字符串转数字</h3><a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"123.456"</span>;</span><br><span class="line"><span class="keyword">double</span> a;</span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss &lt;&lt; s;</span><br><span class="line">ss &gt;&gt; a;</span><br><span class="line">ss.<span class="built_in">clear</span>();</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    m[i+<span class="string">'0'</span>] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> str[] = <span class="string">"123.456"</span>;</span><br><span class="line"><span class="keyword">double</span> a;</span><br><span class="line"><span class="built_in">sscanf</span>(str, <span class="string">"%lf"</span>, &amp;a);</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> str[]=<span class="string">"AF"</span>;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">sscanf</span>(str,<span class="string">"%x"</span>,&amp;a); <span class="comment">//16进制转换成10进制</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a;<span class="keyword">float</span> b;<span class="keyword">long</span> c;</span><br><span class="line">a=atoi(<span class="string">"32"</span>);</span><br><span class="line">b=atof(<span class="string">"3.1415"</span>);</span><br><span class="line">c=atol(<span class="string">"567283"</span>);</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">"%d\n%f\n%d\n"</span>,a,b,c);</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>acm</tag>
        <tag>c++</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>数论初步</title>
    <url>/2017/12/31/%E6%95%B0%E8%AE%BA%E5%88%9D%E6%AD%A5/</url>
    <content><![CDATA[<p>数论被“数学王子”高斯誉为整个数学王国的皇后</p>
<h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><p>欧几里得的辗转相除法计算的是两个自然数a和b的最大公约数g</p>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;递归</span><br><span class="line">int gcd(int a, int b) &#123;</span><br><span class="line">    return b &#x3D;&#x3D; 0 ? a : gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;迭代</span><br><span class="line">int gcd(int a, int b) &#123;</span><br><span class="line">    while(b !&#x3D; 0) &#123;</span><br><span class="line">        int r &#x3D; b;</span><br><span class="line">        b &#x3D; a % b;</span><br><span class="line">        a &#x3D; r;</span><br><span class="line">    &#125;</span><br><span class="line">    return a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="唯一分解定理"><a href="#唯一分解定理" class="headerlink" title="唯一分解定理"></a>唯一分解定理</h3><h3 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><p><a href="">题目</a></p>
<p>直线上的点。求直线<code>ax+by+c=0</code>上有多少整数点(x,y)满足x&lt;-[x1, x2], y &lt;- [y1, y2]<br>定理：若a和b为正整数，则存在整数x,y使得<code>gcd(a,b)=ax+by</code></p>
<h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>&amp; d, <span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">        d = a;</span><br><span class="line">        x = <span class="number">1</span>;</span><br><span class="line">        y = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        gcd(b, a % b, d, y, x);</span><br><span class="line">        y -= x * (a / b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="素数筛选"><a href="#素数筛选" class="headerlink" title="素数筛选"></a>素数筛选</h3><p><a href="http://acm.hdu.edu.cn/diy/contest_showproblem.php?pid=1001&cid=32790" target="_blank" rel="noopener">题目</a></p>
<h4 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一般判定是否是素数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt; <span class="number">2</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(n); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//普通筛选n内的素数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span>* <span class="title">com_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">bool</span>* ans = <span class="keyword">new</span> <span class="keyword">bool</span>[n];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">		ans[i] = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (is_prime(i))</span><br><span class="line">			ans[i] = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="筛选法示例"><a href="#筛选法示例" class="headerlink" title="筛选法示例"></a>筛选法示例</h4><p>一、初始化如下列表。</p>
<p> 2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30</p>
<p>二、把第一个数（2）取出来，去掉所有可以被2整除的数。</p>
<p> 2  3     5     7     9    11    13    15    17    19    21    23    25    27    29</p>
<p>三、取第二个数（3），去掉所有可以被 3整除的数。</p>
<p> 2  3     5     7          11    13          17    19          23    25          29</p>
<p>四、取第三个数（5），因为4已经被去除了，再去掉所有可以被5整除的数。</p>
<p> 2  3     5     7          11    13          17    19          23                29</p>
<p>接下来的数是7，但是7的平方是49，其大于了30，所以我们可以停止计算了。剩下的数就是所有的质数了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &lt; <span class="number">2</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span>* <span class="title">sieve_prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">bool</span>* value = <span class="keyword">new</span> <span class="keyword">bool</span>[n];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		value[i] = <span class="literal">true</span>;</span><br><span class="line">	value[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">	value[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(n); i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (value[i] &amp;&amp; is_prime(i)) &#123;</span><br><span class="line">			<span class="keyword">int</span> c = <span class="number">2</span>;</span><br><span class="line">			<span class="keyword">int</span> j = i * c;</span><br><span class="line">			<span class="keyword">while</span> (j &lt; n) &#123;</span><br><span class="line">				value[j] = <span class="literal">false</span>;</span><br><span class="line">				j = i * c++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span>* prime = sieve_prime(MAX);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">100</span>; i++) &#123; <span class="comment">//输出100内的素数</span></span><br><span class="line">        <span class="keyword">if</span> (prime[i])</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><p><strong>欧拉函数：</strong> 在数论中，对正整数n，欧拉函数φ(n)是小于或等于n的正整数中与n互质的数的数目。它又称为Euler’s totient function、φ函数、欧拉商数等。<br>例如 φ，因为1,3,5,7均和8互质。—— 维基百科</p>
<h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><ul>
<li>phi(1) = 1</li>
<li>n为质数, phi(n) = n - 1</li>
<li>m 和 n 互质, phi(mn) = phi(m) * phi(n)</li>
<li>n为奇数, phi(2n) = phi(n)</li>
<li>通用公式：<code>phi(n) = n * (1 - 1 / p1) * (1 - 1 / p2) * ... * (1 - 1 / pr)</code><br>其中 <code>n = p1^k1 * p2^k2 * ... * pr^kr</code></li>
<li><strong>具体参考：</strong> <a href="https://www.kancloud.cn/kancloud/rsa_algorithm/48486" target="_blank" rel="noopener">看云-欧拉函数</a></li>
</ul>
<h4 id="常规代码"><a href="#常规代码" class="headerlink" title="常规代码"></a>常规代码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int phi(int n) &#123;</span><br><span class="line">    int t &#x3D; n;</span><br><span class="line">    for (int i &#x3D; 2; i &lt;&#x3D; n; i++) &#123;</span><br><span class="line">        if (n % i &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            n &#x2F;&#x3D; i;</span><br><span class="line">            t &#x3D; t - t &#x2F; i;</span><br><span class="line">        &#125;</span><br><span class="line">        while (n % i &#x3D;&#x3D; 0)</span><br><span class="line">            n &#x2F;&#x3D; i;</span><br><span class="line">    &#125;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度O(n),对于1e9会超时。</p>
<h4 id="改良之后"><a href="#改良之后" class="headerlink" title="改良之后"></a>改良之后</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int phi(int n) &#123;</span><br><span class="line">    int t &#x3D; n;</span><br><span class="line">    &#x2F;&#x2F;降低时间复杂度</span><br><span class="line">    for (int  i &#x3D; 2; i * i &lt;&#x3D; n; i++) &#123;</span><br><span class="line">        if (n % i &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        n &#x2F;&#x3D; i;</span><br><span class="line">        t &#x3D; t - t &#x2F; i;</span><br><span class="line">        &#125;</span><br><span class="line">        while (n % i &#x3D;&#x3D; 0) </span><br><span class="line">            n &#x2F;&#x3D; i;</span><br><span class="line">    &#125;</span><br><span class="line">    if (n &gt; 1)</span><br><span class="line">    t &#x3D; t - t &#x2F; n;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>scanf中的正则表达式</title>
    <url>/2017/12/01/scanf%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="调用格式-scanf-quot-lt-格式化字符串-gt-quot-lt-地址表-gt"><a href="#调用格式-scanf-quot-lt-格式化字符串-gt-quot-lt-地址表-gt" class="headerlink" title="调用格式: scanf(&quot;&lt;格式化字符串&gt;&quot;, &lt;地址表&gt;);"></a><strong>调用格式:</strong> <code>scanf(&quot;&lt;格式化字符串&gt;&quot;, &lt;地址表&gt;);</code></h4><p>一、为变量赋值时表示成功读取变量的个数, &lt;格式化字符串&gt;与&lt;地址表&gt;是严格匹配的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c %c"</span>, &amp;a, &amp;b); <span class="comment">//函数返回值是2，并丢弃不想使用的空白符</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d,%d"</span>, &amp;a, &amp;b); <span class="comment">//输入必须有逗号， 多个空格为一个空格</span></span><br></pre></td></tr></table></figure>

<p>二、 <code>%s</code> 读取遇到空格停止读取，因此一般可以用fgets去读取字符串</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%[a-z]"</span>, &amp;str);  <span class="comment">//遇到不再a-z字符停止读取</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"666%[0-9]"</span>, &amp;str);  <span class="comment">//666开头并且在0-9字符读取，不是则停止</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%[^\n]"</span>, &amp;str);     <span class="comment">//^表示求反集，即这句话不是回车一直开始读取</span></span><br></pre></td></tr></table></figure>

<p>三、压缩输入：在格式码前加上*，则用户就可以告诉scanf()读这个域，但不把它赋予任何变量。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%c%*c, &amp;ch); 使用此方法可以在字符处理时吃掉多余的回车。</span></span><br></pre></td></tr></table></figure>

<p><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/base-types/regular-expression-language-quick-reference" target="_blank" rel="noopener">更多正则表达式语言参考</a></p>
<h4 id="sscanf、scanf的一些示例"><a href="#sscanf、scanf的一些示例" class="headerlink" title="sscanf、scanf的一些示例"></a>sscanf、scanf的一些示例</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>acm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>Git问题：Everything up-to-date解决</title>
    <url>/2017/11/04/Git%E9%97%AE%E9%A2%98%EF%BC%9AEverything-up-to-date%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>push代码时遇到提示：<code>Everything up-to-date</code>,无法push代码<br>原因是git提交改动到缓存，要push的时候不会将本地所有的分支都push掉，所以出现这个问题。我们应该告诉git提交哪个分支。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>在<a href="https://stackoverflow.com/questions/2936652/git-push-wont-do-anything-everything-up-to-date" target="_blank" rel="noopener">stackoverflow</a>有解决方案</p>
<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch newbranch</span><br><span class="line">#查看分支</span><br><span class="line">$ git branch</span><br></pre></td></tr></table></figure>
<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git checkout newbranch</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="改动提交到新的分支"><a href="#改动提交到新的分支" class="headerlink" title="改动提交到新的分支"></a>改动提交到新的分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -a</span><br></pre></td></tr></table></figure>
<h3 id="合并到master"><a href="#合并到master" class="headerlink" title="合并到master"></a>合并到master</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git merge newbranch</span><br><span class="line">#查看冲突</span><br><span class="line">$ git diff</span><br></pre></td></tr></table></figure>
<h3 id="push代码"><a href="#push代码" class="headerlink" title="push代码"></a>push代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>
<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git branch -D newbranch</span><br></pre></td></tr></table></figure>
<ul>
<li>删除合并部分大写D改为小写d</li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>快速幂</title>
    <url>/2017/10/31/%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
    <content><![CDATA[<h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><p><img data-src="http://oxqn1kqf7.bkt.clouddn.com/17-10-31/1725298.jpg" alt=""></p>
<p>通常算法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int Pow(int A, int n)</span><br><span class="line">&#123;</span><br><span class="line">    if(n &#x3D;&#x3D; 0) </span><br><span class="line">        return 1;</span><br><span class="line">    int rslt(1);</span><br><span class="line">    for(int i(0); i &lt; n; ++i)</span><br><span class="line">        rslt *&#x3D; A;</span><br><span class="line">    return rslt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>其复杂度是O(n)的。一般来说，这样的复杂度并不会使我们困惑，但是一般应用幂运算的地方，指数都会非常非常的大，比如1 000 000 000这个级别的，这时候我们会遇到两个问题，第一个就是我们不能再用int来存储整数，必须用高精度整数类型来进行存储，另一个就是在指数是如此变态的数量级之下，我们的计算量会骤然上升，结果也会异常惊人的大。简单来说就是二分法。<br>举个栗子：<br>一般解法：<br><code>A^8 = A * A * A * A * A * A * A * A</code><br>总共需要7次乘法运算</p>
<p>平均分解：<br><code>A^8 = (A * A * A * A) * (A * A * A * A) = (A * A * A * A) ^ 2</code><br>这样我们就只需要4次乘法运算</p>
<p>再分解：<br><code>A^6 = [(A * A) * (A * A)] ^ 2 = [(A * A) ^ 2] ^ 2</code><br>这样就将乘法运算的次数减少为了3次</p>
<p>这种二分解法可以将原本n次的运算减少为logn / log2，这样的效果是惊人的，在1 000 000 000这样数量级的指数运算下，该方法可以将运算次数减少到30次</p>
<p>整数的快速幂：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int qPow(int A, int n)</span><br><span class="line">&#123;</span><br><span class="line">    if(n &#x3D;&#x3D; 0) </span><br><span class="line">        return 1;</span><br><span class="line">    int rslt(1);</span><br><span class="line"></span><br><span class="line">    while(n)</span><br><span class="line">    &#123;</span><br><span class="line">        if(n &amp; 1) &#x2F;&#x2F; 若幂为奇数</span><br><span class="line">        &#123;</span><br><span class="line">            rslt *&#x3D; A;</span><br><span class="line">        &#125;</span><br><span class="line">        A *&#x3D; A;</span><br><span class="line">        n &gt;&gt;&#x3D; 1; &#x2F;&#x2F; 右位移等价于除以2</span><br><span class="line">    &#125;</span><br><span class="line">    return rslt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>矩阵类的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Matrix</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    int N; &#x2F;&#x2F; 矩阵维数</span><br><span class="line">    int** m; &#x2F;&#x2F; 存储矩阵的二维数组</span><br><span class="line"></span><br><span class="line">    Matrix(int n &#x3D; 2)</span><br><span class="line">    &#123;</span><br><span class="line">        m &#x3D; new int*[n];</span><br><span class="line">        for(int i(0); i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            m[i] &#x3D; new int[n];</span><br><span class="line">        &#125;</span><br><span class="line">        N &#x3D; n;</span><br><span class="line">        clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 将矩阵清空为零矩阵</span><br><span class="line">    void clear()</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i(0); i &lt; N; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            memset(m[i], 0, sizeof(int) * N);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 将矩阵设定为单位矩阵</span><br><span class="line">    void unit()</span><br><span class="line">    &#123;</span><br><span class="line">        clear();</span><br><span class="line">        for(int i(0); i &lt; N; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            m[i][i] &#x3D; 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 矩阵的赋值</span><br><span class="line">    Matrix operator&#x3D; (Matrix &amp;othr)</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix(othr.N);</span><br><span class="line">        for(int i(0); i &lt; othr.N; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j(0); j &lt; othr.N; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                m[i][j] &#x3D; othr.m[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return *this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 矩阵的乘法</span><br><span class="line">    &#x2F;&#x2F;!假设所有因子均为同阶方阵</span><br><span class="line">    Matrix operator* (Matrix &amp;othr)</span><br><span class="line">    &#123;</span><br><span class="line">        Matrix rslt(othr.N);</span><br><span class="line">        for(int i(0); i &lt; othr.N; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j(0); j &lt; othr.N; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                for(int k(0); k &lt; othr.N; ++k)</span><br><span class="line">                &#123;</span><br><span class="line">                    rslt.m[i][j] +&#x3D; m[i][k] * othr.m[k][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return rslt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>矩阵快速幂的算法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Matrix qMPow(Matrix &amp;A, int n)</span><br><span class="line">&#123;</span><br><span class="line">    Matrix rslt(A.N);</span><br><span class="line">    rslt.unit();</span><br><span class="line">    if(n &#x3D;&#x3D; 0) return rslt;</span><br><span class="line">    while(n)</span><br><span class="line">    &#123;</span><br><span class="line">        if(n &amp; 1) &#x2F;&#x2F; 若幂为奇数</span><br><span class="line">        &#123;</span><br><span class="line">            rslt &#x3D; rslt * A;</span><br><span class="line">        &#125;</span><br><span class="line">        A &#x3D; A * A;</span><br><span class="line">        n &gt;&gt;&#x3D; 1; &#x2F;&#x2F; 右位移等价于除以2</span><br><span class="line">    &#125;</span><br><span class="line">    return rslt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>acm</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>conda常用操作(windows)</title>
    <url>/2017/10/28/conda%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="管理conda"><a href="#管理conda" class="headerlink" title="管理conda"></a>管理conda</h2><h3 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ conda --version</span><br></pre></td></tr></table></figure>
<p>命令参阅可以用: conda –help</p>
<h3 id="将conda更新到最新"><a href="#将conda更新到最新" class="headerlink" title="将conda更新到最新"></a>将conda更新到最新</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ conda update conda</span><br><span class="line">#有最新选择yes</span><br><span class="line">Proceed ([y]&#x2F;n)? y</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="管理环境"><a href="#管理环境" class="headerlink" title="管理环境"></a>管理环境</h2><h3 id="创建环境"><a href="#创建环境" class="headerlink" title="创建环境"></a>创建环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ conda create --name snowflakes biopython</span><br><span class="line">#也可以指定python版本并安装Astroid和Babel</span><br><span class="line">$ conda create --name snowflakes python3.5 astroid babel</span><br></pre></td></tr></table></figure>
<p>使用biopython创建一个snowflakes的环境</p>
<ul>
<li>不指定目录即为默认目录/envs</li>
</ul>
<h3 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ activate newen</span><br><span class="line">#切换回根目录</span><br><span class="line">$ deactivate</span><br></pre></td></tr></table></figure>
<h3 id="显示安装过的环境"><a href="#显示安装过的环境" class="headerlink" title="显示安装过的环境"></a>显示安装过的环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ conda info --envs</span><br></pre></td></tr></table></figure>
<p><img data-src="http://oxqn1kqf7.bkt.clouddn.com/17-10-28/22089148.jpg" alt="显示安装过的环境"><br>括号显示为当前环境<br><img data-src="http://oxqn1kqf7.bkt.clouddn.com/17-10-28/43734134.jpg" alt="括号显示为当前环境"></p>
<h3 id="切换到另一个环境"><a href="#切换到另一个环境" class="headerlink" title="切换到另一个环境"></a>切换到另一个环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ activate another_environment</span><br></pre></td></tr></table></figure>
<h3 id="克隆删除环境"><a href="#克隆删除环境" class="headerlink" title="克隆删除环境"></a>克隆删除环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#克隆</span><br><span class="line">$ conda create --name flowers --clone snowflakes</span><br><span class="line">#删除</span><br><span class="line">$ conda remove --name flowers --all</span><br></pre></td></tr></table></figure>
<h2 id="管理Python"><a href="#管理Python" class="headerlink" title="管理Python"></a>管理Python</h2><h3 id="检查可安装的python版本"><a href="#检查可安装的python版本" class="headerlink" title="检查可安装的python版本"></a>检查可安装的python版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ conda search --full-name python</span><br><span class="line">#列出包含python的所有包</span><br><span class="line">$ conda search python</span><br></pre></td></tr></table></figure>
<h3 id="安装python3环境并不覆盖python2"><a href="#安装python3环境并不覆盖python2" class="headerlink" title="安装python3环境并不覆盖python2"></a>安装python3环境并不覆盖python2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ conda create --name snackes pyhton&#x3D;3</span><br></pre></td></tr></table></figure>
<h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><h3 id="看安装的包和版本列表"><a href="#看安装的包和版本列表" class="headerlink" title="看安装的包和版本列表"></a>看安装的包和版本列表</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ conda list</span><br></pre></td></tr></table></figure>
<h3 id="查找、安装、删除"><a href="#查找、安装、删除" class="headerlink" title="查找、安装、删除"></a>查找、安装、删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ conda search beautifulsoup4</span><br><span class="line">$ conda install --name snowflakes beautifulsoup4    #未指定位置安装在当前位置</span><br><span class="line">$ conda remove --name snowflakes beautifulsoup4</span><br></pre></td></tr></table></figure>
<h3 id="从Anaconda-org安装包"><a href="#从Anaconda-org安装包" class="headerlink" title="从Anaconda.org安装包"></a>从Anaconda.org安装包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ conda install --channel https:&#x2F;&#x2F;conda.anaconda.org&#x2F;pandas bottleneck</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>更多命令具体参考：</strong><a href="https://conda.io/docs/user-guide/tasks/view-command-line-help.html" target="_blank" rel="noopener">Getting started</a></li>
</ul>
]]></content>
      <tags>
        <tag>skill</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>初学使用Git</title>
    <url>/2017/10/24/%E5%88%9D%E5%AD%A6%E4%BD%BF%E7%94%A8Git/</url>
    <content><![CDATA[<h2 id="Git使用规范流程"><a href="#Git使用规范流程" class="headerlink" title="Git使用规范流程"></a>Git使用规范流程</h2><p>Git是一个源码管理系统<br>我采取ThoughtBot的Git使用规范流程</p>
<h3 id="第一步：新建分支"><a href="#第一步：新建分支" class="headerlink" title="第一步：新建分支"></a>第一步：新建分支</h3><p>每次开发新功能，都应该新建一个单独的分支。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#获取主干最新代码</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git pull</span><br><span class="line"></span><br><span class="line">#新建开发分支</span><br><span class="line">$ git checkout -b afeature</span><br></pre></td></tr></table></figure>
<h3 id="第二步：提交分支commit"><a href="#第二步：提交分支commit" class="headerlink" title="第二步：提交分支commit"></a>第二步：提交分支commit</h3><a id="more"></a>
<p>分支修改后，提交commit</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#all为保存所有变化(包括新建、修改和删除)</span><br><span class="line">$ git add --all</span><br><span class="line">#查看发生变动的文件。</span><br><span class="line">$ git status</span><br><span class="line">#verbose会列出diff的结果</span><br><span class="line">$ git commit --verbose</span><br></pre></td></tr></table></figure>
<ul>
<li>diff是Unix系统的一个很重要的工具程序，具体见：<a href="http://www.ruanyifeng.com/blog/2012/08/how_to_read_diff.html" target="_blank" rel="noopener">读懂diff - 阮一峰的网络日志</a></li>
</ul>
<h3 id="第三步：撰写提交信息"><a href="#第三步：撰写提交信息" class="headerlink" title="第三步：撰写提交信息"></a>第三步：撰写提交信息</h3><p>提交commit时，必须给出完整扼要的提交信息。以下是一个范本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Persent-tense summary under 50 characters</span><br><span class="line">*More information about commit(under 72 characters)</span><br><span class="line">*More information about commit(under 72 characters)</span><br><span class="line">http:&#x2F;&#x2F;project.management-system.com&#x2F;ticket&#x2F;123</span><br></pre></td></tr></table></figure>
<p>第一行是不超过50个字的提要，然后空一行，罗列出改动原因、主要变动、需要注意的问题。最后，提供对应的网址。</p>
<h3 id="第四步：与主干同步"><a href="#第四步：与主干同步" class="headerlink" title="第四步：与主干同步"></a>第四步：与主干同步</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git fetch orgin</span><br><span class="line">$ git rebase orgin&#x2F;master</span><br></pre></td></tr></table></figure>
<h3 id="第五步：合并commit"><a href="#第五步：合并commit" class="headerlink" title="第五步：合并commit"></a>第五步：合并commit</h3><p>分支开发完成后，很可能有一堆commit，但是合并到主干的时候，往往希望只有一个(或最多两三个) commit，这样不仅清晰，也容易管理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rebase -i origin&#x2F;master</span><br></pre></td></tr></table></figure>
<ul>
<li>具体参考：<a href="http://www.ruanyifeng.com/blog/2015/08/git-use-process.html" target="_blank" rel="noopener">Git 使用规范流程</a></li>
</ul>
<h3 id="第六步：推送到远程仓库"><a href="#第六步：推送到远程仓库" class="headerlink" title="第六步：推送到远程仓库"></a>第六步：推送到远程仓库</h3><p>合并commit，推送当前分支到远程仓库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push --force origin myfeature</span><br></pre></td></tr></table></figure>
<h3 id="第七步：发出Pull-Request"><a href="#第七步：发出Pull-Request" class="headerlink" title="第七步：发出Pull Request"></a>第七步：发出Pull Request</h3><p>提交到远程仓库以后，就可以发出Pull Request 到master 分支，然后请求别人进行代码review，确认可以合并到master。</p>
<h2 id="Git常用操作"><a href="#Git常用操作" class="headerlink" title="Git常用操作"></a>Git常用操作</h2><p><img data-src="http://oxqn1kqf7.bkt.clouddn.com/17-10-26/83204462.jpg" alt=""></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>通向外网的梯子</title>
    <url>/2017/10/22/%E9%80%9A%E5%90%91%E5%A4%96%E7%BD%91%E7%9A%84%E6%A2%AF%E5%AD%90/</url>
    <content><![CDATA[<ul>
<li>机场最为方便</li>
<li><a href="https://www.v2ray.com/" target="_blank" rel="noopener">v2ray</a>适合自建</li>
<li>…</li>
</ul>
]]></content>
      <tags>
        <tag>tools</tag>
        <tag>gfw</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter NoteBook常用快捷键</title>
    <url>/2017/10/21/Jupyter-NoteBook%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>Jupyter Notebook 有两种键盘输入模式，命令模式和编辑模式。与Vim类似。</p>
<p>命令模式按<strong>Esc</strong>进入，编辑模式按<strong>Enter</strong>进入</p>
<h4 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Shift+Enter</td>
<td>运行本单元，选中下一个单元</td>
</tr>
<tr>
<td>Ctrl+Enter</td>
<td>运行本单元</td>
</tr>
<tr>
<td>Alt+Enter</td>
<td>运行本单元在下插入新单元</td>
</tr>
<tr>
<td>Y</td>
<td>单元转入代码状态</td>
</tr>
<tr>
<td>M</td>
<td>单元转入markdown状态</td>
</tr>
<tr>
<td>R</td>
<td>单元转入raw状态</td>
</tr>
<tr>
<td>Up&amp;K/Down&amp;J</td>
<td>选中上方/下方单元</td>
</tr>
<tr>
<td>Shift+K/J</td>
<td>连续选择上方/下方单元</td>
</tr>
<tr>
<td>A/B</td>
<td>在上方/下方插入新单元</td>
</tr>
<tr>
<td>x/C</td>
<td>剪切/复制选中单元</td>
</tr>
<tr>
<td>Shift+V/V</td>
<td>粘贴到上方/下方单元</td>
</tr>
<tr>
<td>Z</td>
<td>恢复删除的最后一个单元</td>
</tr>
<tr>
<td>DD</td>
<td>删除选中的单元</td>
</tr>
<tr>
<td>Shift+M</td>
<td>合并选中的单元</td>
</tr>
<tr>
<td>Ctrl+S/S</td>
<td>保存当前文件</td>
</tr>
<tr>
<td>L</td>
<td>开关行号</td>
</tr>
<tr>
<td>O</td>
<td>转换输出</td>
</tr>
<tr>
<td>Shift+O</td>
<td>转换输出滚动</td>
</tr>
<tr>
<td>Esc/Q</td>
<td>关闭页面</td>
</tr>
<tr>
<td>H</td>
<td>显示快捷帮助</td>
</tr>
<tr>
<td>II/00</td>
<td>中断/重启NOteBook内核</td>
</tr>
<tr>
<td>Shift+Space/Space</td>
<td>向上/下滚动</td>
</tr>
</tbody></table>
<h4 id="编辑模式快捷键"><a href="#编辑模式快捷键" class="headerlink" title="编辑模式快捷键"></a>编辑模式快捷键</h4><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Tab</td>
<td>代码补全或者缩进</td>
</tr>
<tr>
<td>Shift+Tab</td>
<td>提示</td>
</tr>
<tr>
<td>Ctrl+]</td>
<td>向右缩进</td>
</tr>
<tr>
<td>Ctrl+[</td>
<td>向左缩进</td>
</tr>
<tr>
<td>Ctrl+Shift+Z/Ctrl+Y</td>
<td>重做</td>
</tr>
<tr>
<td>Ctrl+up/down</td>
<td>跳到单元开头/末尾</td>
</tr>
<tr>
<td>Ctrl+Left/Right</td>
<td>跳到左边/右边一个字首</td>
</tr>
<tr>
<td>Ctrl+BackSpace/Delete</td>
<td>删除前面一个字</td>
</tr>
<tr>
<td>Shift+Enter</td>
<td>运行本单元，选中下一个单元</td>
</tr>
<tr>
<td>Ctrl+M</td>
<td>切换到命令模式</td>
</tr>
<tr>
<td>Ctrl+Enter</td>
<td>运行本单元</td>
</tr>
<tr>
<td>Alt+Enter</td>
<td>运行本单元在下插入新单元</td>
</tr>
<tr>
<td>Ctrl+/</td>
<td>注释整行或者取消注释</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>skill</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows上好用的软件</title>
    <url>/2017/10/14/Windows%E4%B8%8A%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="Wox"><a href="#Wox" class="headerlink" title="Wox"></a>Wox</h2><p><strong><a href="https://github.com/Wox-launcher/Wox" target="_blank" rel="noopener">Wox</a>：</strong>是开源免费强大的快捷启动器辅助工具，快速高效率打开软件,搜索文件<br>打开输入框：alt + space</p>
<ul>
<li>同类软件也有:   ** <a href="http://www.listary.com/" target="_blank" rel="noopener">Listary</a>**  ,  <strong><a href="http://www.irolan.com/" target="_blank" rel="noopener">Rolan</a></strong></li>
</ul>
<h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><p><strong><a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey</a>：</strong>如果你认为没有包管理的操作系统是反人类的就用这个吧，Chocolatey 这套包管理系统目前已经包含了近 500 多款常用软件，常用的有Sublime text,git,Google Chrome······</p>
<h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><a id="more"></a>
<p><strong><a href="https://mobaxterm.mobatek.net/" target="_blank" rel="noopener">MobaXterm</a></strong>, 功能强大<br><strong><a href="http://cmder.net/" target="_blank" rel="noopener">cmder</a>：</strong>  不多说，windows命令行神器，支持tab补全，支持了大部分的Linux命令······</p>
<h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><p><strong><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime text3</a>：</strong>基于 Python 语言的外挂 API,跨平台（Windows、Linux 和 Mac OS X）,兼容 TextMate 的语言标记语法。<br>关于软件的配置方面见：<strong><a href="https://jeffjade.com/2015/12/15/2015-04-17-toss-sublime-text/" target="_blank" rel="noopener">这里</a></strong><br><strong>sublime text 3 3143 license</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">—– BEGIN LICENSE —–</span><br><span class="line">TwitterInc</span><br><span class="line">200 User License</span><br><span class="line">EA7E-890007</span><br><span class="line">1D77F72E 390CDD93 4DCBA022 FAF60790</span><br><span class="line">61AA12C0 A37081C5 D0316412 4584D136</span><br><span class="line">94D7F7D4 95BC8C1C 527DA828 560BB037</span><br><span class="line">D1EDDD8C AE7B379F 50C9D69D B35179EF</span><br><span class="line">2FE898C4 8E4277A8 555CE714 E1FB0E43</span><br><span class="line">D5D52613 C3D12E98 BC49967F 7652EED2</span><br><span class="line">9D2D2E61 67610860 6D338B72 5CF95C69</span><br><span class="line">E36B85CC 84991F19 7575D828 470A92AB</span><br><span class="line">—— END LICENSE ——</span><br></pre></td></tr></table></figure>
<h4 id="同类也有："><a href="#同类也有：" class="headerlink" title="同类也有："></a>同类也有：</h4><ul>
<li><strong><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VS Code</a>：</strong>毕竟宇宙级的</li>
<li><strong><a href="https://atom.io/" target="_blank" rel="noopener">Atom</a>：</strong>Atom是由GitHub开发的自由及开放源代码的文字与代码编辑器，支持OS X、Windows和Linux操作系统，支持Node.js所写的插件，并内置Git版本控制系统。(维基百科)，插件需要科学上网</li>
<li><strong><a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a>：</strong>Notepad++，由台湾人侯今吾基于同是开放源代码的Scintilla文本编辑组件并独力研发，整个项目托管于SourceForge.net之上，并两度获得SourceForge社区选择奖——最佳开发工具。（维基百科）</li>
<li>由于sublime现在有些功能没有， 我现在使用的是VScode</li>
</ul>
<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p>没什么说的，大多数网上都能下载，<strong><a href="https://account.jetbrains.com" target="_blank" rel="noopener">JetBrains</a></strong>家的东西都不错，由于对学生免费，即用教育网邮箱注册，就能获得大学在校的使用时间，分享一个用于接收EDU邮箱的网站：<strong><a href="http://mail.anime.edu.gr:3000/" target="_blank" rel="noopener">点击这里</a></strong></p>
<p>待续—–</p>
<ul>
<li><strong>注：</strong>0x13哒的缘故，上面网址有的需要突破GFW的封锁，科学上网详见：<a href="https://linraner.github.io/2017/10/22/%E9%80%9A%E5%90%91%E5%A4%96%E7%BD%91%E7%9A%84%E6%A2%AF%E5%AD%90/" target="_blank" rel="noopener">这里</a></li>
</ul>
]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
</search>
