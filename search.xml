<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java 线程检测死锁]]></title>
    <url>%2F2019%2F08%2F10%2FJava%E7%BA%BF%E7%A8%8B%E6%A3%80%E6%B5%8B%E6%AD%BB%E9%94%81%2F</url>
    <content type="text"><![CDATA[死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。 Java 线程中我们构造两个相互等待对方释放资源的线程就构成了死锁。代码： 12345678910111213141516171819202122232425262728293031323334353637383940public class DeadLockSimulation &#123; private static String A = "a"; private static String B = "b"; public static void main(String [] args) &#123; new DeadLockSimulation ().deadLock (); &#125; private void deadLock() &#123; Thread t1 = new Thread (new Runnable () &#123; @Override public void run() &#123; synchronized (A) &#123; try &#123; Thread.sleep (1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace (); &#125; synchronized (B) &#123; System.out.println ("t1"); &#125; &#125; &#125; &#125;); Thread t2 = new Thread (new Runnable () &#123; @Override public void run() &#123; synchronized (B) &#123; synchronized (A) &#123; System.out.println ("t2"); &#125; &#125; &#125; &#125;); t1.start (); t2.start (); &#125;&#125; 运行上边的代码产生死锁。JDK 自带的工具有 jconsole、jvisualvm、jstack 等。 jvisualvm运行 jvisualvm 如下： 发现提示检测到死锁。 jstack查看进程号： 12345678jps // 查看 Java 任务进程号 2784 Jps8672 Main18068 Launcher12520 KotlinCompileDaemon16776 DeadLockSimulation957616668 RemoteMavenServer 运行 jstack。 1234567891011121314151617181920212223jstack [进程号] // 查看当前进程堆栈 Found one Java-level deadlock: ============================= "Thread-0": waiting to lock monitor 0x0000012f11b53e80 (object 0x0000000741d763e8, a java.lang.String), which is held by "Thread-1" "Thread-1": waiting to lock monitor 0x0000012f11b51e80 (object 0x0000000741d76400, a java.lang.String), which is held by "Thread-0" Java stack information for the threads listed above: =================================================== "Thread-0": at com.lin.juc.mydesign.DeadLockSimulation$1.run (DeadLockSimulation.java:28) - waiting to lock &lt;0x0000000741d763e8&gt; (a java.lang.String) - locked &lt;0x0000000741d76400&gt; (a java.lang.String) at java.lang.Thread.run (java.base@11.0.1/Thread.java:834) "Thread-1": at com.lin.juc.mydesign.DeadLockSimulation$2.run (DeadLockSimulation.java:39) - waiting to lock &lt;0x0000000741d76400&gt; (a java.lang.String) - locked &lt;0x0000000741d763e8&gt; (a java.lang.String) at java.lang.Thread.run (java.base@11.0.1/Thread.java:834) Found 1 deadlock. MXBeanMXBean 是 JDK 自带的用于扫描程序是否存在死锁包， 但是扫描的过程中存在性能损耗。 代码： 1234567891011121314151617public class ScanDeadLock &#123; public void scanDeadLock() &#123; ThreadMXBean mxBean = ManagementFactory.getThreadMXBean (); Runnable runnable = () -&gt; &#123; long[] ids = mxBean.findDeadlockedThreads (); System.out.println ("扫描死锁..."); if (ids != null) &#123; ThreadInfo [] threadInfos = mxBean.getThreadInfo (ids); for (ThreadInfo info : threadInfos) &#123; System.out.println ("info =" + info); &#125; &#125; &#125;; ExecutorService executorService = Executors.newScheduledThreadPool (4); executorService.execute (runnable); &#125;&#125; 死锁预防 避免一个线程同时获取多个锁。 避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。 尝试使用定时锁，使用 lock.tryLock（timeout）来替代使用内部锁机制。 对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。]]></content>
      <tags>
        <tag>Java</tag>
        <tag>notes</tag>
        <tag>Lock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 两个线程之间共享数据]]></title>
    <url>%2F2019%2F08%2F07%2FJava%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[Java 里面进行多线程通信的主要方式就是共享内存的方式，共享内存主要的关注点有两个： 可见性 和 有序性原子性 。 Java 内存模型（JMM）解决了可见性和有序性的问题，而锁解决了原子性的问题，理想情况下我们希望做到 “同步” 和 “互斥”。 有以下常规实现方法： 一、数据抽象成一个类，对数据操作的方法封装在类里 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455public class MyData1 &#123; private int j = 0; public static void main(String [] args) &#123; MyData1 data = new MyData1 (); AddRunnable addRunnable = new AddRunnable (data); DecRunnable decRunnable = new DecRunnable (data); new Thread (addRunnable).start (); new Thread (decRunnable).start (); &#125; public synchronized void add() &#123; j++; System.out.println ("线程：" + Thread.currentThread ().getName () + "j 为：" + j); &#125; public synchronized void dec() &#123; j--; System.out.println ("线程：" + Thread.currentThread ().getName () + "j 为：" + j); &#125; public int getData() &#123; return j; &#125;&#125;class AddRunnable implements Runnable &#123; MyData1 data1 = new MyData1 (); public AddRunnable(MyData1 data1) &#123; this.data1 = data1; &#125; @Override public void run() &#123; data1.add (); &#125;&#125;class DecRunnable implements Runnable &#123; MyData1 data1 = new MyData1 (); public DecRunnable(MyData1 data1) &#123; this.data1 = data1; &#125; @Override public void run() &#123; data1.dec (); &#125;&#125; 二、Runnable 对象作为一个类的内部类，共享数据作为这个类的内部变量，每个线程对类的操作封装在外部类中，从而实现各个数据之间的互斥和同步，内部类的各个 Runnable 对象都可以调用外部方法1234567891011121314151617181920212223242526272829303132333435363738public class MyData2 &#123; private int j = 0; public synchronized void add() &#123; j++; System.out.println ("线程：" + Thread.currentThread ().getName () + "j 为：" + j); &#125; public synchronized void dec() &#123; j--; System.out.println ("线程：" + Thread.currentThread ().getName () + "j 为：" + j); &#125; public int getData() &#123; return j; &#125;&#125;class TestThread &#123; public static void main(String [] args) &#123; final MyData2 data = new MyData2 (); for (int i = 0; i &lt; 2; i++) &#123; new Thread (new Runnable () &#123; @Override public void run() &#123; data.add (); &#125; &#125;).start (); new Thread (new Runnable () &#123; @Override public void run() &#123; data.dec (); &#125; &#125;).start (); &#125; &#125;&#125;]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Manacher 算法 - 最长回文串]]></title>
    <url>%2F2019%2F07%2F27%2FManacher-%E5%9B%9E%E6%96%87%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[题目求解字符串最长回文串。 leetcode: 最长回文子串 样例Input12341211daccbbabb Output12341211accbbabb Manacher 算法，时间复杂度 O (n), 空间复杂度 O (1)。 步骤先对 s 串处理转换为奇数长度的串。1234s = &quot;12212321&quot;==&gt;S # 1 # 2 # 2 # 1 # 2 # 3 # 2 # 1 #P 1 2 1 2 5 2 1 4 1 2 1 6 1 2 1 2 1 p [i] 表示记录以字符 S [i] 为中心的最长回文子串向左或向右扩张的长度（包括 S [i]）。即以 i 为原点的最大回文半径。 Manacher 算法增加两个辅助变量 id 和 mx。 id 代表当前 “已经匹配完毕的结尾最远的回文串” 中心为 s 的第 ID 位。 mx = p [i] + id 代表当前 “已经匹配完毕的结尾最远的回文串” 到达了 s 的第 Mx 位。 最长回文子串长度 = p [i] - 1 = 5。 2*id - i 是 i 关于 id 的对称点 故 p [i] = min (p [2*id-i], mx-i) 主要代码： 123456789101112131415// 对 s 进行修改 ...for (i = 1; i &lt; s.length ()-1; i++) &#123; p [i] = mx &gt; i ? min (p [2 * id - i], mx - i) : 1; while (s [i + p [i]] == s [i - p [i]]) p [i]++; if (i + p [i] &gt; mx) &#123; mx = i + p [i]; id = i; &#125;&#125;...// 求结果串 ac 代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849ipublic class Main &#123; public static void main(String [] args) throws InterruptedException &#123; String s = "12212321"; &#125;&#125;class Solution &#123; private static String preProcess(String s) &#123; int n = s.length (); if (n == 0) &#123; return "^$"; &#125; StringBuilder ret = new StringBuilder ("^"); for (int i = 0; i &lt; n; i++) ret.append ("#").append (s.charAt (i)); ret.append ("#$"); return ret.toString (); &#125; public String longestPalindrome(String s) &#123; String t = s; s = preProcess (s); int n = s.length (); int[] p = new int[n]; int mx = 0, id = 0; for (int i = 1; i &lt; n - 1; i++) &#123; p [i] = (mx &gt; i) ? Math.min (p [2 * id - i], mx - i) : 1; while (s.charAt (i + p [i]) == s.charAt (i - p [i])) &#123; p [i]++; &#125; if (i + p [i] &gt; mx) &#123; mx = i + p [i]; id = i; &#125; &#125; int maxLen = 0; int centerIndex = 0; for (int i = 1; i &lt; p.length - 1; i++) &#123; if (p [i] &gt; maxLen) &#123; maxLen = p [i]; centerIndex = i; &#125; &#125; int start = (centerIndex - maxLen) / 2; return t.substring (start, start + maxLen - 1); &#125;&#125; 参考Manacher 算法]]></content>
      <tags>
        <tag>algorithm</tag>
        <tag>Java</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java 基础复习（一）]]></title>
    <url>%2F2019%2F05%2F01%2FJava%E5%A4%8D%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Java 基础面向对象六原则一法则单一职责原则（Single-Resposibility Principle）一个类只做它该做的事情。（单一职责原则想表达的就是 “高内聚”，写代码最终极的原则只有六个字 “高内聚、低耦合”，所谓的高内聚就是一个代码模块只完成一项功能，在面向对象中，如果只让一个类完成它该做的事，而不涉及与它无关的领域就是践行了高内聚的原则，这个类就只有单一职责。另一个是模块化一个好的软件系统，它里面的每个功能模块也应该是可以轻易的拿到其他系统中使用的，这样才能实现软件复用的目标。）。 开放封闭原则（Open-Closed principle）软件实体应当对扩展开放，对修改关闭。（在理想的状态下，当我们需要为一个软件系统增加新功能时，只需要从原来的系统派生出一些新类就可以，不需要修改原来的任何一行代码。要做到开闭有两个要点：1. 抽象是关键，一个系统中如果没有抽象类或接口系统就没有扩展点；2. 封装可变性，将系统中的各种可变因素封装到一个继承结构中，如果多个可变因素混杂在一起，系统将变得复杂而换乱，如果不清楚如何封装可变性） Liskov 替换原则（Liskov-Substituion Principle）里氏替换原则，任何时候都可以用子类型替换掉父类型。（关于里氏替换原则的描述，Barbara Liskov 女士的描述比这个要复杂得多，但简单的说就是能用父类型的地方就一定能使用子类型。里氏替换原则可以检查继承关系是否合理，如果一个继承关系违背了里氏替换原则，那么这个继承关系一定是错误的，需要对代码进行重构。例如让猫继承狗，或者狗继承猫，又或者让正方形继承长方形都是错误的继承关系，因为你很容易找到违反里氏替换原则的场景。需要注意的是：子类一定是增加父类的能力而不是减少父类的能力，因为子类比父类的能力更多，把能力多的对象当成能力少的对象来用当然没有任何问题。）代表约定、代表角色，能否正确的使用接口一定是编程水平高低的重要标识。） 依赖倒置原则（Dependecy-Inversion Principle）面向接口编程。（该原则说得直白和具体一些就是声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型，因为抽象类型可以被它的任何一个子类型所替代，请参考下面的里氏替换原则。） 接口隔离原则（Interface-Segregation Principle）接口要小而专，绝不能大而全。（臃肿的接口是对接口的污染，既然接口表示能力，那么一个接口只应该描述一种能力，接口也应该是高度内聚的。例如，琴棋书画就应该分别设计为四个接口，而不应设计成一个接口中的四个方法，因为如果设计成一个接口中的四个方法，那么这个接口很难用，毕竟琴棋书画四样都精通的人还是少数，而如果设计成四个接口，会几项就实现几个接口，这样的话每个接口被复用的可能性是很高的。Java 中的接口代表能力、 分离的手段主要有以下两种：1. 委托分离，通过增加一个新的类型来委托客户的请求，隔离客户和接口的直接依赖，但是会增加系统的开销。2. 多重继承分离，通过接口多继承来实现客户的需求，这种方式是较好的。 合成聚合复用原则优先使用聚合或合成关系复用代码。（通过继承来复用代码是面向对象程序设计中被滥用得最多的东西，因为所有的教科书都无一例外的对继承进行了鼓吹从而误导了初学者，类与类之间简单的说有三种关系，Is-A 关系、Has-A 关系、Use-A 关系，分别代表继承、关联和依赖。其中，关联关系根据其关联的强度又可以进一步划分为关联、聚合和合成，但说白了都是 Has-A 关系，合成聚合复用原则想表达的是优先考虑 Has-A 关系而不是 Is-A 关系复用代码，原因嘛可以自己从百度上找到一万个理由，需要说明的是，即使在 Java 的 API 中也有不少滥用继承的例子，例如 Properties 类继承了 Hashtable 类，Stack 类继承了 Vector 类，这些继承明显就是错误的，更好的做法是在 Properties 类中放置一个 Hashtable 类型的成员并且将其键和值都设置为字符串来存储数据，而 Stack 类的设计也应该是在 Stack 类中放一个 Vector 对象来存储数据。记住：任何时候都不要继承工具类，工具是可以拥有并可以使用的，而不是拿来继承的。） 迪米特法则迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。再复杂的系统都可以为用户提供一个简单的门面，Java Web 开发中作为前端控制器的 Servlet 或 Filter 不就是一个门面吗，浏览器对服务器的运作方式一无所知，但是通过前端控制器就能够根据你的请求得到相应的服务。调停者模式也可以举一个简单的例子来说明，例如一台计算机，CPU、内存、硬盘、显卡、声卡各种设备需要相互配合才能很好的工作，但是如果这些东西都直接连接到一起，计算机的布线将异常复杂，在这种情况下，主板作为一个调停者的身份出现，它将各个设备连接在一起而不需要每个设备之间直接交换数据，这样就减小了系统的耦合度和复杂度。 Java 如何实现的平台无关 Java 语言规范 通过规定 Java 语言中基本数据类型的取值范围和行为 Class 文件 所有 Java 文件要编译成统一的 Class 文件 Java 虚拟机 通过 Java 虚拟机将 Class 文件转成对应平台的二进制文件等 JVM 支持哪些语言（Kotlin、Groovy、JRuby、Jython、Scala） 值传递、引用传递Java 中只有值传递12345678910111213141516171819202122232425public class Main &#123; public static void main(String [] args) &#123; int a = 10; Integer b = 20; int[] arr = &#123;1, 2&#125;; swap (a, b); System.out.println (String.format ("a:% d b:% d", a, b)); swap (arr); System.out.println (Arrays.toString (arr)); &#125; // 对于对象而言传递的是对象引用的地址作为值 static void swap(int a, Integer b) &#123; int t = a; a = b; b = t; &#125; static void swap(int[] arr) &#123; arr [0] = 996; &#125;&#125;/**OutPut:a:10 b:20[996, 2]**/ 值传递（pass by value）是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。 引用传递（pass by reference）是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。 成员变量和方法作用域 作用域 当前类 同 package 子孙类 不同 package public √ √ √ √ protected √ √ √ × fridendly (默认) √ √ × × private √ × × × 例子：protected 在其子类中可以访问，无论是子类内部还是子类的实例，无论它们是在哪个包中，但如果子类与父类不在同一个包中，在子类中用父类的实例去访问的话不可以。 名称 说明 备注 public 可以被任何类访问 protected 可以被同一包中的所有类访问 子类没有在同一包中也可以访问 private 只能够被 当前类的方法访问 缺省无访问修饰符 只能够被 当前类的方法访问 如果子类没有在同一个包中，也不能访问 数据类型八种基本数据类型：整型（byte8、short16、int32、long64)、浮点型（float32、double63）、布尔型（boolean8）、字符型（char16）。 自动转换顺序从低到高的顺序转换。不同类型数据间的优先关系如下：低 ———————————————&gt; 高byte,short,char-&gt; int -&gt; long -&gt; float -&gt; double “ 除了 long 和 double 类型 ，Java 基本数据类型都是的简单读写都是原子的，而简单读写就是赋值和 return 语句。” 因此而对于其他自加自减以及其他运算操作，是非原子操作。基本类型的数据对于其他线程来说不能保证是最新修改值，因此，声明为 volative 可以保证可视性。 对于 32 位操作系统来说，单次操作能处理的最长长度为 32bit，而 long 类型 8 字节 64bit，所以对 long 的读写都要两条指令才能完成（即每次读写 64bit 中的 32bit）。如果 JVM 要保证 long 和 double 读写的原子性，势必要做额外的处理。不加 volatile 的话 ，并发情况下针对某个元素的访问可能出现脏读 (cpu cache 导致的)，单纯的替换如果允许脏读的话 ，可以不加这些修饰符 ，如果涉及到非幂等操作 ，还是要用同步修饰符。 Integer 的缓存机制缓存支持 - 128 到 127 之间的自动装箱过程。最大值 127 可以通过 - XX:AutoBoxCacheMax=size 修改。 缓存通过一个 for 循环实现。从低到高并创建尽可能多的整数并存储在一个整数数组中。这个缓存会在 Integer 类第一次被使用的时候被初始化出来。以后，就可以使用缓存中包含的实例对象，而不是创建一个新的实例 (在自动装箱的情况下)。Java 5 范围是固定的 - 128 至 +127。Java 6 中，可以通过 java.lang.Integer.IntegerCache.high 设置最大值。根据应用程序的实际情况灵活地调整来提高性能。到底是什么原因选择这个 - 128 到 127 范围呢？ Byte, Short, Long 有固定范围: -128 到 127。对于 Character, 范围是 0 到 127。除了 Integer 以外，这个范围都不能改变。 字符串的不可变性123String s1 = "asd";//s1 保存 String 对象的引用 String s2 = s1;//s2 保存为 s1 的引用 s1 = s1.replace ("a", "asd");// 保存新创建对象的引用 repalce 源码，每次都产生一个新的 String 对象12345678910111213141516171819202122232425public String replace(char oldChar, char newChar) &#123; if (oldChar != newChar) &#123; int len = value.length; int i = -1; char[] val = value; /* avoid getfield opcode */ while (++i &lt; len) &#123; if (val [i] == oldChar) &#123; break; &#125; &#125; if (i &lt; len) &#123; char buf [] = new char[len]; for (int j = 0; j &lt; i; j++) &#123; buf [j] = val [j]; &#125; while (i &lt; len) &#123; char c = val [i]; buf [i] = (c == oldChar) ? newChar : c; i++; &#125; return new String (buf, true);// 构造新的 String 对象 &#125; &#125; return this; &#125; String 拼接String s =&quot;a&quot;+&quot;b&quot;，编译器会进行常量折叠 (因为两个都是编译期常量，编译期可知)，即变成 String s =”ab”。 对于能够进行优化的 (String s = “a” + 变量 等) 底层是 StringBuilder 的 append () 方法替代，最后调用 toString () 方法 (底层就是一个 new String ())，Java 本身是不支持运算符重载的。 对于 Java 的字符串拼接从效率比较： StringBuilder&gt;StringBuffer（synchronized）&gt;concat&gt;+&gt;StringUtils.join Arrays.asList 获得的 List 使用时需要注意什么 asList 得到的只是一个 Arrays 的内部类，一个原来数组的视图 List，因此如果对它进行增删操作会报错 用 ArrayList 的构造器可以将其转变成真正的 ArrayList fail-fast 和 fail-safeJava 集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生 fail-fast 机制。记住是有可能，而不是一定。例如：假设存在两个线程（线程 1、线程 2），线程 1 通过 Iterator 在遍历集合 A 中的元素，在某个时候线程 2 修改了集合 A 的结构（是结构上面的修改，而不是简单的修改集合元素的内容），那么这个时候程序就会抛出 ConcurrentModificationException 异常。 例子：12345678910111213List&lt;String&gt; fruits = new ArrayList&lt;String&gt;() &#123;&#123; add ("apple"); add ("orange"); add ("orange"); add ("chestnut");&#125;&#125;;for (String fruit : fruits) &#123; if (fruit.equals ("orange")) &#123; fruits.remove (fruit); &#125;&#125;System.out.println (fruits.toString ()); 代码抛出 CMException 异常，在增强 for 循环中，集合遍历是通过 iterator 进行的，但是元素的 add/remove 却是直接使用的集合类自己的方法。这就导致 iterator 在遍历的时候，会发现有一个元素在自己不知不觉的情况下就被删除 / 添加了，就会抛出一个异常，用来提示用户，可能发生了并发修改。 java.util.concurrent 包下的容器都是 fail-safe 的，可以在多线程下并发使用，并发修改。同时也可以在 foreach 中进行 add/remove 。 例子：12345678910111213List&lt;String&gt; fruits = new CopyOnWriteArrayList&lt;String&gt;() &#123;&#123; add ("apple"); add ("orange"); add ("orange"); add ("chestnut");&#125;&#125;;for (String fruit : fruits) &#123; if (fruit.equals ("orange")) &#123; fruits.remove (fruit); &#125;&#125;System.out.println (fruits.toString ()); 以上代码，使用 CopyOnWriteArrayList 代替了 ArrayList，就不会发生异常。 fail-safe 集合的所有对集合的修改都是先拷贝一份副本，然后在副本集合上进行的，并不是直接对原集合进行修改。并且这些修改方法，如 add/remove 都是通过加锁来控制并发的。所以，CopyOnWriteArrayList 中的迭代器在迭代的过程中不需要做 fail-fast 的并发检测。（因为 fail-fast 的主要目的就是识别并发，然后通过异常的方式通知用户）。 Copy-On-WriteCopy-On-Write 简称 COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容 Copy 出去形成一个新的内容然后再改，这是一种延时懒惰策略。 CopyOnWrite 容器即写时复制的容器。通俗的理解是当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行 Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。 CopyOnWriteArrayList 中 add/remove 等写方法是需要加锁的，目的是为了避免 Copy 出 N 个副本出来，导致并发写。读方法未加锁，这样做的好处是我们可以对 CopyOnWrite 容器进行并发的读，当然，这里读到的数据可能不是最新的。因为写时复制的思想是通过延时更新的策略来实现数据的最终一致性的，并非强一致性。 CopyOnWrite 容器是一种读写分离的思想，读和写不同的容器。而 Vector 在读写的时候使用同一个容器，读写互斥，同时只能做一件事儿。 CopyOnWrite 并发容器用于读多写少的并发场景：白名单、黑名单、商品类目的访问和更新场景。 和 ArrayList 比较，它具有以下特性： 支持高效率并发且是线程安全的 因为通常需要复制整个基础数组，所以可变操作（add ()、set () 和 remove () 等等）的开销很大 迭代器支持 hasNext (), next () 等不可变操作，但不支持可变 remove () 等操作 使用迭代器进行遍历的速度很快，并且不会与其他线程发生冲突。在构造迭代器时，迭代器依赖于不变的数组快照 迭代器Iterator 接口中提供了很多对集合元素迭代的方法。每个集合中都有可以返回迭代器对象的方法 iterator ()。迭代器在迭代的过程中可以删除底层集合的元素。 Iterator 和 ListIterator 的区别？ Iterator 可以用来遍历 Set 和 List 集合，但是 ListIterator 只能遍历 List Iterator 对集合只能向前遍历（next ()）；而 ListIterator 可以向前遍历（next ()），也可以向后遍历（previous ()） ListIterator 实现了 Iterator 接口 IO 流 BIO、NIO 和 AIO— 待续 参考Java 工程师成神之路（2019 正式版）]]></content>
      <tags>
        <tag>Java</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库事务]]></title>
    <url>%2F2019%2F04%2F10%2F%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[事务 数据库管理系统执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。 特性事务应该具有 4 个属性： 原子性 、 一致性 、 隔离性 、 持久性 。 原子性 （Atomicity）：数据库事务是一个不可分割的单位。只有事务中所有的数据库操作成功，才算整个事务才算成功。只读操作，保证一致性很简单，一旦出现错误，要么重试，要么返回错误代码。 一致性 （Consistency）：事务将数据库从一种状态转变为下一种一致的状态。事务开始之前和结束之后，数据库的完整性约束没有被破坏。例如，数据操作失败，表中姓名字段在唯一的情况下，撤销之后导致重复，从而破坏了事务的一致性。 隔离性 （Isolation）：别的称呼，并发控制（concurrency control）、可串行化（serialzability）、锁（locking）等。事务隔离性要求每个读写事务对其他事务的操作对象能实现相互分离，即事务提交之前对其他事务不可见，通常使用锁实现。 持久性 （Durability）：事务一旦提交结果是永久性的，发生宕机等事故，数据库也能将数据恢复。持久性事务保证的是高可靠性，而不是高可用性，事务本身不能完成，需要系统共同配合来实现。 分类扁平事务、带有保存点的扁平事务、链事务、嵌套事务、分布式事务。 隔离级别 未提交读 (Read Uncommitted)：允许脏读，也就是可能读取到其他会话中未提交事务修改的数据 提交读 (Read Committed)：只能读取到已经提交的数据。Oracle 等多数数据库默认都是该级别 (不重复读) 可重复读 (Repeated Read)：可重复读。在同一个事务内的查询都是事务开始时刻一致的，InnoDB 默认级别。在 SQL 标准中，该隔离级别消除了不可重复读，但是还存在幻象读 串行读 (Serializable)：完全串行化的读，每次读都需要获得表级共享锁，读写相互都会阻塞 隔离级别 脏读 丢失更新 不可重复读 幻读 并发模型 更新冲突检测 未提交读：Read Uncommited √ √ √ √ 悲观 × × 已提交读：Read commited |×|× |√|√ | 悲观 | ×|×可重复读：Repeatable Read |×|× |×| √ | 悲观 | ×|×可串行读：Serializable |× |×|× |×| 悲观 |×|× 接下来详细解释，假设有下面两个事务同时执行：12345678910111213begin; -- 事务 1insert into table1 (somevaue); -- 随意写的伪 sqlupdate table2 set aa = aa + 1 where id = 1;commit;begin; -- 事务 2select count(*) from table1; -- 第一次读 countselect aa from table2 where id = 1; -- 第一次读 aa-- 假设在这个点 事务 1 成功提交 select count(*) from table1; -- 第二次读 countselect aa from table2 where id = 1; -- 第二次读 aacommit; 串行化 不用解释了，依次执行，不会产生冲突。 可重复读 是什么意思呢？ 事务 2 执行到一半时，事务 1 成功提交： 事务 2 中 第二次读 count 得到的值和第一次读 count 得到的值不一样 (因为事务 1 新增了一条数据)，这叫幻读，不隔离新增的数据。事务 2 中 第一次读 aa 和第二次读 aa 得到的值是一样的，对刚更新的值不可见，隔离已经存在的数据。 可以重复读，读到的数据都是一样的。 读取已提交 是什么意思呢？ 事务 2 执行到一半时，事务 1 成功提交：事务 2 中 第二次读 count 得到的值和第一次读 count 得到的值不一样 (因为事务 1 新增了一条数据)，这叫幻读，不隔离新增的数据。事务 2 中 第一次读 aa 和第二次读 aa 得到的值是不一样的，对刚提交的值可见，不隔离已经存在的数据。 不可以重复读，读到的数据是不一样的 (如果成功修改)。 读取未提交 是什么意思呢？ 事务 2 执行到一半时，事务 1 还未提交：事务 2 中 第二次读 count 得到的值和第一次读 count 得到的值不一样 (因为事务 1 新增了一条数据)，这叫幻读，不隔离新增的数据。事务 2 中 第一次读 aa 和第二次读 aa 得到的值是不一样的（事务 1 未提交），对最新版本的值可见，不隔离已经存在的数据。 不可以重复读，读到的数据是不一样的。如果此时事务 1 因为其他原因回滚了，事务 2 第二次读到的数据是无意义的，因为修改没有发生 (回滚了)，这叫脏读 。 在现实环境中，串行化一般不会被使用，因为性能太低。 如果对一致性有要求，比如转账交易，那么要使用可重复读，并发性能相对较差。 原因是，为了实现可重复读，在对更新记录加锁时，除了使用记录锁，还可能会使用间隙锁锁住区间 (看 update 语句的 where 条件)，这会增加其他事务等待时间。 如果对一致性要求不高，一般使用读取已提交，由于不考虑重复读，在加锁时一般只加记录锁，不会使用间隙锁，并发性较好，据说使用的最多。 持久化事务隔离性由锁实现。原子性、一致性、持久性通过数据库的 redo log（重做日志保证原子性和持久性）和 undo log（保证一致性）完成。 redo 和 undo 都可视为恢复操作，redo 恢复事务提交的页操作，undo 回滚到某个特定版本。根据内容分别分为物理日志（页的物理修改操作）和逻辑日志（根据每行进行记录） 事务日志数据库通过事务日志来达到这个目标。 事务的每一个操作（增 / 删 / 改）产生一条日志，内容组成大概如下： LSN：一个按时间顺序分配的唯一日志序列号，靠后的操作的 LSN 比靠前的大。 TransID：产生操作的事务 ID。 PageID：被修改的数据在磁盘上的位置，数据以页为单位存储。 PrevLSN：同一个事务产生的上一条日志记录的指针。 UNDO：取消本次操作的方法，按照此方法回滚。 REDO：重复本次操作的方法，如有必要，重复此方法保证操作成功。 磁盘上每个页（保存数据的，不是保存日志的）都记录着最后一个修改该数据操作的 LSN。数据库会通过解析事务日志，将修改真正落到磁盘上 (写盘)，随后清理事务日志 (正常情况下)。 这也是数据库在保证数据安全和性能这两个点之前的折中办法： 如果每次更新都写盘，由于数据是随机的，会造成大量的随机 IO，性能会非常差 如果每次更新不马上写盘，那一旦数据库崩溃，数据就会丢失 折中的办法就是： 将数据的变更以事务日志的方式，按照时间先后追加到日志缓冲区，由特定算法写入事务日志，这是顺序 IO，性能较好 通过数据管理器解析事务日志，由特定的算法择机进行写盘 数据库恢复当数据库从崩溃中恢复时，会有以下几个步骤： 解析存在的事务日志，分析哪些事务需要回滚，哪些需要写盘 (还没来得及写盘，数据库就崩溃了)。 2.Redo，进行写盘。检测对应数据所在数据页的 LSN，如果数据页的 LSN&gt;= 事务操作的 LSN，说明已经写过盘，不然进行写盘操作。 3.Undo, 按照 LSN 倒序进行回滚 参考深入理解数据库事务 我理解的数据库事务]]></content>
      <tags>
        <tag>notes</tag>
        <tag>database</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式复习]]></title>
    <url>%2F2019%2F04%2F01%2F%E9%9D%A2%E8%AF%95-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[设计模式复习23 种设计模式主要分为三类：创建型模式、结构型模式、行为型模式。 创建型模式单例模式 实现单例模式的思路是：一个类能返回对象一个引用 (永远是同一个) 和一个获得该实例的方法（必须是静态方法，通常使用 getInstance 这个名称）；当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用；同时我们还将该类的构造函数定义为私有方法，这样其他处的代码就无法通过调用该类的构造函数来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例。 代码实现 饿汉式 线程安全 1234567class Singleton &#123; private static Singleton instance = new Singleton (); private Singleton() &#123;&#125; public static Singleton getInstance() &#123; return instance; &#125; &#125; 懒汉式 双向检查锁定 12345678910111213141516class Singleton &#123; //volatile 多线程安全，但屏蔽 Java 虚拟机优化，效率降低 private volatile static Singleton instance = null; private Singleton() &#123;&#125; public static Singleton getInstance() &#123; if (instance == null) &#123; // 锁定代码块 synchronized (Singleton.class) &#123; if (instance == null) &#123; instance = new Singleton (); &#125; &#125; &#125; return instance; &#125;&#125; 使用静态内部类实现 12345678910// IoDH 初始化不会失败使用，延迟加载 public class Singleton &#123; private static class SingletonHolder &#123; private static final Singleton instance = new Singleton (); &#125; public static Singleton getInstance()&#123; return SingletonHolder.instance; &#125; private Singleton() &#123;&#125;&#125; 使用枚举类型 123public enum Singleton&#123; INSTANCE;&#125; 枚举类反编译之后会被转换成形如 public final class T extends Enum 的定义。枚举中的各个枚举项通过 static 来定义。 一个 Java 类第一次被真正使用到的时候静态资源被初始化、Java 类的加载和初始化过程都是线程安全的（因为虚拟机在加载枚举的类的时候，会使用 ClassLoader 的 loadClass 方法，而这个方法使用同步代码块保证了线程安全），所以枚举类是线程安全的。 结构型模式代理模式 给某一个对象提供一个代理或占位符，并由代理对象来控制对原对象的访问，必须经过代理才能访问被代理对象。在应用场景上不同于装饰者模式，更偏向于代理的含义，代理模式重点在于控制对象的行为，而装饰模式侧重于增加对象的职能，为对象增加额外的职能。 结构如下： Java 中实现动态代理Java 中代理模式有动态代理、静态代理、Cglib 代理。 Java 中实现动态代理的步骤： 定义一个委托类和公共接口。 自己定义一个类（调用处理器类，即实现 InvocationHandler 接口），这个类的目的是指定运行时将生成的代理类需要完成的具体任务（包括 Preprocess 和 Postprocess），即代理类调用任何方法都会经过这个调用处理器类 生成代理对象（当然也会生成代理类），需要为他指定 (1) 委托对象 (2) 实现的一系列接口 (3) 调用处理器类的实例。因此可以看出一个代理对象对应一个委托对象，对应一个调用处理器实例。 4.Java 实现动态代理主要涉及以下几个类： java.lang.reflect.Proxy: 这是生成代理类的主类，通过 Proxy 类生成的代理类都继承了 Proxy 类，即 DynamicProxyClass extends Proxy。 java.lang.reflect.InvocationHandler: 这里称他为 “调用处理器”，他是一个接口，我们动态生成的代理类需要完成的具体内容需要自己定义一个类，而这个类必须实现 InvocationHandler 接口。 例子：12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * 接口 */interface Subject &#123; void request();&#125;public class DynamicProxyDemo01 &#123; public static void main(String [] args) &#123; RealSubject realSubject = new RealSubject ();//1. 创建委托对象 ProxyHandler handler = new ProxyHandler (realSubject);//2. 创建调用处理器对象 //3. 动态生成代理对象 Subject proxySubject = (Subject) Proxy.newProxyInstance (RealSubject.class.getClassLoader (), RealSubject.class.getInterfaces (), handler); proxySubject.request (); //4. 通过代理对象调用方法 &#125;&#125;/** * 委托类 */class RealSubject implements Subject &#123; public void request() &#123; System.out.println ("Real Subject Request"); &#125;&#125;/** * 代理类的调用处理器 */class ProxyHandler implements InvocationHandler &#123; private Subject subject; public ProxyHandler(Subject subject) &#123; this.subject = subject; &#125; @Override public Object invoke(Object proxy, Method method, Object [] args) throws Throwable &#123; // 定义预处理的工作，当然你也可以根据 method 的不同进行不同的预处理工作 System.out.println ("====before===="); Object result = method.invoke (subject, args); System.out.println ("====after===="); return result; &#125;&#125; 行为型模式观察者模式 观察者模式优点： 观察者模式在被观察者和观察者之间建立一个抽象的耦合。被观察者角色所知道的只是一个具体观察者列表，每一个具体观察者都符合一个抽象观察者的接口。被观察者并不认识任何一个具体观察者，它只知道它们都有一个共同的接口。由于被观察者和观察者没有紧密地耦合在一起，因此它们可以属于不同的抽象化层次。如果被观察者和观察者都被扔到一起，那么这个对象必然跨越抽象化和具体化层次。 观察者模式缺点： 如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 如果在被观察者之间有循环依赖的话，被观察者会触发它们之间进行循环调用，导致系统崩溃。在使用观察者模式是要特别注意这一点。 如果对观察者的通知是通过另外的线程进行异步投递的话，系统必须保证投递是以自恰的方式进行的。 虽然观察者模式可以随时使观察者知道所观察的对象发生了变化，但是观察者模式没有相应的机制使观察者知道所观察的对象是怎么发生变化的。 策略模式 策略模式也叫政策模式，是一种行为型设计模式，是一种比较简单的设计模式。策略模式采用了面向对象的继承和多态机制。 策略模式适合使用在：1. 多个类只有在算法或行为上稍有不同的场景。2. 算法需要自由切换的场景。3. 需要屏蔽算法规则的场景。 使用策略模式当然也有需要注意的地方，那么就是策略类不要太多，如果一个策略家族的具体策略数量超过 4 个，则需要考虑混合模式，解决策略类膨胀和对外暴露问题。在实际项目中，我们一般通过工厂方法模式来实现策略类的声明。 优点：1. 算法可以自由切换。2. 避免使用多重条件判断。3. 扩展性良好。 参考 为什么我墙裂建议大家使用枚举来实现单例。 代理模式及 Java 实现动态代理]]></content>
      <tags>
        <tag>notes</tag>
        <tag>interview</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见排序算法实现]]></title>
    <url>%2F2019%2F02%2F20%2F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88Java%EF%BC%89%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[排序比较 快速排序12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/** * 快速排序算法 */public static void quickSort(int[] list, int left, int right) &#123; if (left &lt; right) &#123; // 分割数组，找到分割点 int point = partition (list, left, right); // 递归调用，对左子数组进行快速排序 quickSort (list, left, point - 1); // 递归调用，对右子数组进行快速排序 quickSort (list, point + 1, right); &#125;&#125;/** * 分割数组，找到分割点 */public static int partition(int[] list, int left, int right) &#123; // 用数组的第一个元素作为基准数 int first = list [left]; while (left &lt; right) &#123; while (left &lt; right &amp;&amp; list [right] &gt;= first) &#123; right--; &#125; // 交换 swap (list, left, right); while (left &lt; right &amp;&amp; list [left] &lt;= first) &#123; left++; &#125; // 交换 swap (list, left, right); &#125; // 返回分割点所在的位置 return left;&#125;/** * 交换数组中两个位置的元素 */public static void swap(int[] list, int left, int right) &#123; int temp; if (list != null &amp;&amp; list.length &gt; 0) &#123; temp = list [left]; list [left] = list [right]; list [right] = temp; &#125;&#125; 希尔排序12345678910111213141516171819202122232425/** * 希尔排序算法 */public static void shellSort(int[] list) &#123; int len = list.length ; // 取增量 int gap = len / 2; while (gap &gt;= 1) &#123; // 无序序列 for (int i = gap; i &lt; len; i++) &#123; int temp = list [i]; int j; // 有序序列 for (j = i - gap; j &gt;= 0 &amp;&amp; list [j] &gt; temp; j = j - gap) &#123; list [j + gap] = list [j]; &#125; list [j + gap] = temp; &#125; // 缩小增量 gap = gap / 2; &#125;&#125; 堆排序12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/** * 堆排序算法 */public static void heapSort(int[] list) &#123; // 将无序堆构造成一个大根堆，大根堆有 length/2 个父节点 for (int i = list.length/ 2 - 1; i &gt;= 0; i--) &#123; headAdjust (list, i, list.length); &#125; // 逐步将每个最大值的根节点与末尾元素交换，并且再调整其为大根堆 for (int i = list.length - 1; i &gt; 0; i--) &#123; // 将堆顶节点和当前未经排序的子序列的最后一个元素交换位置 swap (list, 0, i); headAdjust (list, 0, i); &#125;&#125;/** * 构造大根堆 */public static void headAdjust(int[] list, int parent, int length) &#123; // 保存当前父节点 int temp = list [parent]; // 得到左孩子节点 int leftChild = 2 * parent + 1; while (leftChild &lt; length) &#123; // 如果 parent 有右孩子，则要判断左孩子是否小于右孩子 if (leftChild + 1 &lt; length &amp;&amp; list [leftChild] &lt; list [leftChild + 1]) &#123; leftChild++; &#125; // 父亲节点大于子节点，就不用做交换 if (temp &gt;= list [leftChild]) &#123; break; &#125; // 将较大子节点的值赋给父亲节点 list [parent] = list [leftChild]; // 然后将子节点做为父亲节点 parent = leftChild; // 找到该父亲节点较小的左孩子节点 leftChild = 2 * parent + 1; &#125; // 最后将 temp 值赋给较大的子节点，以形成两值交换 list [parent] = temp;&#125;/** * 交换数组中两个位置的元素 */public static void swap(int[] list, int top, int last) &#123; int temp = list [top]; list [top] = list [last]; list [last] = temp;&#125; 归并排序12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364/** * 归并排序算法 * @param list 待排序的列表 * @param tempList 临时列表 * @param head 列表开始位置 * @param rear 列表结束位置 */public static void mergeSort(int[] list, int[] tempList, int head, int rear) &#123; if (head &lt; rear) &#123; // 取分割位置 int middle = (head + rear) / 2; // 递归划分列表的左序列 mergeSort (list, tempList, head, middle); // 递归划分列表的右序列 mergeSort (list, tempList, middle + 1, rear); // 列表的合并操作 merge (list, tempList, head, middle + 1, rear); &#125;&#125;/** * 合并操作 (列表的两两合并) * @param list * @param tempList * @param head * @param middle * @param rear */public static void merge(int[] list, int[] tempList, int head, int middle, int rear) &#123; // 左指针尾 int headEnd = middle - 1; // 右指针头 int rearStart = middle; // 临时列表的下标 int tempIndex = head; // 列表合并后的长度 int tempLength = rear - head + 1; // 先循环两个区间段都没有结束的情况 while ((headEnd &gt;= head) &amp;&amp; (rearStart &lt;= rear)) &#123; // 如果发现右序列大，则将此数放入临时列表 if (list [head] &lt; list [rearStart]) &#123; tempList [tempIndex++] = list [head++]; &#125; else &#123; tempList [tempIndex++] = list [rearStart++]; &#125; &#125; // 判断左序列是否结束 while (head &lt;= headEnd) &#123; tempList [tempIndex++] = list [head++]; &#125; // 判断右序列是否结束 while (rearStart &lt;= rear) &#123; tempList [tempIndex++] = list [rearStart++]; &#125; // 交换数据 for (int i = 0; i &lt; tempLength; i++) &#123; list [rear] = tempList [rear]; rear--; &#125;&#125; 直接选择排序1234567891011121314151617181920212223242526272829303132/** * 直接选择排序算法 */public static void selectionSort(int[] list) &#123; int len = list.length ; // 要遍历的次数（length-1 次） for (int i = 0; i &lt; len - 1; i++) &#123; // 将当前下标定义为最小值下标 int min = i; // 遍历 min 后面的数据 for (int j = i + 1; j &lt;= len - 1; j++) &#123; // 如果有小于当前最小值的元素，将它的下标赋值给 min if (list [j] &lt; list [min]) &#123; min = j; &#125; &#125; // 如果 min 不等于 i，说明找到真正的最小值 if (min != i) &#123; swap (list, min, i); &#125; &#125;&#125;/** * 交换数组中两个位置的元素 */public static void swap(int[] list, int min, int i) &#123; int temp = list [min]; list [min] = list [i]; list [i] = temp;&#125; 直接插入排序123456789101112131415161718/** * 直接插入排序算法 */public static void insertSort(int[] list) &#123; int len = list.length ; // 从无序序列中取出第一个元素 (注意无序序列是从第二个元素开始的) for (int i = 1; i &lt; len; i++) &#123; int temp = list [i]; int j; // 遍历有序序列 // 如果有序序列中的元素比临时元素大，则将有序序列中比临时元素大的元素依次后移 for (j = i - 1; j &gt;= 0 &amp;&amp; list [j] &gt; temp; j--) &#123; list [j + 1] = list [j]; &#125; // 将临时元素插入到腾出的位置中 list [j + 1] = temp; &#125;&#125; 冒泡排序123456789101112131415161718/** * 冒泡排序算法 */public static void bubbleSort(int[] list) &#123; int len = list.length ; // 做多少轮排序（最多 length-1 轮） for (int i = 0; i &lt; len - 1; i++) &#123; // 每一轮比较多少个 for (int j = 0; j &lt; len - 1 - i; j++) &#123; if (list [j] &gt; list [j + 1]) &#123; // 交换次序 int temp = list [j]; list [j] = list [j + 1]; list [j + 1] = temp; &#125; &#125; &#125;&#125;]]></content>
      <tags>
        <tag>algorithm</tag>
        <tag>java</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[问卷星自动提交脚本]]></title>
    <url>%2F2019%2F01%2F01%2F%E9%97%AE%E5%8D%B7%E6%98%9F%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[思路 分析页面结构，问题标号: q + 第几题, 问题选项: q + 第几题 +_第几个选项. 对一次提交进行抓包，抓取 post 数据包.对 submidata 进行解码得到如下.明显看出是 题号 $ 选项号} 组成的. 写 python 脚本构造 post 请求。利用 X-Forwarded-For 绕过服务器 IP 地址过滤. 12345678910111213141516171819202122import requestsfrom time import *from random import randintfor i in range (10): header = &#123; 'Host': 'www.wjx.cn', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0', 'X-Forwarded-For': str (randint (1, 255)) + '.' + str (randint (1, 255)) + '.' + str (randint (1, 255)) + '.' + str ( randint (1, 255)), 'Referer': 'https://www.wjx.cn###.aspx', 'Cookie': 'acw_tc=2f624a1f154##', &#125; print ("第" + str (i) + "提交" + "Using IP:" + header ['X-Forwarded-For'] + ' to compalte this Q.') data = "submitdata=1$% s&#125;2$% s&#125;3$% s&#125;4$% s&#125;5$% s&#125;6$% s&#125;7$% s&#125;8$3&#125;9$-3&#125;10$-3&#125;11$% s&#125;12$% s&#125;13$% s&#125;14$% s&#125;15$% s&#125;16$% s&#125;17$% s&#125;18$% s" % ( str (randint (1, 7)), str (randint (1, 9)), str (randint (1, 4)), str (randint (1, 3)), str (randint (1, 4)), str (randint (1, 3)), str (randint (1, 3)), str (randint (1, 2)), str (randint (1, 2)), str (randint (1, 4)), str (randint (1, 2)), str (randint (1, 2)), str (randint (1, 3)), str (randint (1, 2)), str (randint (1, 3))) url = 'https://www.wjx.cn/joinnew/processjq.ashx?curid=34131883&amp;starttime=2019%2F1%2F25%2021%3A37%3A12&amp;source=directphone&amp;submittype=1&amp;ktimes=213&amp;hlv=1&amp;rn=1034449004.44465961&amp;t=1548423507485&amp;jqnonce=c5825f6b-67d7-40c8-ba2e-e1ffb82c4642&amp;jqsign=%606%3B16e5a.54g4.73%60%3B.ab1f.f2eea%3B1%607571' r = requests.post (url, data=data, headers=header) # print (r)print ("Complate.")]]></content>
      <tags>
        <tag>skill</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[清除提交到 github 上的账号密码]]></title>
    <url>%2F2018%2F11%2F01%2F%E6%B8%85%E9%99%A4%E6%8F%90%E4%BA%A4%E5%88%B0github%E4%B8%8A%E7%9A%84%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[一、删库。。。。 二、使用 BFG Repo-Cleaner地址： BFG Repo-Cleaner 简单使用12345# 克隆副本 git clone --mirror git://example.com/example.git# 清理分支 java -jar bfg-1.13.0.jar --replace-text pwd.txt example.gitcd example.git &amp; git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive &amp; git push git 取消对某个文件的 track.gitignore 无法对已经 track 的文件忽略123git rm --cached example.filesgit commitgit push]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java8 Stream]]></title>
    <url>%2F2018%2F10%2F15%2FJava8%20Stream%2F</url>
    <content type="text"><![CDATA[代码示例：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179public class Java8Stream &#123; public static void main(String args []) &#123; System.out.println ("使用 Java 7:"); // 计算空字符串 List&lt;String&gt; strings = Arrays.asList ("abc", "", "bc", "efg", "abcd", "", "jkl"); System.out.println ("列表:" + strings); long count = getCountEmptyStringUsingJava7 (strings); System.out.println ("空字符数量为:" + count); count = getCountLength3UsingJava7 (strings); System.out.println ("字符串长度为 3 的数量为:" + count); // 删除空字符串 List&lt;String&gt; filtered = deleteEmptyStringsUsingJava7 (strings); System.out.println ("筛选后的列表:" + filtered); // 删除空字符串，并使用逗号把它们合并起来 String mergedString = getMergedStringUsingJava7 (strings, ","); System.out.println ("合并字符串:" + mergedString); List&lt;Integer&gt; numbers = Arrays.asList (3, 2, 2, 3, 7, 3, 5); // 获取列表元素平方数 List&lt;Integer&gt; squaresList = getSquares (numbers); System.out.println ("平方数列表:" + squaresList); List&lt;Integer&gt; integers = Arrays.asList (1, 2, 13, 4, 15, 6, 17, 8, 19); System.out.println ("列表:" + integers); System.out.println ("列表中最大的数 :" + getMax (integers)); System.out.println ("列表中最小的数 :" + getMin (integers)); System.out.println ("所有数之和 :" + getSum (integers)); System.out.println ("平均数 :" + getAverage (integers)); System.out.println ("随机数:"); // 输出 10 个随机数 Random random = new Random (); for (int i = 0; i &lt; 10; i++) &#123; System.out.println (random.nextInt ()); &#125; System.out.println ("使用 Java 8:"); System.out.println ("列表:" + strings); count = strings.stream ().filter (string -&gt; string.isEmpty ()).count (); System.out.println ("空字符串数量为:" + count); count = strings.stream ().filter (string -&gt; string.length () == 3).count (); System.out.println ("字符串长度为 3 的数量为:" + count); filtered = strings.stream ().filter (string -&gt; !string.isEmpty ()).collect (Collectors.toList ()); System.out.println ("筛选后的列表:" + filtered); mergedString = strings.stream ().filter (string -&gt; !string.isEmpty ()).collect (Collectors.joining (",")); System.out.println ("合并字符串:" + mergedString); squaresList = numbers.stream ().map (i -&gt; i * i).distinct ().collect (Collectors.toList ()); System.out.println ("Squares List:" + squaresList); System.out.println ("列表:" + integers); IntSummaryStatistics stats = integers.stream ().mapToInt ((x) -&gt; x).summaryStatistics (); System.out.println ("列表中最大的数 :" + stats.getMax ()); System.out.println ("列表中最小的数 :" + stats.getMin ()); System.out.println ("所有数之和 :" + stats.getSum ()); System.out.println ("平均数 :" + stats.getAverage ()); System.out.println ("随机数:"); random.ints ().limit (10).sorted ().forEach (System.out::println); // 并行处理 count = strings.parallelStream ().filter (string -&gt; string.isEmpty ()).count (); System.out.println ("空字符串的数量为:" + count); &#125; private static int getCountEmptyStringUsingJava7(List&lt;String&gt; strings) &#123; int count = 0; for (String string : strings) &#123; if (string.isEmpty ()) &#123; count++; &#125; &#125; return count; &#125; private static int getCountLength3UsingJava7(List&lt;String&gt; strings) &#123; int count = 0; for (String string : strings) &#123; if (string.length () == 3) &#123; count++; &#125; &#125; return count; &#125; private static List&lt;String&gt; deleteEmptyStringsUsingJava7(List&lt;String&gt; strings) &#123; List&lt;String&gt; filteredList = new ArrayList&lt;String&gt;(); for (String string : strings) &#123; if (!string.isEmpty ()) &#123; filteredList.add (string); &#125; &#125; return filteredList; &#125; private static String getMergedStringUsingJava7(List&lt;String&gt; strings, String separator) &#123; StringBuilder stringBuilder = new StringBuilder (); for (String string : strings) &#123; if (!string.isEmpty ()) &#123; stringBuilder.append (string); stringBuilder.append (separator); &#125; &#125; String mergedString = stringBuilder.toString (); return mergedString.substring (0, mergedString.length () - 2); &#125; private static List&lt;Integer&gt; getSquares(List&lt;Integer&gt; numbers) &#123; List&lt;Integer&gt; squaresList = new ArrayList&lt;Integer&gt;(); for (Integer number : numbers) &#123; Integer square = new Integer (number.intValue () * number.intValue ()); if (!squaresList.contains (square)) &#123; squaresList.add (square); &#125; &#125; return squaresList; &#125; private static int getMax(List&lt;Integer&gt; numbers) &#123; int max = numbers.get (0); for (int i = 1; i &lt; numbers.size (); i++) &#123; Integer number = numbers.get (i); if (number.intValue () &gt; max) &#123; max = number.intValue (); &#125; &#125; return max; &#125; private static int getMin(List&lt;Integer&gt; numbers) &#123; int min = numbers.get (0); for (int i = 1; i &lt; numbers.size (); i++) &#123; Integer number = numbers.get (i); if (number.intValue () &lt; min) &#123; min = number.intValue (); &#125; &#125; return min; &#125; private static int getSum(List numbers) &#123; int sum = (int) (numbers.get (0)); for (int i = 1; i &lt; numbers.size (); i++) &#123; sum += (int) numbers.get (i); &#125; return sum; &#125; private static int getAverage(List&lt;Integer&gt; numbers) &#123; return getSum (numbers) /numbers.size (); &#125;&#125;]]></content>
      <tags>
        <tag>java</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java8 Date AND Time API]]></title>
    <url>%2F2018%2F10%2F05%2FJava8%20Date%20Time%20API%2F</url>
    <content type="text"><![CDATA[Java8 引入了新的时间类使用 LocalDate 和 LocalTime创建 LocalDate 对象并读取值1234567891011121314151617//2013-03-06LocalDate date = LocalDate.of (2012,03,06);//2012int year = date.getYear ();//MARCHMonth month = date.getMonth ();//TUESDAYDayOfWeek dow = date.getDayOfWeek ();//6int day = date.getDayOfMonth ();//31int len = date.lengthOfMonth ();//falseboolean leap = date.isLeapYear ();// 使用工厂方法获取系统日期 LocalDate today = LocalDate.now ();LocalTime time = LocalTime.now ().withNano (0);// 去除毫秒 TemporalField 是一个接口，定义了如何访问 temporal 对象某个字段的值. ChronoField 枚举实现这一接口. 123int year = date.get (ChronoField.YEAR);int month = date.get (ChronoField.MONTH_OF_YEAR);int day = date.get (ChronoField.DAY_OF_MONTH); LocalDate 和 LocalTime 都可以解析字符串创建. 12LocalDate date = LocalDate.parse ("2012-12-22");LocalTime time = LocalTime.parse ("22:22:22"); 操作、解析和格式化使用 TemporalAdjuster]]></content>
      <tags>
        <tag>java</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JSP 九大内置对象常用方法]]></title>
    <url>%2F2018%2F10%2F01%2FJSP%20%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1. request 对象常用方法request 是来自客户端的请求。客户端的请求信息封装在 request 对象中。以下 HttpServletRequest 类的实例. 方法 (类型 + 方法名) 描述 String getParameter (String strTextName) 获取表单提交信息 Enumeration getParameterNames () 返回可用参数的枚举 String [] getParameterValues (String name) 返回包含参数 name 的所有的数组 Enumeration getAttributeNames () 返回所有属性名的属性值 Object getAttribute (String name) 返回指定属性的属性值 String getCharacterEncoding () 返回字节编码方式 String getProtocol () 获取用户使用的协议 String getServletPath () 获取用户提交信息的页面 String getMethod () 获取客户提交信息的方式 BufferReader getHeader () 获取 HTTP 头文件的 accept、accept-encoding 和 Host 的值 String getRemoteAddr () 获取客户的 IP 地址 String getRemoteHost () 获取客户机的名称 String getserverName () 获取服务器的名称 int getServerPort () 获取服务器端口号 2. resopnse 对象常用方法resopnse 对象代表的是对客户端的相应。向客户端发送文字时直接使用。以下是 HttpServletResopnse 类的实例. 方法 ( 类型 + 方法名 ) 描述 String getCharacterEncoding () 返回响应用的是什么字符编码 ServletOutputStream getOutputStream () 返回响应的一个二进制输出流 PrintWrite getWrite () 返回可以向客户端输出字符的一个对象 void setContentLength (int len) 设置响应头长度 void setContentTye (String type) 设置响应的 MIME 类型 void sendRedirect (Java.lang.String location) 重新定向客户端的请求 3. session 常用方法session 指的是客户端与服务器的一次回话，从客户连接到服务器的一个 WebApplication 开始，直到客户端与服务器断开连接为止。它是 HttpSession 类的实例. 方法 ( 类型 + 方法名 ) 描述 long getCreationTime () 创建 session 创建时间 public String getId () 返回 session 创建时 JSP 引擎为它设置的唯一 ID 号 long getLastAccessedTime () 返回 session 里客户端最近一次请求时间 int getMaxInactiveInterval () 返回两次请求间隔多长时间此 session 被取消 String [] getValueNames () 返回一个包含此 session 中所有可用属性的数组 void invalidate () 取消 session , 使 session 不可用 boolean isNew () 返回服务器创建爱你的一个 session , 客户端是否已经加入 void removeValue (String name) 删除 session 中指定的属性 void setMaxInactiveInterval () session 被取消 (ms) 4. out 常用方法out 对象是 JspWriter 类的实例，是向客户端输出内容常用的对象. 方法 ( 类型 + 方法名 ) 描述 void clear () 清除缓冲区的内容 void clearBuffer () 清除缓冲区的当前内容 void flush () 清空流 int getBufferSize () 返回缓冲区以字节数的大小，如果不设置为 0 int getRemaining () 返回缓冲区还有多少剩余可用 bool isAutoFlush () 返回缓冲区满时，是自动清空还是抛出异常 void close () 关闭输出流 5. page 常用方法page 指当前 JSP 页面本身，有点像类中的 this 指针，它是 java.langlObject 类的实例. 「page」对象代表正在运行的由 jsp 文件产生的类对象. 方法 ( 类型 + 方法名 ) 描述 class getClass () 返回此 Object 的类 int hashCode () 返回此 Object 的 hash 码 boolean equals (Object obj) 判断此 Object 是否与指定的 Object 对象相等 void copy (Object obj) 把此 Object 拷贝到指定的 Object 对象中 Object clone () 克隆此 Object 对象 String toString () 把此 Object 对象转换成 String 类的对象 void notify () 唤醒一个等待的进程 void notifyAll () 唤醒所有等待的进程 void wait (int timeout) 使一个进程处于等待直到 timeout 结束或者被唤醒 void wait () 使一个线程处于等待直到被唤醒 void enterMonitor () 对 Object 进行加锁 void exitMonitor () 对 Object 进行开锁 6. application 常用方法application 实现了用户间数据的共享，可存放全局变量。它开始于服务器的启动，直到服务器的关闭，在此期间，此对象将一直存在；这样在用户的前后连接或者不同用户之间的连接中，可以对此对象的同一属性进行操作；在任何地方对此对象属性的操作，都将影响到其他对象对此的访问。服务器的启动和关闭决定了 application 对象的生命。它是 ServletContest 类的实例.]]></content>
      <tags>
        <tag>JSP</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[lambda 表达式]]></title>
    <url>%2F2018%2F09%2F28%2Flambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[lambda 表达式是一行函数，是函数式编程的一种特性。 pythonlambda &lt;参数&gt;: 表达式123&gt;&gt;&gt; f = lambda a,b: a + b&gt;&gt;&gt; type (f)#&lt;type 'function'&gt; 获取整除 2 的数字12&gt;&gt;&gt; list (filter (lambda x: x%2==0, range (10)))#[0, 2, 4, 6, 8] 列表并行排序1234&gt;&gt;&gt; list1 = [1,2,3,2,3];list2 = [9,4,3,5,6]&gt;&gt;&gt; data = zip (list1, list2)&gt;&gt;&gt; data = sorted (data)&gt;&gt;&gt; list1, list2 = map (lambda t: list (t), zip (*data)) cpp c++ 里的形式是这样的[capture list] (parameter list) -&gt;return type {function body} 示例123456789101112131415161718192021222324252627#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;int main() &#123; //call the func. auto f1 = []() &#123; cout &lt;&lt; "test" &lt;&lt; endl; &#125;; f1 (); int y = 2; auto f2 = [y](int x) &#123; cout &lt;&lt; x + y &lt;&lt; endl; &#125;; f2 (4); //STL vector&lt;int&gt; v; for (int i = 0; i &lt; 10; ++i) &#123; v.push_back (i); &#125; for_each (v.begin (), v.end (), [](int n) &#123; if (n % 2 == 0) &#123; cout &lt;&lt; n &lt;&lt; ""; &#125; &#125;); return 0;&#125;]]></content>
      <tags>
        <tag>python</tag>
        <tag>函数式编程</tag>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django 重置后台密码]]></title>
    <url>%2F2018%2F09%2F28%2FDjango%E9%87%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[emmm 时间长忘记密码了 执行1$ python manage.py shell 修改12345In [1]: from django.contrib.auth.models import UserIn [2]: user = User.objects.get (username='Username')In [3]: user.set_password ('Password')In [4]: user.save ()In [5]: exit ()]]></content>
      <tags>
        <tag>skill</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c++ 的字符串与数字的转换]]></title>
    <url>%2F2018%2F09%2F28%2Fc%2B%2B%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E7%9A%84%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[数字转字符串1234567#include &lt;sstream&gt;double a = 123.456;string s;stringstream ss;ss &lt;&lt; a;ss &gt;&gt; s;ss.clear (); 12345#include &lt;map&gt;map&lt;int, char&gt; m;for (int i = 0; i &lt; 10; i++) &#123; m [i] = i + '0';&#125; 1234#include &lt;cstdio&gt;char str [10];double a = 123.456;sprintf(str, "%.3lf", a); 123char str [10];int a=175;sprintf(str,"% x",a);//10 进制转换成 16 进制，如果输出大写的字母是 sprintf (str,"% X",a) 字符串转数字 1234567#include &lt;sstream&gt;string s = "123.456";double a;stringstream ss;ss &lt;&lt; s;ss &gt;&gt; a;ss.clear (); 12345#include &lt;map&gt;map&lt;char, int&gt; m;for (int i = 0; i &lt; 10; i++) &#123; m [i+'0'] = i;&#125; 1234#include &lt;cstdio&gt;char str [] = "123.456";double a;sscanf(str, "% lf", &amp;a); 123char str []="AF";int a;sscanf(str,"% x",&amp;a); //16 进制转换成 10 进制 123456#include &lt;cstdlib&gt;int a;float b;long c;a=atoi ("32");b=atof ("3.1415");c=atol ("567283");printf ("% d\n% f\n% d\n",a,b,c);]]></content>
      <tags>
        <tag>acm</tag>
        <tag>c++</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL 练习题]]></title>
    <url>%2F2018%2F08%2F15%2F%E5%87%A0%E9%81%93SQL%E7%BB%83%E4%B9%A0%E9%A2%98%2F</url>
    <content type="text"><![CDATA[闲着没事情做几道 SQL 题。Orcal SQL: 在线 SQL 测试 MySQL 指定进入某个端口命令12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849mysql -uroot -p -P 3307```## 问题描述 1. 学生表 Student (SID,Sname,Sage,Ssex) --SID 学生编号，Sname 学生姓名，Sage 出生年月，Ssex 学生性别.2. 课程表 Course (CID,Cname,TID) --CID -- 课程编号，Cname 课程名称，TID 教师编号.3. 教师表 Teacher (TID,Tname) --TID 教师编号，Tname 教师姓名.4. 成绩表 SC (SID,CID,score) --SID 学生编号，CID 课程编号，score 分数. 建表语句:```sqlcreate table Student (SID varchar (10),Sname nvarchar (10),Sage datetime,Ssex nvarchar (10));insert into Student values ('01' , ' 赵雷 ' , '1990-01-01' , ' 男 ');insert into Student values ('02' , ' 钱电 ' , '1990-12-21' , ' 男 ');insert into Student values ('03' , ' 孙风 ' , '1990-05-20' , ' 男 ');insert into Student values ('04' , ' 李云 ' , '1990-08-06' , ' 男 ');insert into Student values ('05' , ' 周梅 ' , '1991-12-01' , ' 女 ');insert into Student values ('06' , ' 吴兰 ' , '1992-03-01' , ' 女 ');insert into Student values ('07' , ' 郑竹 ' , '1989-07-01' , ' 女 ');insert into Student values ('08' , ' 王菊 ' , '1990-01-20' , ' 女 ');create table Course (CID varchar (10),Cname nvarchar (10),TID varchar (10));insert into Course values ('01' , ' 语文 ' , '02');insert into Course values ('02' , ' 数学 ' , '01');insert into Course values ('03' , ' 英语 ' , '03');create table Teacher (TID varchar (10),Tname nvarchar (10));insert into Teacher values ('01' , ' 张三 ');insert into Teacher values ('02' , ' 李四 ');insert into Teacher values ('03' , ' 王五 ');create table SC (SID varchar (10),CID varchar (10),score decimal (18,1));insert into SC values ('01' , '01' , 80);insert into SC values ('01' , '02' , 90);insert into SC values ('01' , '03' , 99);insert into SC values ('02' , '01' , 70);insert into SC values ('02' , '02' , 60);insert into SC values ('02' , '03' , 80);insert into SC values ('03' , '01' , 80);insert into SC values ('03' , '02' , 80);insert into SC values ('03' , '03' , 80);insert into SC values ('04' , '01' , 50);insert into SC values ('04' , '02' , 30);insert into SC values ('04' , '03' , 20);insert into SC values ('05' , '01' , 76);insert into SC values ('05' , '02' , 87);insert into SC values ('06' , '01' , 31);insert into SC values ('06' , '03' , 34);insert into SC values ('07' , '02' , 89);insert into SC values ('07' , '03' , 98); 题目 查询 “01” 课程比 “02” 课程成绩高的学生的信息及课程分数 查询同时存在 “01” 课程和 “02” 课程的情况结果:1234567+------+-------+---------------------+------+------------+------------+| SID | Sname | Sage | Ssex | 01 课程分数 | 02 课程分数 |+------+-------+---------------------+------+------------+------------+| 02 | 钱电 | 1990-12-21 00:00:00 | 男 | 70.0 | 60.0 || 04 | 李云 | 1990-08-06 00:00:00 | 男 | 50.0 | 30.0 |+------+-------+---------------------+------+------------+------------+2 rows in set (0.00 sec) 12select a.* , b.score 01 课程分数，c.score 02 课程分数 from Student a, SC b, SC cwhere a.SID=b.SID and a.SID=c.SID and b.CID="01" and c.CID="02" and b.score&gt;c.score; 查询同时存在 “01” 课程和 “02” 课程的情况和存在 “01” 课程但可能不存在 “02” 课程的情况 (不存在时显示为 null)(以下存在相同内容时不再解释).结果:1234567891011+------+-------+---------------------+------+------------+------------+| SID | Sname | Sage | Ssex | 01 课程分数 | 02 课程分数 |+------+-------+---------------------+------+------------+------------+| 01 | 赵雷 | 1990-01-01 00:00:00 | 男 | 80.0 | 90.0 || 02 | 钱电 | 1990-12-21 00:00:00 | 男 | 70.0 | 60.0 || 03 | 孙风 | 1990-05-20 00:00:00 | 男 | 80.0 | 80.0 || 04 | 李云 | 1990-08-06 00:00:00 | 男 | 50.0 | 30.0 || 05 | 周梅 | 1991-12-01 00:00:00 | 女 | 76.0 | 87.0 || 06 | 吴兰 | 1992-03-01 00:00:00 | 女 | 31.0 | NULL |+------+-------+---------------------+------+------------+------------+6 rows in set (0.00 sec) 1234select a.*,b.score 01 课程分数，c.score 02 课程分数 from Student aleft join SC b on b.SID=a.SID and b.CID='01'left join SC c on c.SID=a.SID and c.CID='02'where b.score&gt;isnull(c.score); 查询平均成绩大于等于 60 分的同学的学生编号和学生姓名和平均成绩.CAST () 函数:CAST (&#39;12.5&#39; AS decimal (9,2))如果通过 CAST () 函数将这个值转换为 decimal 表示精度与小数位数分别为 9 与 2.结果:12345678910+------+-------+-----------+| SID | Sname | avg_socre |+------+-------+-----------+| 01 | 赵雷 | 89.67 || 02 | 钱电 | 70.00 || 03 | 孙风 | 80.00 || 05 | 周梅 | 81.50 || 07 | 郑竹 | 93.50 |+------+-------+-----------+5 rows in set (0.00 sec) 123456select a.SID,a.Sname,cast(avg(b.score) as decimal(10,2)) avg_socrefrom Student a, SC bwhere a.SID=b.SIDgroup by a.SID,a.Snamehaving cast(avg(b.score) as decimal(10,2))&gt;=60order by a.SID; 查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩. 查询所有有成绩的 SQL.结果:123456789101112+------+-------+----------+--------+| SID | Sname | 选课总数 | 总成绩 |+------+-------+----------+--------+| 01 | 赵雷 | 3 | 269.0 || 02 | 钱电 | 3 | 210.0 || 03 | 孙风 | 3 | 240.0 || 04 | 李云 | 3 | 100.0 || 05 | 周梅 | 2 | 163.0 || 06 | 吴兰 | 2 | 65.0 || 07 | 郑竹 | 2 | 187.0 |+------+-------+----------+--------+7 rows in set (0.00 sec) 12345select a.SID,a.Sname,count(b.CID) 选课总数，sum(b.score) 总成绩 from Student a, SC bwhere a.SID=b.SIDgroup by a.SID, a.Snameorder by a.SID 查询所有 (包括有成绩和无成绩) 的 SQL.结果:12345678910111213+------+-------+--------------+------------+| SID | Sname | count (b.CID) | sum (score) |+------+-------+--------------+------------+| 01 | 赵雷 | 3 | 269.0 || 02 | 钱电 | 3 | 210.0 || 03 | 孙风 | 3 | 240.0 || 04 | 李云 | 3 | 100.0 || 05 | 周梅 | 2 | 163.0 || 06 | 吴兰 | 2 | 65.0 || 07 | 郑竹 | 2 | 187.0 || 08 | 王菊 | 0 | NULL |+------+-------+--------------+------------+8 rows in set (0.00 sec) 123456select a.SID,a.Sname,count(b.CID),sum(score)from Student aleft join SC bon a.SID=b.SIDgroup by a.SID, a.Snameorder by a.SID; 查询 “李” 姓老师的数量.结果:123456+----------+| 教师数量 |+----------+| 1 |+----------+1 row in set (0.00 sec) 1234-- 1select count(Tname) 教师数量 from Teacher where Tname like ' 李 %'; -- 2select count(Tname) 教师数量 from Teacher where left(Tname, 1)=' 李 '; 查询学过 “张三” 老师授课的同学的信息.结果:1234567891011+------+-------+---------------------+------+| SID | Sname | Sage | Ssex |+------+-------+---------------------+------+| 01 | 赵雷 | 1990-01-01 00:00:00 | 男 || 02 | 钱电 | 1990-12-21 00:00:00 | 男 || 03 | 孙风 | 1990-05-20 00:00:00 | 男 || 04 | 李云 | 1990-08-06 00:00:00 | 男 || 05 | 周梅 | 1991-12-01 00:00:00 | 女 || 07 | 郑竹 | 1989-07-01 00:00:00 | 女 |+------+-------+---------------------+------+6 rows in set (0.00 sec) 12345select Student.* from Student,SC,Course,Teacherwhere Student.SID=SC.SID and SC.CID=Course.CID and Course.TID=Teacher.TID and Teacher.Tname="张三"order by Student.SID; 查询没学过 “张三” 老师授课的同学的信息结果:1234567+------+-------+---------------------+------+| SID | Sname | Sage | Ssex |+------+-------+---------------------+------+| 06 | 吴兰 | 1992-03-01 00:00:00 | 女 || 08 | 王菊 | 1990-01-20 00:00:00 | 女 |+------+-------+---------------------+------+2 rows in set (0.00 sec) 12345678910select s.*from Student swhere SID not in(select SC.SIDfrom SC,Course,Teacherwhere SC.CID=Course.CID and Course.TID=Teacher.TID and Teacher.Tname="张三")order by s.SID; 查询学过编号为 “01” 并且也学过编号为 “02” 的课程的同学的信息.结果:12345678910+------+-------+---------------------+------+| SID | Sname | Sage | Ssex |+------+-------+---------------------+------+| 01 | 赵雷 | 1990-01-01 00:00:00 | 男 || 02 | 钱电 | 1990-12-21 00:00:00 | 男 || 03 | 孙风 | 1990-05-20 00:00:00 | 男 || 04 | 李云 | 1990-08-06 00:00:00 | 男 || 05 | 周梅 | 1991-12-01 00:00:00 | 女 |+------+-------+---------------------+------+5 rows in set (0.00 sec) 1234567891011121314151617181920-- 1select Student.*from Student,SCwhere Student.SID=SC.SID and SC.CID='01'and exists( select * from SC sc_2 where sc_2.CID='02' and sc_2.SID=SC.SID)order by Student.SID;-- 2select s.* from Student s where s.SID in( select SID from ( select SID from SC where SC.CID='01' union all select SID from SC where SC.CID='02' ) t group by SID having count(1) = 2)order by s.SID; 查询没有学全所有课程的同学的信息.结果:12345678+------+-------+---------------------+------+| SID | Sname | Sage | Ssex |+------+-------+---------------------+------+| 05 | 周梅 | 1991-12-01 00:00:00 | 女 || 06 | 吴兰 | 1992-03-01 00:00:00 | 女 || 07 | 郑竹 | 1989-07-01 00:00:00 | 女 |+------+-------+---------------------+------+3 rows in set (0.01 sec) 1234567891011121314-- 1select Student.* from Student,SCwhere Student.SID=SC.SID group by Student.SID,Student.Sname,Student.Sage,Student.Ssex having count(CID) &lt; (select count(CID) from Course);-- 2select Student.* from Studentleft join SC on Student.SID=SC.SIDgroup by Student.SID,Student.Sname,Student.Sage,Student.Ssex having count(CID)&lt;(select count(CID) from Course);select *from Studentleft join SC on Student.SID=SC.SIDleft join Course on SC.CID=Course.CIDorder by Student.SID; 查询至少有一门课与学号为 “01” 的同学所学相同的同学的信息.结果:1234567891011+------+-------+---------------------+------+| SID | Sname | Sage | Ssex |+------+-------+---------------------+------+| 02 | 钱电 | 1990-12-21 00:00:00 | 男 || 03 | 孙风 | 1990-05-20 00:00:00 | 男 || 04 | 李云 | 1990-08-06 00:00:00 | 男 || 05 | 周梅 | 1991-12-01 00:00:00 | 女 || 06 | 吴兰 | 1992-03-01 00:00:00 | 女 || 07 | 郑竹 | 1989-07-01 00:00:00 | 女 |+------+-------+---------------------+------+6 rows in set (0.00 sec) 123456select distinct Student.*from Student, SCwhere Student.SID=SC.SID and SC.CID in( select CID from SC where SC.SID='01') and Student.SID!='01'; 查询没学过 “张三” 老师讲授的任一门课程的学生姓名.结果:1234567+------+-------+| SID | Sname |+------+-------+| 06 | 吴兰 || 08 | 王菊 |+------+-------+2 rows in set (0.00 sec) 12345select Student.SID,Student.Sname from Student where Student.SID not in( select distinct SC.SID from SC,Course,Teacher where SC.CID=Course.CID and Course.TID=Teacher.TID and Teacher.Tname="张三")order by Student.SID; 查询和 “01” 号的同学学习的课程完全相同的其他同学的信息.结果:12345678+------+-------+---------------------+------+| SID | Sname | Sage | Ssex |+------+-------+---------------------+------+| 02 | 钱电 | 1990-12-21 00:00:00 | 男 || 03 | 孙风 | 1990-05-20 00:00:00 | 男 || 04 | 李云 | 1990-08-06 00:00:00 | 男 |+------+-------+---------------------+------+3 rows in set (0.00 sec) 12345678-- 这个只是按数量算...select Student.* from Student where SID in( select distinct SC.SID from SC where SID!='01' and SC.CID in ( select distinct CID from SC where SID='01' ) group by SC.SID having count(1)=(select count(1) from SC where SID='01')); 查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩.结果:1234567+------+-------+-----------+| SID | Sname | avg_score |+------+-------+-----------+| 04 | 李云 | 33.33 || 06 | 吴兰 | 32.50 |+------+-------+-----------+2 rows in set (0.00 sec) 123456789101112-- group by (分组) having (条件) 用法.-- select Ssex from Student group by Ssex having Ssex!=' 男 ';select SID from SC where score &lt; 60group by SID having count(1) &gt;= 2select Student.SID, Student.Sname, cast(avg(score) as decimal(10, 2)) avg_score from Student, SCwhere Student.SID=SC.SID and Student.SID in( select SID from SC where score&lt;60 group by SID having count(1)&gt;=2)group by Student.SID,Student.Sname; 检索 “01” 课程分数小于 60，按分数降序排列的学生信息.结果:12345678910+------+-------+---------------------+------+-------+------+| SID | Sname | Sage | Ssex | score | CID |+------+-------+---------------------+------+-------+------+| 04 | 李云 | 1990-08-06 00:00:00 | 男 | 50.0 | 01 || 06 | 吴兰 | 1992-03-01 00:00:00 | 女 | 34.0 | 03 || 06 | 吴兰 | 1992-03-01 00:00:00 | 女 | 31.0 | 01 || 04 | 李云 | 1990-08-06 00:00:00 | 男 | 30.0 | 02 || 04 | 李云 | 1990-08-06 00:00:00 | 男 | 20.0 | 03 |+------+-------+---------------------+------+-------+------+5 rows in set (0.00 sec) 12345select distinct Student.*,SC.score,Course.CID from Student,SC,Course where Student.SID=SC.SID and SC.CID=Course.CID and Student.SID in ( select SID from SC,Course where SC.CID=Course.CID and SC.score&lt;60 and Course.CID='01')order by SC.score desc; 按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩.结果:12345678910111213+------+------+------+------+------+--------+| 学号 | 姓名 | 语文 | 数学 | 英语 | 平均分 |+------+------+------+------+------+--------+| 07 | 郑竹 | NULL | 89.0 | 98.0 | 93.50 || 01 | 赵雷 | 80.0 | 90.0 | 99.0 | 89.67 || 05 | 周梅 | 76.0 | 87.0 | NULL | 81.50 || 03 | 孙风 | 80.0 | 80.0 | 80.0 | 80.00 || 02 | 钱电 | 70.0 | 60.0 | 80.0 | 70.00 || 04 | 李云 | 50.0 | 30.0 | 20.0 | 33.33 || 06 | 吴兰 | 31.0 | NULL | 34.0 | 32.50 || 08 | 王菊 | NULL | NULL | NULL | NULL |+------+------+------+------+------+--------+8 rows in set (0.00 sec) 1234567891011-- 列转行 select a.SID 学号，a.Sname 姓名，max(case c.Cname when ' 语文 ' then b.score else null end) 语文，max(case c.Cname when ' 数学 ' then b.score else null end) 数学，max(case c.Cname when ' 英语 ' then b.score else null end) 英语，cast(avg(b.score) as decimal(18, 2)) 平均分 from student aleft join SC b on a.SID=b.SIDleft join Course c on b.CID=c.CIDgroup by a.SID, a.Snameorder by 平均分 desc; 查询各科成绩最高分、最低分和平均分：以如下形式显示：课程 ID，课程 name，最高分，最低分，平均分，及格率，中等率，优良率，优秀率– 及格为 &gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90.结果:12 12 按各科成绩进行排序，并显示排名. Score 重复时保留名次空缺.结果: 12``````sql Score 重复时合并名次 (DENSE_RANK 完成).结果: 12``````sql 查询学生的总成绩并进行排名. 查询学生的总成绩.结果: 12``````sql 查询学生的总成绩并进行排名，sql 2000 用子查询完成，分总分重复时保留名次空缺和不保留名次空缺两种。结果: 12``````sql 查询学生的总成绩并进行排名，sql 2005 用 rank,DENSE_RANK 完成，分总分重复时保留名次空缺和不保留名次空缺两种。结果: 12``````sql 未完待续～]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[位运算笔记]]></title>
    <url>%2F2018%2F08%2F01%2F%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[位运算&amp; 、|、 ^12345678a &amp; a = aa | a = aa ^ a = 0a &amp; 0 = 0a | 0 = aa ^ 0 = aa | ( a &amp; b ) = aa &amp; ( a | b ) = a a、b 值交换123a ^= b;b ^= a;a ^= b; 判断奇偶（取最后一位）1a &amp; 1 &lt;==&gt; a % 2 i+1 位置为 112// 1110 =&gt; 1111a |= 1 &lt;&lt; i i+1 位置为 012// 1111 =&gt; 1101a &amp;= ~(1 &lt;&lt; i) 取出 i+1 位12//i = 2, 7 =&gt; 4a = a &amp; (1 &lt;&lt; i) 删除最后的 112// 1100 =&gt; 1000a = a &amp; (a-1) 在对应 i+1 位，插入 b 的对应位12a |= 1 &lt;&lt; i; （a 的 bit 位置 1）a &amp; (b &amp; 1&lt;&lt;i) （与 b 的 bit 位相与） 得到最高位的 1123456a = a |(a&gt;&gt;1);a = a |(a&gt;&gt;2);a = a |(a&gt;&gt;4);a = a |(a&gt;&gt;8);a = a |(a&gt;&gt;16);return (a+1)&gt;&gt;1; 检测一个无符号整数是否是 2^n -1 的形式1x&amp;(x+1) 移位在 Java 中正数 &gt;&gt; 等价于 &gt;&gt;&gt;，负数在内存中已补码形式保存，&gt;&gt;&gt; 表示无符号右移。 “1” 位计数统计一个字（比如 32bit）中，有多少个 bit 是 1，有多少个 bit 是 0。 这里以 32bit 为例来说明算法，这里基本思想类似折半计算。算法复杂度 O (lgn)12345x = (x &amp; 0x55555555) + ((x&gt;&gt;1)&amp; 0x55555555);x = (x &amp; 0x33333333) + ((x&gt;&gt;2)&amp; 0x33333333);x = (x &amp; 0x0F0F0F0F) + ((x&gt;&gt;4)&amp; 0x0F0F0F0F);x = (x &amp; 0x00FF00FF) + ((x&gt;&gt;8)&amp; 0x00FF00FF);x = (x &amp; 0x0000FFFF) + ((x&gt;&gt;16)&amp; 0x0000FFFF); 搜索— 待续 参考 《Hacker’s Delight》]]></content>
      <tags>
        <tag>algorithm</tag>
        <tag>notes</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20 行代码的签到脚本 (Python)]]></title>
    <url>%2F2018%2F07%2F28%2F20%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E7%AD%BE%E5%88%B0%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[懒得每天在某个网站签到，写了一个 python 脚本扔在云主机上。网站很简单，代码就几十行。 签到脚本12345678910111213141516171819import requestsusername = "####"password = "####"loginUrl = "登录路径 /auth/login"s = requests.Session ()logindata = &#123; 'email':username, 'passwd':password, 'remember_me':'ture',&#125;r = s.post (loginUrl,data=logindata)r = s.get (loginUrl)checkinUrl="签到的路径 /user/checkin"rr = s.post (checkinUrl)# 执行签到 rr = s.get (loginUrl)# print (rr)# print (rr._content.decode ())exit () 在 Linux 上定时执行这个脚本 1crontab -e 进入编辑模式，设置每天 8:00 运行一次。crontab 的语法规范分钟 小时 日期 月份 周 命令 100 8 * * * python /opt/checkin.py]]></content>
      <tags>
        <tag>python</tag>
        <tag>skill</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[django 链接 MySQL 问题]]></title>
    <url>%2F2018%2F06%2F21%2Fdjango%E9%93%BE%E6%8E%A5mysql%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[错误1（django.db.utils.OperationalError: (1045, &quot;Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: NO)&quot;)） 环境： Django2.0 MySQL8.0.11 Mysql 8.0 的部分语法，密码的加密方式发生了改变，在 8.0 中的用户密码采用的是 cha2 加密方法，从而密码认证错误。 解决:123$ mysql -u root -pmysql&gt; use mysql;mysql&gt; ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;password&apos;;]]></content>
      <tags>
        <tag>skill</tag>
        <tag>django</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nothing added to commit but untracked files present 解决方法]]></title>
    <url>%2F2018%2F05%2F30%2Fnothing-added-to-commit-but-untracked-files-present%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[问题描述123456789101112$ git commit On branch master Initial commit Untracked files: .gitignore Test/ blogpost/ manage.py nothing added to commit but untracked files present 文件被追踪，但是没有被添加 git 中 解决 git status 列出当前目录所有还没有被 git 管理的文件和被 git 管理且被修改但还未提交 (git commit) 的文件 1234$ git add manage.py$ git add blogpost\$ git add Test\$ git add .gitignore]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c++ 枚举 next_premutation]]></title>
    <url>%2F2018%2F05%2F28%2Fc%2B%2B%E6%9E%9A%E4%B8%BEnext_premutation%2F</url>
    <content type="text"><![CDATA[平均复杂度即为 O (n) next_permutation () 会改变区间 [begin,end) 内的元素次序，使它们符合 “下一个排列次序”； prev_permutation () 会改变区间 [begin,end) 内的元素次序，使它们符合 “上一个排列次序”； 示例 1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;void f(vector&lt;int&gt; v)&#123; for(int i=0;i&lt;v.size ();i++)&#123; cout&lt;&lt;v [i]&lt;&lt;""; &#125; cout&lt;&lt;endl;&#125;int main() &#123; vector&lt;int&gt; v; v.push_back (1); v.push_back (3); v.push_back (2); cout&lt;&lt;" 原排列 ： "; f (v); for(int i=0;i&lt;10;i++)&#123; next_permutation (v.begin (),v.end ());// 升序序列 或者下一个排列次序 按照字典序生成下一个序列 f (v); &#125; //for (int i=0;i&lt;5;i++)&#123; // prev_permutation (v.begin (),v.end ());// 降序 // f (v); //&#125; return 0;&#125;]]></content>
      <tags>
        <tag>acm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu 错误 - Could not get lock /var/lib/dpkg/lock]]></title>
    <url>%2F2018%2F05%2F15%2FUbuntu%E9%94%99%E8%AF%AF-Could-not-get-lock-var-lib-dpkg-lock%2F</url>
    <content type="text"><![CDATA[报错信息12E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable) E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it? 解决办法 查看运行的线程123ps -A | grep apt-get# sudo kill processnumber# 关闭 apt 进程 我的没有发现进程， 可能是上次运行安装或更新时没有正常完成造成的 终端输入12sudo rm /var/cache/apt/archives/locksudo rm /var/lib/dpkg/lock]]></content>
      <tags>
        <tag>skill</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c++ std::ios_base::sync_with_stdio 加速输入输出]]></title>
    <url>%2F2018%2F05%2F14%2Fc-std-ios-base-sync-with-stdio-%E5%8A%A0%E9%80%9F%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%2F</url>
    <content type="text"><![CDATA[static bool sync_with_stdio (bool sync = true);设置标准 C++ 流是否与标准 C 流在每次输入 / 输出操作后同步。 遇到 cin TLE 时可以用于取消 cin 同步，取消之后不能和 scanf，sscanf, getchar, fgets 之类同用。 测试 123456789#include &lt;iostream&gt;#include &lt;cstdio&gt; int main() &#123; std::ios::sync_with_stdio (false); std::cout &lt;&lt; "a\n"; std::printf("b\n"); std::cout &lt;&lt; "c\n";&#125; 输出 （环境 g++5.4.0）123bca 默认的情况下 cin 绑定的是 cout，每次执行 &lt;&lt; 操作符的时候都要调用 flush，这样会增加 IO 负担。 12std::ios::sync_with_stdio (false);std::cin.tie (0); 参考一 ： http://zh.cppreference.com/w/cpp/io/ios_base/sync_with_stdio 参考二 ：http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html]]></content>
      <tags>
        <tag>acm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows10 WIFI 热点问题]]></title>
    <url>%2F2018%2F05%2F08%2FWindow-WIFI-%E7%83%AD%E7%82%B9%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[win10 玄学 bug 之一 解决方案 ： 命令行输入12$ netsh wlan set hostednetwork mode=allow ssid=NAME key=PASSWORD$ netsh wlan start hostednetwork 然后在网络适配器的本地连接 -&gt; 属性 -&gt; 共享 -&gt; 设置共享刚才设置的 WIFI 热点]]></content>
      <tags>
        <tag>windows10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 解决字符编码问题]]></title>
    <url>%2F2018%2F05%2F05%2FPython%E8%A7%A3%E5%86%B3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[字符串分为 unicode 和 str 两种类型 文本字符和二进制数据分别用 str 和 byte 表示 12345# 系统默认编码设置为 utf-8&gt;&gt;&gt; import sys&gt;&gt;&gt; sys.getdefultencoding'utf-8'&gt;&gt;&gt; str 与 bytes 之间的转换可以用 encode 和从 decode 1234567&gt;&gt;&gt; s = "Python 测试"&gt;&gt;&gt; s = s.encode ()&gt;&gt;&gt; print (s)b'Python\xe6\xb5\x8b\xe8\xaf\x95'&gt;&gt;&gt; s = s.decode ()&gt;&gt;&gt; print (s)'Python 测试 ' base64123456&gt;&gt;&gt; import base64&gt;&gt;&gt; s = "asdasd"&gt;&gt;&gt; s = base64.b64encode (s)&gt;&gt;&gt; print (s)&gt;&gt;&gt; s = base64.b64decode (s)&gt;&gt;&gt; print (s) 参考 ： https://foofish.net/how-python3-handle-charset-encoding.html]]></content>
      <tags>
        <tag>python</tag>
        <tag>skill</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BFS]]></title>
    <url>%2F2018%2F04%2F01%2FBFS%2F</url>
    <content type="text"><![CDATA[入门迷宫问题（最短路径）INPUT:1234565 5SXXXX...XX.X.....XXX....G 123456786 6.......S..X.XXX.......X..X..XX.GX... OUPUT:12810 代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;const int INF = 100000007;const int mx = 1007;typedef pair&lt;int, int&gt; P;char maze [mx][mx];// 地图 int n, m;int sx, sy;// 开始坐标 int gx, gy;// 结束坐标 int d [mx][mx];// 到各个位置的最短距离数组 int dx [4] = &#123;1,0,-1,0&#125;, dy [4] = &#123;0,1,0,-1&#125;;// 移动向量 //（sx,sy)----&gt;(gx,gy) 最短路径 // 无法到达就是 INF int bfs()&#123; queue&lt;P&gt; que; // 初始化所有位置为 INF for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;m;j++)&#123; d [i][j]=INF; &#125; &#125; // 放入起点 que.push (P (sx,sy)); d [sx][sy]=0; // 队列不为空一直执行 while(que.size ())&#123; // 取出队列前端元素 P p=que.front (); que.pop (); // 取出为终点结束搜索 if(p.first==gx&amp;&amp;p.second==gy) break; //4 个方向的移动 for(int i=0;i&lt;4;i++)&#123; // 移动之后的位置 int nx=p.first+dx [i], ny=p.second+dy [i]; // 判断是否访问过 if(0&lt;=nx&amp;&amp;nx&lt;n&amp;&amp;0&lt;=ny&amp;&amp;ny&lt;m&amp;&amp;d [nx][ny]==INF&amp;&amp;maze [nx][ny]!='X')&#123; que.push (P (nx,ny));// 放入队列， 并到该位置的距离 + 1 d [nx][ny]=d [p.first][p.second]+1; &#125; &#125; &#125; return d [gx][gy];&#125;void solve()&#123; int ans=bfs (); cout &lt;&lt; ans;&#125;int main() &#123; cin&gt;&gt;n&gt;&gt;m; for(int i=0;i&lt;n;i++)&#123; scanf("% s",maze [i]); for(int j=0;j&lt;m;j++)&#123; if(maze [i][j]=='S')&#123; sx=i;sy=j; &#125; if(maze [i][j]=='G')&#123; gx=i;gy=j; &#125; &#125; &#125; solve (); return 0;&#125;]]></content>
      <tags>
        <tag>acm</tag>
        <tag>图论</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[并查集]]></title>
    <url>%2F2018%2F04%2F01%2F%E5%B9%B6%E6%9F%A5%E9%9B%86%2F</url>
    <content type="text"><![CDATA[题目 : L2-010. 排座位布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。 输入格式：输入第一行给出 3 个正整数：N（&lt;= 100），即前来参宴的宾客总人数，则这些人从 1 到 N 编号；M 为已知两两宾客之间的关系数；K 为查询的条数。随后 M 行，每行给出一对宾客之间的关系，格式为：“宾客 1 宾客 2 关系”，其中 “关系” 为 1 表示是朋友，-1 表示是死对头。注意两个人不可能既是朋友又是敌人。最后 K 行，每行给出一对需要查询的宾客编号。 这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。 输出格式：对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出 “No problem”；如果他们之间并不是朋友，但也不敌对，则输出 “OK”；如果他们之间有敌对，然而也有共同的朋友，则输出 “OK but…”；如果他们之间只有敌对关系，则输出 “No way”。 输入样例：123456789101112137 8 45 6 12 7 -11 3 13 4 16 7 -11 2 11 4 12 3 -13 45 72 37 2 输出样例：1234No problemOKOK but...No way 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485/*11 8 61 21 32 45 65 76 87 910 114 63 95 911 67 83 4*/#include &lt;iostream&gt;using namespace std;int pre [100007];// 节点 int enemy [1007][1007];int find(int x) &#123;// 查找源头标号 int r = x; while (pre [r] != r) r = pre [r]; int i = x, j; while (i != r)// 路径压缩算法 &#123; j = pre [i];// 在改变他的前导点时，存储他的值 pre [i] = r; i = j;// 改变他的前导点为根节点 /* 1---&gt;2---&gt;3 1---&gt;3 / / / 2 */ &#125; return r;&#125;void Union(int a, int b) &#123;// 合并 a=find (a); b=find (b); if(a==b) return; if (a!=b) pre [a]=b; &#125; int main() &#123; int n,m,p; cin&gt;&gt;n&gt;&gt;m&gt;&gt;p; // 初始每个元素为一个根节点 for(int i=1;i&lt;=n;i++)&#123; pre [i]=i; &#125; int a,b,c; for(int i=0;i&lt;m;i++)&#123; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c; if(c==1)&#123; Union (a,b); &#125;else&#123; enemy [a][b]=1; enemy [b][a]=1; &#125; &#125; for(int i=0;i&lt;p;i++)&#123; cin&gt;&gt;a&gt;&gt;b; if(find (a)==find (b)&amp;&amp;enemy [a][b]==0)&#123; cout&lt;&lt;"No problem"&lt;&lt;endl; &#125;else if(find (a)!=find (b)&amp;&amp;enemy [a][b]==0)&#123; cout&lt;&lt;"OK"&lt;&lt;endl; &#125;else if(find (a)==find (b)&amp;&amp;enemy [a][b]==1)&#123; cout&lt;&lt;"OK but..."&lt;&lt;endl; &#125;else if(enemy [a][b]==1)&#123; cout&lt;&lt;"No way"&lt;&lt;endl; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>acm</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DFS]]></title>
    <url>%2F2018%2F04%2F01%2FDFS%2F</url>
    <content type="text"><![CDATA[入门求连通块INPUT :1234567891011121314151 1*3 5*@*@***@***@*@*1 8@@****@*5 5 ****@*@@*@*@**@@@@*@@@**@0 0 OUTPUT :12340122 代码 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;using namespace std;const int mx = 10007;int n, m;char field [mx][mx];// 地图 void dfs(int x, int y)&#123; field [x][y] = '*';// 替换现在位置 // 遍历 8 个方向 for(int dx=-1;dx&lt;=1;dx++)&#123; for(int dy=-1;dy&lt;=1;dy++)&#123; int nx=x+dx, ny=y+dy; if(0&lt;=nx&amp;&amp;nx&lt;n&amp;&amp;0&lt;=ny&amp;&amp;ny&lt;m&amp;&amp;field [nx][ny]=='@') dfs (nx,ny); &#125; &#125; return ;&#125; void solve()&#123; int ans=0; for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;m;j++)&#123; // 从 @处开始遍历 if(field [i][j]=='@')&#123; dfs (i,j); ans++; &#125; &#125; &#125; cout&lt;&lt;ans;&#125;int main() &#123; cin&gt;&gt;n&gt;&gt;m; for(int i=0;i&lt;n;i++)&#123; scanf("% s",field [i]); &#125; solve (); return 0;&#125;]]></content>
      <tags>
        <tag>acm</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论初步]]></title>
    <url>%2F2017%2F12%2F31%2F%E6%95%B0%E8%AE%BA%E5%88%9D%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[数论被 “数学王子” 高斯誉为整个数学王国的皇后 欧几里得算法最大公约数欧几里得的辗转相除法计算的是两个自然数 a 和 b 的最大公约数 g 代码示例 12345678910111213// 递归 int gcd (int a, int b) &#123; return b == 0 ? a : gcd (b, a % b);&#125;// 迭代 int gcd (int a, int b) &#123; while (b != 0) &#123; int r = b; b = a % b; a = r; &#125; return a;&#125; 唯一分解定理扩展欧几里得算法题目 直线上的点。求直线 ax+by+c=0 上有多少整数点 (x,y) 满足 x&lt;-[x1, x2], y &lt;- [y1, y2]定理：若 a 和 b 为正整数，则存在整数 x,y 使得 gcd (a,b)=ax+by 代码示例12345678910void gcd(int a, int b, int&amp; d, int&amp; x, int&amp; y) &#123; if (!b) &#123; d = a; x = 1; y = 0; &#125; else &#123; gcd (b, a % b, d, y, x); y -= x * (a /b); &#125;&#125; 素数筛选题目 代码示例123456789101112131415161718192021// 一般判定是否是素数 bool is_prime(int n) &#123; if (n &lt; 2) return false; for (int i = 2; i &lt;= sqrt(n); i++) &#123; if (n % i == 0) return false; &#125; return true;&#125;// 普通筛选 n 内的素数 bool* com_prime(int n) &#123; bool* ans = new bool[n]; for (int i = 0; i &lt; n; i++) ans [i] = false; for (int i = 2; i &lt; n; i++) &#123; if (is_prime (i)) ans [i] = true; &#125; return ans;&#125; 筛选法示例一、初始化如下列表。 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 二、把第一个数（2）取出来，去掉所有可以被 2 整除的数。 2 3 5 7 9 11 13 15 17 19 21 23 25 27 29 三、取第二个数（3），去掉所有可以被 3 整除的数。 2 3 5 7 11 13 17 19 23 25 29 四、取第三个数（5），因为 4 已经被去除了，再去掉所有可以被 5 整除的数。 2 3 5 7 11 13 17 19 23 29 接下来的数是 7，但是 7 的平方是 49，其大于了 30，所以我们可以停止计算了。剩下的数就是所有的质数了。 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt;#include &lt;cmath&gt;#define MAX 1000using namespace std;bool is_prime(int n) &#123; if (n &lt; 2) return false; for (int i = 2; i * i &lt;= n; i++) &#123; if (n % i == 0) return false; &#125; return true;&#125;bool* sieve_prime(int n) &#123; bool* value = new bool[n]; for (int i = 0; i &lt; n; i++) value [i] = true; value [0] = false; value [1] = false; for (int i = 2; i &lt;= sqrt(n); i++) &#123; if (value [i] &amp;&amp; is_prime (i)) &#123; int c = 2; int j = i * c; while (j &lt; n) &#123; value [j] = false; j = i * c++; &#125; &#125; &#125; return value;&#125;int main() &#123; bool* prime = sieve_prime (MAX); for (int i = 1; i &lt;=100; i++) &#123; // 输出 100 内的素数 if (prime [i]) cout &lt;&lt; i &lt;&lt; endl; &#125;&#125; 欧拉函数 欧拉函数： 在数论中，对正整数 n，欧拉函数 φ(n) 是小于或等于 n 的正整数中与 n 互质的数的数目。它又称为 Euler’s totient function、φ 函数、欧拉商数等。例如 φ，因为 1,3,5,7 均和 8 互质。—— 维基百科 定理 phi (1) = 1 n 为质数，phi (n) = n - 1 m 和 n 互质，phi (mn) = phi (m) * phi (n) n 为奇数，phi (2n) = phi (n) 通用公式：phi (n) = n * (1 - 1 /p1) * (1 - 1 /p2) * ... * (1 - 1 /pr)其中 n = p1^k1 * p2^k2 * ... * pr^kr 具体参考： 看云 - 欧拉函数 常规代码123456789101112int phi (int n) &#123; int t = n; for (int i = 2; i &lt;= n; i++) &#123; if (n % i == 0) &#123; n /= i; t = t - t /i; &#125; while (n % i == 0) n /= i; &#125; return t;&#125; 时间复杂度 O (n), 对于 1e9 会超时。 改良之后123456789101112131415int phi (int n) &#123; int t = n; // 降低时间复杂度 for (int i = 2; i * i &lt;= n; i++) &#123; if (n % i == 0) &#123; n /= i; t = t - t /i; &#125; while (n % i == 0) n /= i; &#125; if (n &gt; 1) t = t - t /n; return t;&#125;]]></content>
      <tags>
        <tag>acm</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[scanf 中的正则表达式]]></title>
    <url>%2F2017%2F12%2F01%2Fscanf%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[调用格式: scanf (&quot;&lt; 格式化字符串&gt;&quot;, &lt; 地址表 &gt;);一、为变量赋值时表示成功读取变量的个数，&lt; 格式化字符串 &gt; 与 &lt; 地址表 &gt; 是严格匹配的 12scanf("% c % c", &amp;a, &amp;b); // 函数返回值是 2，并丢弃不想使用的空白符 scanf("% d,% d", &amp;a, &amp;b); // 输入必须有逗号， 多个空格为一个空格 二、 % s 读取遇到空格停止读取，因此一般可以用 fgets 去读取字符串123scanf("%[a-z]", &amp;str); // 遇到不再 a-z 字符停止读取 scanf("666%[0-9]", &amp;str); //666 开头并且在 0-9 字符读取，不是则停止 scanf("%[^\n]", &amp;str); //^ 表示求反集，即这句话不是回车一直开始读取 三、压缩输入：在格式码前加上 *，则用户就可以告诉 scanf () 读这个域，但不把它赋予任何变量。 1scanf("% c%*c, &amp;ch); 使用此方法可以在字符处理时吃掉多余的回车。 更多正则表达式语言参考 sscanf、scanf 的一些示例12]]></content>
      <tags>
        <tag>acm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 问题：Everything up-to-date 解决]]></title>
    <url>%2F2017%2F11%2F04%2FGit%E9%97%AE%E9%A2%98%EF%BC%9AEverything-up-to-date%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[push 代码时遇到提示：Everything up-to-date, 无法 push 代码原因是 git 提交改动到缓存，要 push 的时候不会将本地所有的分支都 push 掉，所以出现这个问题。我们应该告诉 git 提交哪个分支。 解决在 stackoverflow 有解决方案 创建分支123$ git branch newbranch# 查看分支 $ git branch 切换分支1$ git checkout newbranch 改动提交到新的分支12$ git add .$ git commit -a 合并到 master123$ git merge newbranch# 查看冲突 $ git diff push 代码1$ git push -u origin master 删除分支1$ git branch -D newbranch 删除合并部分大写 D 改为小写 d]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速幂]]></title>
    <url>%2F2017%2F10%2F31%2F%E5%BF%AB%E9%80%9F%E5%B9%82%2F</url>
    <content type="text"><![CDATA[快速幂 通常算法：123456789int Pow (int A, int n)&#123; if (n == 0) return 1; int rslt (1); for (int i (0); i &lt; n; ++i) rslt *= A; return rslt;&#125; 其复杂度是 O (n) 的。一般来说，这样的复杂度并不会使我们困惑，但是一般应用幂运算的地方，指数都会非常非常的大，比如 1 000 000 000 这个级别的，这时候我们会遇到两个问题，第一个就是我们不能再用 int 来存储整数，必须用高精度整数类型来进行存储，另一个就是在指数是如此变态的数量级之下，我们的计算量会骤然上升，结果也会异常惊人的大。简单来说就是二分法。举个栗子：一般解法：A^8 = A * A * A * A * A * A * A * A总共需要 7 次乘法运算 平均分解：A^8 = (A * A * A * A) * (A * A * A * A) = (A * A * A * A) ^ 2这样我们就只需要 4 次乘法运算 再分解：A^6 = [(A * A) * (A * A)] ^ 2 = [(A * A) ^ 2] ^ 2这样就将乘法运算的次数减少为了 3 次 这种二分解法可以将原本 n 次的运算减少为 logn /log2，这样的效果是惊人的，在 1 000 000 000 这样数量级的指数运算下，该方法可以将运算次数减少到 30 次 整数的快速幂：1234567891011121314151617int qPow (int A, int n)&#123; if (n == 0) return 1; int rslt (1); while (n) &#123; if (n &amp; 1) // 若幂为奇数 &#123; rslt *= A; &#125; A *= A; n &gt;&gt;= 1; // 右位移等价于除以 2 &#125; return rslt;&#125; 矩阵类的代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768class Matrix&#123;public: int N; // 矩阵维数 int** m; // 存储矩阵的二维数组 Matrix (int n = 2) &#123; m = new int*[n]; for (int i (0); i &lt; n; ++i) &#123; m [i] = new int [n]; &#125; N = n; clear (); &#125; // 将矩阵清空为零矩阵 void clear () &#123; for (int i (0); i &lt; N; ++i) &#123; memset (m [i], 0, sizeof (int) * N); &#125; &#125; // 将矩阵设定为单位矩阵 void unit () &#123; clear (); for (int i (0); i &lt; N; ++i) &#123; m [i][i] = 1; &#125; &#125; // 矩阵的赋值 Matrix operator= (Matrix &amp;othr) &#123; Matrix (othr.N); for (int i (0); i &lt; othr.N; ++i) &#123; for (int j (0); j &lt; othr.N; ++j) &#123; m [i][j] = othr.m [i][j]; &#125; &#125; return *this; &#125; // 矩阵的乘法 //! 假设所有因子均为同阶方阵 Matrix operator* (Matrix &amp;othr) &#123; Matrix rslt (othr.N); for (int i (0); i &lt; othr.N; ++i) &#123; for (int j (0); j &lt; othr.N; ++j) &#123; for (int k (0); k &lt; othr.N; ++k) &#123; rslt.m [i][j] += m [i][k] * othr.m [k][j]; &#125; &#125; &#125; return rslt; &#125;&#125;; 矩阵快速幂的算法:12345678910111213141516Matrix qMPow (Matrix &amp;A, int n)&#123; Matrix rslt (A.N); rslt.unit (); if (n == 0) return rslt; while (n) &#123; if (n &amp; 1) // 若幂为奇数 &#123; rslt = rslt * A; &#125; A = A * A; n &gt;&gt;= 1; // 右位移等价于除以 2 &#125; return rslt;&#125;]]></content>
      <tags>
        <tag>acm</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[conda 常用操作 (windows)]]></title>
    <url>%2F2017%2F10%2F28%2Fconda%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[管理 conda验证安装1$ conda --version 命令参阅可以用: conda –help 将 conda 更新到最新123$ conda update conda# 有最新选择 yesProceed ([y]/n)? y 管理环境创建环境123$ conda create --name snowflakes biopython# 也可以指定 python 版本并安装 Astroid 和 Babel$ conda create --name snowflakes python3.5 astroid babel 使用 biopython 创建一个 snowflakes 的环境 不指定目录即为默认目录 /envs 使用环境123$ activate newen# 切换回根目录 $ deactivate 显示安装过的环境1$ conda info --envs 括号显示为当前环境 切换到另一个环境1$ activate another_environment 克隆删除环境1234# 克隆 $ conda create --name flowers --clone snowflakes# 删除 $ conda remove --name flowers --all 管理 Python检查可安装的 python 版本123$ conda search --full-name python# 列出包含 python 的所有包 $ conda search python 安装 python3 环境并不覆盖 python21$ conda create --name snackes pyhton=3 包管理看安装的包和版本列表1$ conda list 查找、安装、删除123$ conda search beautifulsoup4$ conda install --name snowflakes beautifulsoup4 #未指定位置安装在当前位置 $ conda remove --name snowflakes beautifulsoup4 从 Anaconda.org 安装包1$ conda install --channel https://conda.anaconda.org/pandas bottleneck 更多命令具体参考：Getting started]]></content>
      <tags>
        <tag>skill</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初学使用 Git]]></title>
    <url>%2F2017%2F10%2F24%2F%E5%88%9D%E5%AD%A6%E4%BD%BF%E7%94%A8Git%2F</url>
    <content type="text"><![CDATA[Git 使用规范流程Git 是一个源码管理系统我采取 ThoughtBot 的 Git 使用规范流程 第一步：新建分支每次开发新功能，都应该新建一个单独的分支。123456# 获取主干最新代码 $ git checkout master$ git pull# 新建开发分支 $ git checkout -b afeature 第二步：提交分支 commit 分支修改后，提交 commit123456#all 为保存所有变化 (包括新建、修改和删除)$ git add --all# 查看发生变动的文件。$ git status#verbose 会列出 diff 的结果 $ git commit --verbose diff 是 Unix 系统的一个很重要的工具程序，具体见：读懂 diff - 阮一峰的网络日志 第三步：撰写提交信息提交 commit 时，必须给出完整扼要的提交信息。以下是一个范本：1234Persent-tense summary under 50 characters*More information about commit (under 72 characters)*More information about commit (under 72 characters)http://project.management-system.com/ticket/123 第一行是不超过 50 个字的提要，然后空一行，罗列出改动原因、主要变动、需要注意的问题。最后，提供对应的网址。 第四步：与主干同步12$ git fetch orgin$ git rebase orgin/master 第五步：合并 commit分支开发完成后，很可能有一堆 commit，但是合并到主干的时候，往往希望只有一个 (或最多两三个) commit，这样不仅清晰，也容易管理。1$ git rebase -i origin/master 具体参考：Git 使用规范流程 第六步：推送到远程仓库合并 commit，推送当前分支到远程仓库。1$ git push --force origin myfeature 第七步：发出 Pull Request提交到远程仓库以后，就可以发出 Pull Request 到 master 分支，然后请求别人进行代码 review，确认可以合并到 master。 Git 常用操作]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通向外网的梯子]]></title>
    <url>%2F2017%2F10%2F22%2F%E9%80%9A%E5%90%91%E5%A4%96%E7%BD%91%E7%9A%84%E6%A2%AF%E5%AD%90%2F</url>
    <content type="text"><![CDATA[机场最为方便 v2ray 适合自建 …]]></content>
      <tags>
        <tag>tools</tag>
        <tag>gfw</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jupyter NoteBook 常用快捷键]]></title>
    <url>%2F2017%2F10%2F21%2FJupyter-NoteBook%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[Jupyter Notebook 有两种键盘输入模式，命令模式和编辑模式。与 Vim 类似。 命令模式按 Esc 进入，编辑模式按 Enter 进入 命令模式快捷键 快捷键 作用 Shift+Enter 运行本单元，选中下一个单元 Ctrl+Enter 运行本单元 Alt+Enter 运行本单元在下插入新单元 Y 单元转入代码状态 M 单元转入 markdown 状态 R 单元转入 raw 状态 Up&amp;K/Down&amp;J 选中上方 / 下方单元 Shift+K/J 连续选择上方 / 下方单元 A/B 在上方 / 下方插入新单元 x/C 剪切 / 复制选中单元 Shift+V/V 粘贴到上方 / 下方单元 Z 恢复删除的最后一个单元 DD 删除选中的单元 Shift+M 合并选中的单元 Ctrl+S/S 保存当前文件 L 开关行号 O 转换输出 Shift+O 转换输出滚动 Esc/Q 关闭页面 H 显示快捷帮助 II/00 中断 / 重启 NOteBook 内核 Shift+Space/Space 向上 / 下滚动 编辑模式快捷键 快捷键 作用 Tab 代码补全或者缩进 Shift+Tab 提示 Ctrl+] 向右缩进 Ctrl+[ 向左缩进 Ctrl+Shift+Z/Ctrl+Y 重做 Ctrl+up/down 跳到单元开头 / 末尾 Ctrl+Left/Right 跳到左边 / 右边一个字首 Ctrl+BackSpace/Delete 删除前面一个字 Shift+Enter 运行本单元，选中下一个单元 Ctrl+M 切换到命令模式 Ctrl+Enter 运行本单元 Alt+Enter 运行本单元在下插入新单元 Ctrl+/ 注释整行或者取消注释]]></content>
      <tags>
        <tag>skill</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 上好用的软件]]></title>
    <url>%2F2017%2F10%2F14%2FWindows%E4%B8%8A%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[WoxWox： 是开源免费强大的快捷启动器辅助工具，快速高效率打开软件，搜索文件打开输入框：alt + space 同类软件也有: Listary , Rolan 包管理工具Chocolatey： 如果你认为没有包管理的操作系统是反人类的就用这个吧，Chocolatey 这套包管理系统目前已经包含了近 500 多款常用软件，常用的有 Sublime text,git,Google Chrome・・・・・・ 命令行工具 MobaXterm, 功能强大cmder： 不多说，windows 命令行神器，支持 tab 补全，支持了大部分的 Linux 命令・・・・・・ 文本编辑器Sublime text3： 基于 Python 语言的外挂 API, 跨平台（Windows、Linux 和 Mac OS X）, 兼容 TextMate 的语言标记语法。 关于软件的配置方面见：这里sublime text 3 3143 license 12345678910111213—– BEGIN LICENSE —–TwitterInc200 User LicenseEA7E-8900071D77F72E 390CDD93 4DCBA022 FAF6079061AA12C0 A37081C5 D0316412 4584D13694D7F7D4 95BC8C1C 527DA828 560BB037D1EDDD8C AE7B379F 50C9D69D B35179EF2FE898C4 8E4277A8 555CE714 E1FB0E43D5D52613 C3D12E98 BC49967F 7652EED29D2D2E61 67610860 6D338B72 5CF95C69E36B85CC 84991F19 7575D828 470A92AB—— END LICENSE —— 同类也有： VS Code： 毕竟宇宙级的 Atom：Atom 是由 GitHub 开发的自由及开放源代码的文字与代码编辑器，支持 OS X、Windows 和 Linux 操作系统，支持 Node.js 所写的插件，并内置 Git 版本控制系统。(维基百科)，插件需要科学上网 Notepad++：Notepad++，由台湾人侯今吾基于同是开放源代码的 Scintilla 文本编辑组件并独力研发，整个项目托管于 SourceForge.net 之上，并两度获得 SourceForge 社区选择奖 —— 最佳开发工具。（维基百科） 由于 sublime 现在有些功能没有， 我现在使用的是 VScode IDE没什么说的，大多数网上都能下载，JetBrains 家的东西都不错，由于对学生免费，即用教育网邮箱注册，就能获得大学在校的使用时间，分享一个用于接收 EDU 邮箱的网站：点击这里 待续 —– 注：0x13 哒的缘故，上面网址有的需要突破 GFW 的封锁，科学上网详见：这里]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
</search>
