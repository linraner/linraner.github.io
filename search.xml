<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[一次acm区域赛后的想法]]></title>
    <url>%2F2018%2F06%2F06%2F%E4%B8%80%E6%AC%A1acm%E5%8C%BA%E5%9F%9F%E8%B5%9B%E5%90%8E%E7%9A%84%E6%83%B3%E6%B3%95%2F</url>
    <content type="text"><![CDATA[这次比赛也算是进一步加深了对算法竞赛的理解把，大佬始终是大佬（做什么都是大佬）。 从大一开始接触acm到现在其实真正练习的也就大二半个学期，有时候也能感觉到，有的人总会是适合这一行，或者是不适合那一行，虽然努力是有回报的，但是计算机这个行业是比较靠天赋的把，或者说大学就是找到自己感兴趣的并为之奋斗，譬如创业or就业，我在编程这条路上走得并不是很远，2年了，也深有感触。 对我来说，算法竞赛可能不是很适合，努力只能拉短与别人的差距但不足以让你走的更远更高，这是需要天赋的，或者说区域赛的铜牌银牌吸引力不是那么的大，区域赛的时候打了一个ctf的线上赛，网络安全也是未来的一个风口，一边学习，一般做题，也刷了一千三百多分，算法熟练了，快速学习能力，思维能力也不会太差，很多东西就是相通的。大学教育在很大程度上是教会学生良好的学习方法，这些学习方法可以帮助学生快速、高效地汲取自己需要的知识。适合和兴趣，2年了，我也接触过互联网的很多领域，也该有一个选择了，或是又有点迷茫……昨天晚上又梦到了高考，或许这又是一个人生的关口吧。 acm，其实也是有天花板的。。最后附上一句话，计算机的任何东西，都不是学完再干，你学不完的。]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nothing added to commit but untracked files present解决方法]]></title>
    <url>%2F2018%2F05%2F30%2Fnothing-added-to-commit-but-untracked-files-present%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[问题描述123456789101112$ git commit On branch master Initial commit Untracked files: .gitignore Test/ blogpost/ manage.py nothing added to commit but untracked files present 文件被追踪，但是没有被添加git中 解决git status 列出当前目录所有还没有被git管理的文件和被git管理且被修改但还未提交(git commit)的文件 1234$ git add manage.py$ git add blogpost\$ git add Test\$ git add .gitignore]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c++枚举next_premutation]]></title>
    <url>%2F2018%2F05%2F28%2Fc%2B%2B%E6%9E%9A%E4%B8%BEnext_premutation%2F</url>
    <content type="text"><![CDATA[平均复杂度即为O(n)123next_permutation() 会改变区间[begin,end)内的元素次序，使它们符合“下一个排列次序”；prev_permutation() 会改变区间[begin,end)内的元素次序，使它们符合“上一个排列次序”； 1234567891011121314151617181920212223242526272829#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;void f(vector&lt;int&gt; v)&#123; for(int i=0;i&lt;v.size();i++)&#123; cout&lt;&lt;v[i]&lt;&lt;" "; &#125; cout&lt;&lt;endl;&#125;int main() &#123; vector&lt;int&gt; v; v.push_back(1); v.push_back(3); v.push_back(2); cout&lt;&lt;"原排列 ： "; f(v); for(int i=0;i&lt;10;i++)&#123; next_permutation(v.begin(),v.end());//升序序列 或者下一个排列次序 按照字典序生成下一个序列 f(v); &#125; //for(int i=0;i&lt;5;i++)&#123; // prev_permutation(v.begin(),v.end());//降序 // f(v); //&#125; return 0;&#125;]]></content>
      <tags>
        <tag>acm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu错误-Could not get lock /var/lib/dpkg/lock]]></title>
    <url>%2F2018%2F05%2F15%2FUbuntu%E9%94%99%E8%AF%AF-Could-not-get-lock-var-lib-dpkg-lock%2F</url>
    <content type="text"><![CDATA[报错信息12E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable) E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it? 解决办法查看运行的线程123ps -A | grep apt-get# sudo kill processnumber# 关闭apt进程 我的没有发现进程， 可能是上次运行安装或更新时没有正常完成造成的 终端输入12sudo rm /var/cache/apt/archives/locksudo rm /var/lib/dpkg/lock]]></content>
      <tags>
        <tag>skill</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c++ std::ios_base::sync_with_stdio 加速输入输出]]></title>
    <url>%2F2018%2F05%2F14%2Fc-std-ios-base-sync-with-stdio-%E5%8A%A0%E9%80%9F%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%2F</url>
    <content type="text"><![CDATA[static bool sync_with_stdio( bool sync = true );设置标准 C++ 流是否与标准 C 流在每次输入/输出操作后同步。 遇到cin TLE时可以用于取消cin同步, 取消之后不能和 scanf，sscanf, getchar, fgets 之类同用。 测试123456789#include &lt;iostream&gt;#include &lt;cstdio&gt; int main() &#123; std::ios::sync_with_stdio(false); std::cout &lt;&lt; "a\n"; std::printf("b\n"); std::cout &lt;&lt; "c\n";&#125; 输出 （环境 g++5.4.0）123bca 默认的情况下cin绑定的是cout，每次执行 &lt;&lt; 操作符的时候都要调用flush，这样会增加IO负担。 12std::ios::sync_with_stdio(false);std::cin.tie(0); 参考一 ： http://zh.cppreference.com/w/cpp/io/ios_base/sync_with_stdio 参考二 ：http://www.hankcs.com/program/cpp/cin-tie-with-sync_with_stdio-acceleration-input-and-output.html]]></content>
      <tags>
        <tag>acm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows10 WIFI 热点问题]]></title>
    <url>%2F2018%2F05%2F08%2FWindow-WIFI-%E7%83%AD%E7%82%B9%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[win10玄学bug之一 解决方案 ： 命令行输入12$ netsh wlan set hostednetwork mode=allow ssid=NAME key=PASSWORD$ netsh wlan start hostednetwork 然后在网络适配器的本地连接-&gt;属性-&gt;共享-&gt;设置共享刚才设置的WIFI热点]]></content>
      <tags>
        <tag>windows10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python解决字符编码问题]]></title>
    <url>%2F2018%2F05%2F05%2FPython%E8%A7%A3%E5%86%B3%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[字符串分为unicode 和 str 两种类型 文本字符和二进制数据分别用 str 和 byte表示 12345#系统默认编码设置为utf-8&gt;&gt;&gt; import sys&gt;&gt;&gt; sys.getdefultencoding'utf-8'&gt;&gt;&gt; str 与 bytes 之间的转换可以用 encode 和从decode 1234567&gt;&gt;&gt; s = "Python测试"&gt;&gt;&gt; s = s.encode()&gt;&gt;&gt; print(s)b'Python\xe6\xb5\x8b\xe8\xaf\x95'&gt;&gt;&gt; s = s.decode()&gt;&gt;&gt; print(s)'Python测试' base64123456&gt;&gt;&gt; import base64&gt;&gt;&gt; s = "asdasd"&gt;&gt;&gt; s = base64.b64encode(s)&gt;&gt;&gt; print(s)&gt;&gt;&gt; s = base64.b64decode(s)&gt;&gt;&gt; print(s) 参考 ： https://foofish.net/how-python3-handle-charset-encoding.html]]></content>
      <tags>
        <tag>skill</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BFS]]></title>
    <url>%2F2018%2F04%2F01%2FBFS%2F</url>
    <content type="text"><![CDATA[入门迷宫问题（最短路径）INPUT:1234565 5SXXXX...XX.X.....XXX....G 123456786 6.......S..X.XXX.......X..X..XX.GX... OUPUT:12810 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;iostream&gt;#include &lt;queue&gt;using namespace std;const int INF = 100000007;const int mx = 1007;typedef pair&lt;int, int&gt; P;char maze[mx][mx];//地图int n, m;int sx, sy;//开始坐标 int gx, gy;//结束坐标 int d[mx][mx];//到各个位置的最短距离数组 int dx[4] = &#123;1,0,-1,0&#125;, dy[4] = &#123;0,1,0,-1&#125;;//移动向量 //（sx,sy)----&gt;(gx,gy)最短路径//无法到达就是 INF int bfs()&#123; queue&lt;P&gt; que; //初始化所有位置为INF for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;m;j++)&#123; d[i][j]=INF; &#125; &#125; //放入起点 que.push(P(sx,sy)); d[sx][sy]=0; //队列不为空一直执行 while(que.size())&#123; //取出队列前端元素 P p=que.front(); que.pop(); //取出为终点结束搜索 if(p.first==gx&amp;&amp;p.second==gy) break; //4个方向的移动 for(int i=0;i&lt;4;i++)&#123; //移动之后的位置 int nx=p.first+dx[i], ny=p.second+dy[i]; //判断是否访问过 if(0&lt;=nx&amp;&amp;nx&lt;n&amp;&amp;0&lt;=ny&amp;&amp;ny&lt;m&amp;&amp;d[nx][ny]==INF&amp;&amp;maze[nx][ny]!='X')&#123; que.push(P(nx,ny));//放入队列， 并到该位置的距离+1 d[nx][ny]=d[p.first][p.second]+1; &#125; &#125; &#125; return d[gx][gy];&#125;void solve()&#123; int ans=bfs(); cout &lt;&lt; ans;&#125;int main() &#123; cin&gt;&gt;n&gt;&gt;m; for(int i=0;i&lt;n;i++)&#123; scanf("%s",maze[i]); for(int j=0;j&lt;m;j++)&#123; if(maze[i][j]=='S')&#123; sx=i;sy=j; &#125; if(maze[i][j]=='G')&#123; gx=i;gy=j; &#125; &#125; &#125; solve(); return 0;&#125;]]></content>
      <tags>
        <tag>acm</tag>
        <tag>图论</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[并查集]]></title>
    <url>%2F2018%2F04%2F01%2F%E5%B9%B6%E6%9F%A5%E9%9B%86%2F</url>
    <content type="text"><![CDATA[题目 : L2-010. 排座位布置宴席最微妙的事情，就是给前来参宴的各位宾客安排座位。无论如何，总不能把两个死对头排到同一张宴会桌旁！这个艰巨任务现在就交给你，对任何一对客人，请编写程序告诉主人他们是否能被安排同席。 输入格式：输入第一行给出3个正整数：N（&lt;= 100），即前来参宴的宾客总人数，则这些人从1到N编号；M为已知两两宾客之间的关系数；K为查询的条数。随后M行，每行给出一对宾客之间的关系，格式为：“宾客1 宾客2 关系”，其中“关系”为1表示是朋友，-1表示是死对头。注意两个人不可能既是朋友又是敌人。最后K行，每行给出一对需要查询的宾客编号。 这里假设朋友的朋友也是朋友。但敌人的敌人并不一定就是朋友，朋友的敌人也不一定是敌人。只有单纯直接的敌对关系才是绝对不能同席的。 输出格式：对每个查询输出一行结果：如果两位宾客之间是朋友，且没有敌对关系，则输出“No problem”；如果他们之间并不是朋友，但也不敌对，则输出“OK”；如果他们之间有敌对，然而也有共同的朋友，则输出“OK but…”；如果他们之间只有敌对关系，则输出“No way”。 输入样例：123456789101112137 8 45 6 12 7 -11 3 13 4 16 7 -11 2 11 4 12 3 -13 45 72 37 2 输出样例：1234No problemOKOK but...No way 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485/*11 8 61 21 32 45 65 76 87 910 114 63 95 911 67 83 4*/#include &lt;iostream&gt;using namespace std;int pre[100007];//节点 int enemy[1007][1007];int find(int x) &#123;//查找源头标号 int r = x; while (pre[r] != r) r = pre[r]; int i = x, j; while (i != r)//路径压缩算法 &#123; j = pre[i];//在改变他的前导点时，存储他的值 pre[i] = r; i = j;//改变他的前导点为根节点 /* 1---&gt;2---&gt;3 1---&gt;3 / / / 2 */ &#125; return r;&#125;void Union(int a, int b) &#123;//合并 a=find(a); b=find(b); if(a==b) return; if (a!=b) pre[a]=b; &#125; int main() &#123; int n,m,p; cin&gt;&gt;n&gt;&gt;m&gt;&gt;p; //初始每个元素为一个根节点 for(int i=1;i&lt;=n;i++)&#123; pre[i]=i; &#125; int a,b,c; for(int i=0;i&lt;m;i++)&#123; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c; if(c==1)&#123; Union(a,b); &#125;else&#123; enemy[a][b]=1; enemy[b][a]=1; &#125; &#125; for(int i=0;i&lt;p;i++)&#123; cin&gt;&gt;a&gt;&gt;b; if(find(a)==find(b)&amp;&amp;enemy[a][b]==0)&#123; cout&lt;&lt;"No problem"&lt;&lt;endl; &#125;else if(find(a)!=find(b)&amp;&amp;enemy[a][b]==0)&#123; cout&lt;&lt;"OK"&lt;&lt;endl; &#125;else if(find(a)==find(b)&amp;&amp;enemy[a][b]==1)&#123; cout&lt;&lt;"OK but..."&lt;&lt;endl; &#125;else if(enemy[a][b]==1)&#123; cout&lt;&lt;"No way"&lt;&lt;endl; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>acm</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DFS]]></title>
    <url>%2F2018%2F04%2F01%2FDFS%2F</url>
    <content type="text"><![CDATA[入门求连通块INPUT :1234567891011121314151 1*3 5*@*@***@***@*@*1 8@@****@*5 5 ****@*@@*@*@**@@@@*@@@**@0 0 OUTPUT :12340122 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;using namespace std;const int mx = 10007;int n, m;char field[mx][mx];//地图 void dfs(int x, int y)&#123; field[x][y] = '*';//替换现在位置 //遍历8个方向 for(int dx=-1;dx&lt;=1;dx++)&#123; for(int dy=-1;dy&lt;=1;dy++)&#123; int nx=x+dx, ny=y+dy; if(0&lt;=nx&amp;&amp;nx&lt;n&amp;&amp;0&lt;=ny&amp;&amp;ny&lt;m&amp;&amp;field[nx][ny]=='@') dfs(nx,ny); &#125; &#125; return ;&#125; void solve()&#123; int ans=0; for(int i=0;i&lt;n;i++)&#123; for(int j=0;j&lt;m;j++)&#123; //从@处开始遍历 if(field[i][j]=='@')&#123; dfs(i,j); ans++; &#125; &#125; &#125; cout&lt;&lt;ans;&#125;int main() &#123; cin&gt;&gt;n&gt;&gt;m; for(int i=0;i&lt;n;i++)&#123; scanf("%s",field[i]); &#125; solve(); return 0;&#125;]]></content>
      <tags>
        <tag>acm</tag>
        <tag>图论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[c++的字符串与数字的转换]]></title>
    <url>%2F2018%2F03%2F22%2Fc%2B%2B%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E5%AD%97%E7%9A%84%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[数字转字符串1234567#include &lt;sstream&gt;double a = 123.456;string s;stringstream ss;ss &lt;&lt; a;ss &gt;&gt; s;ss.clear(); 12345#include &lt;map&gt;map&lt;int, char&gt; m;for (int i = 0; i &lt; 10; i++) &#123; m[i] = i + '0';&#125; 1234#include &lt;cstdio&gt;char str[10];double a = 123.456;sprintf(str, "%.3lf", a); 123char str[10];int a=175;sprintf(str,"%x",a);//10进制转换成16进制，如果输出大写的字母是sprintf(str,"%X",a) 字符串转数字1234567#include &lt;sstream&gt;string s = "123.456";double a;stringstream ss;ss &lt;&lt; s;ss &gt;&gt; a;ss.clear(); 12345#include &lt;map&gt;map&lt;char, int&gt; m;for (int i = 0; i &lt; 10; i++) &#123; m[i+'0'] = i;&#125; 1234#include &lt;cstdio&gt;char str[] = "123.456";double a;sscanf(str, "%lf", &amp;a); 123char str[]="AF";int a;sscanf(str,"%x",&amp;a); //16进制转换成10进制 123456#include &lt;cstdlib&gt;int a;float b;long c;a=atoi("32");b=atof("3.1415");c=atol("567283");printf ("%d\n%f\n%d\n",a,b,c);]]></content>
      <tags>
        <tag>acm</tag>
        <tag>c++</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[世界充满谎言]]></title>
    <url>%2F2018%2F03%2F10%2F%E4%B8%96%E7%95%8C%E5%85%85%E6%BB%A1%E8%B0%8E%E8%A8%80%2F</url>
    <content type="text"><![CDATA[人与人，人与物，都会欺骗]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[信仰是理智的终结]]></title>
    <url>%2F2018%2F03%2F08%2F%E4%BF%A1%E4%BB%B0%E6%98%AF%E7%90%86%E6%99%BA%E7%9A%84%E7%BB%88%E7%BB%93%2F</url>
    <content type="text"><![CDATA[一个相信共产主义的人]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一念花开]]></title>
    <url>%2F2018%2F03%2F08%2F%E4%B8%80%E5%BF%B5%E8%8A%B1%E5%BC%80%2F</url>
    <content type="text"><![CDATA[所有的存在都是虚无的]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数论初步]]></title>
    <url>%2F2017%2F12%2F31%2F%E6%95%B0%E8%AE%BA%E5%88%9D%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[数论被“数学王子”高斯誉为整个数学王国的皇后 欧几里得算法最大公约数欧几里得的辗转相除法计算的是两个自然数a和b的最大公约数g 代码示例12345678910111213//递归int gcd(int a, int b) &#123; return b == 0 ? a : gcd(b, a % b);&#125;//迭代int gcd(int a, int b) &#123; while(b != 0) &#123; int r = b; b = a % b; a = r; &#125; return a;&#125; 唯一分解定理扩展欧几里得算法题目 直线上的点。求直线ax+by+c=0上有多少整数点(x,y)满足x&lt;-[x1, x2], y &lt;- [y1, y2]定理：若a和b为正整数，则存在整数x,y使得gcd(a,b)=ax+by 代码示例12345678910void gcd(int a, int b, int&amp; d, int&amp; x, int&amp; y) &#123; if (!b) &#123; d = a; x = 1; y = 0; &#125; else &#123; gcd(b, a % b, d, y, x); y -= x * (a / b); &#125;&#125; 素数筛选题目 代码示例123456789101112131415161718192021//一般判定是否是素数bool is_prime(int n) &#123; if (n &lt; 2) return false; for (int i = 2; i &lt;= sqrt(n); i++) &#123; if (n % i == 0) return false; &#125; return true;&#125;//普通筛选n内的素数bool* com_prime(int n) &#123; bool* ans = new bool[n]; for (int i = 0; i &lt; n; i++) ans[i] = false; for (int i = 2; i &lt; n; i++) &#123; if (is_prime(i)) ans[i] = true; &#125; return ans;&#125; 筛选法示例一、初始化如下列表。 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 二、把第一个数（2）取出来，去掉所有可以被2整除的数。 2 3 5 7 9 11 13 15 17 19 21 23 25 27 29 三、取第二个数（3），去掉所有可以被 3整除的数。 2 3 5 7 11 13 17 19 23 25 29 四、取第三个数（5），因为4已经被去除了，再去掉所有可以被5整除的数。 2 3 5 7 11 13 17 19 23 29 接下来的数是7，但是7的平方是49，其大于了30，所以我们可以停止计算了。剩下的数就是所有的质数了。 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt;#include &lt;cmath&gt;#define MAX 1000using namespace std;bool is_prime(int n) &#123; if (n &lt; 2) return false; for (int i = 2; i * i &lt;= n; i++) &#123; if (n % i == 0) return false; &#125; return true;&#125;bool* sieve_prime(int n) &#123; bool* value = new bool[n]; for (int i = 0; i &lt; n; i++) value[i] = true; value[0] = false; value[1] = false; for (int i = 2; i &lt;= sqrt(n); i++) &#123; if (value[i] &amp;&amp; is_prime(i)) &#123; int c = 2; int j = i * c; while (j &lt; n) &#123; value[j] = false; j = i * c++; &#125; &#125; &#125; return value;&#125;int main() &#123; bool* prime = sieve_prime(MAX); for (int i = 1; i &lt;=100; i++) &#123; //输出100内的素数 if (prime[i]) cout &lt;&lt; i &lt;&lt; endl; &#125;&#125; 欧拉函数欧拉函数： 在数论中，对正整数n，欧拉函数φ(n)是小于或等于n的正整数中与n互质的数的数目。它又称为Euler’s totient function、φ函数、欧拉商数等。例如 φ，因为1,3,5,7均和8互质。—— 维基百科 定理 phi(1) = 1 n为质数, phi(n) = n - 1 m 和 n 互质, phi(mn) = phi(m) * phi(n) n为奇数, phi(2n) = phi(n) 通用公式：phi(n) = n * (1 - 1 / p1) * (1 - 1 / p2) * ... * (1 - 1 / pr)其中 n = p1^k1 * p2^k2 * ... * pr^kr 具体参考： 看云-欧拉函数 常规代码123456789101112int phi(int n) &#123; int t = n; for (int i = 2; i &lt;= n; i++) &#123; if (n % i == 0) &#123; n /= i; t = t - t / i; &#125; while (n % i == 0) n /= i; &#125; return t;&#125; 时间复杂度O(n),对于1e9会超时。 改良之后123456789101112131415int phi(int n) &#123; int t = n; //降低时间复杂度 for (int i = 2; i * i &lt;= n; i++) &#123; if (n % i == 0) &#123; n /= i; t = t - t / i; &#125; while (n % i == 0) n /= i; &#125; if (n &gt; 1) t = t - t / n; return t;&#125;]]></content>
      <tags>
        <tag>acm</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[scanf中的正则表达式]]></title>
    <url>%2F2017%2F12%2F01%2Fscanf%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[调用格式: scanf(&quot;&lt;格式化字符串&gt;&quot;, &lt;地址表&gt;);一、为变量赋值时表示成功读取变量的个数, &lt;格式化字符串&gt;与&lt;地址表&gt;是严格匹配的 12scanf("%c %c", &amp;a, &amp;b); //函数返回值是2，并丢弃不想使用的空白符scanf("%d,%d", &amp;a, &amp;b); //输入必须有逗号， 多个空格为一个空格 二、 %s 读取遇到空格停止读取，因此一般可以用fgets去读取字符串 123scanf("%[a-z]", &amp;str); //遇到不再a-z字符停止读取scanf("666%[0-9]", &amp;str); //666开头并且在0-9字符读取，不是则停止scanf("%[^\n]", &amp;str); //^表示求反集，即这句话不是回车一直开始读取 三、压缩输入：在格式码前加上*，则用户就可以告诉scanf()读这个域，但不把它赋予任何变量。 1scanf("%c%*c, &amp;ch); 使用此方法可以在字符处理时吃掉多余的回车。 更多正则表达式语言参考 sscanf、scanf的一些示例12]]></content>
      <tags>
        <tag>acm</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git问题：Everything up-to-date解决]]></title>
    <url>%2F2017%2F11%2F04%2FGit%E9%97%AE%E9%A2%98%EF%BC%9AEverything-up-to-date%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[push代码时遇到提示：Everything up-to-date,无法push代码原因是git提交改动到缓存，要push的时候不会将本地所有的分支都push掉，所以出现这个问题。我们应该告诉git提交哪个分支。 解决在stackoverflow有解决方案 创建分支123$ git branch newbranch#查看分支$ git branch 切换分支1$ git checkout newbranch 改动提交到新的分支12$ git add .$ git commit -a 合并到master123$ git merge newbranch#查看冲突$ git diff push代码1$ git push -u origin master 删除分支1$ git branch -D newbranch 删除合并部分大写D改为小写d]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快速幂]]></title>
    <url>%2F2017%2F10%2F31%2F%E5%BF%AB%E9%80%9F%E5%B9%82%2F</url>
    <content type="text"><![CDATA[快速幂 通常算法：123456789int Pow(int A, int n)&#123; if(n == 0) return 1; int rslt(1); for(int i(0); i &lt; n; ++i) rslt *= A; return rslt;&#125; 其复杂度是O(n)的。一般来说，这样的复杂度并不会使我们困惑，但是一般应用幂运算的地方，指数都会非常非常的大，比如1 000 000 000这个级别的，这时候我们会遇到两个问题，第一个就是我们不能再用int来存储整数，必须用高精度整数类型来进行存储，另一个就是在指数是如此变态的数量级之下，我们的计算量会骤然上升，结果也会异常惊人的大。简单来说就是二分法。举个栗子：一般解法：A^8 = A * A * A * A * A * A * A * A总共需要7次乘法运算 平均分解：A^8 = (A * A * A * A) * (A * A * A * A) = (A * A * A * A) ^ 2这样我们就只需要4次乘法运算 再分解：A^6 = [(A * A) * (A * A)] ^ 2 = [(A * A) ^ 2] ^ 2这样就将乘法运算的次数减少为了3次 这种二分解法可以将原本n次的运算减少为logn / log2，这样的效果是惊人的，在1 000 000 000这样数量级的指数运算下，该方法可以将运算次数减少到30次 整数的快速幂：1234567891011121314151617int qPow(int A, int n)&#123; if(n == 0) return 1; int rslt(1); while(n) &#123; if(n &amp; 1) // 若幂为奇数 &#123; rslt *= A; &#125; A *= A; n &gt;&gt;= 1; // 右位移等价于除以2 &#125; return rslt;&#125; 矩阵类的代码：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768class Matrix&#123;public: int N; // 矩阵维数 int** m; // 存储矩阵的二维数组 Matrix(int n = 2) &#123; m = new int*[n]; for(int i(0); i &lt; n; ++i) &#123; m[i] = new int[n]; &#125; N = n; clear(); &#125; // 将矩阵清空为零矩阵 void clear() &#123; for(int i(0); i &lt; N; ++i) &#123; memset(m[i], 0, sizeof(int) * N); &#125; &#125; // 将矩阵设定为单位矩阵 void unit() &#123; clear(); for(int i(0); i &lt; N; ++i) &#123; m[i][i] = 1; &#125; &#125; // 矩阵的赋值 Matrix operator= (Matrix &amp;othr) &#123; Matrix(othr.N); for(int i(0); i &lt; othr.N; ++i) &#123; for(int j(0); j &lt; othr.N; ++j) &#123; m[i][j] = othr.m[i][j]; &#125; &#125; return *this; &#125; // 矩阵的乘法 //!假设所有因子均为同阶方阵 Matrix operator* (Matrix &amp;othr) &#123; Matrix rslt(othr.N); for(int i(0); i &lt; othr.N; ++i) &#123; for(int j(0); j &lt; othr.N; ++j) &#123; for(int k(0); k &lt; othr.N; ++k) &#123; rslt.m[i][j] += m[i][k] * othr.m[k][j]; &#125; &#125; &#125; return rslt; &#125;&#125;; 矩阵快速幂的算法:12345678910111213141516Matrix qMPow(Matrix &amp;A, int n)&#123; Matrix rslt(A.N); rslt.unit(); if(n == 0) return rslt; while(n) &#123; if(n &amp; 1) // 若幂为奇数 &#123; rslt = rslt * A; &#125; A = A * A; n &gt;&gt;= 1; // 右位移等价于除以2 &#125; return rslt;&#125;]]></content>
      <tags>
        <tag>acm</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[conda常用操作(windows)]]></title>
    <url>%2F2017%2F10%2F28%2Fconda%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[管理conda验证安装1$ conda --version 命令参阅可以用: conda –help 将conda更新到最新123$ conda update conda#有最新选择yesProceed ([y]/n)? y 管理环境创建环境123$ conda create --name snowflakes biopython#也可以指定python版本并安装Astroid和Babel$ conda create --name snowflakes python3.5 astroid babel 使用biopython创建一个snowflakes的环境 不指定目录即为默认目录/envs 使用环境123$ activate newen#切换回根目录$ deactivate 显示安装过的环境1$ conda info --envs 括号显示为当前环境 切换到另一个环境1$ activate another_environment 克隆删除环境1234#克隆$ conda create --name flowers --clone snowflakes#删除$ conda remove --name flowers --all 管理Python检查可安装的python版本123$ conda search --full-name python#列出包含python的所有包$ conda search python 安装python3环境并不覆盖python21$ conda create --name snackes pyhton=3 包管理看安装的包和版本列表1$ conda list 查找、安装、删除123$ conda search beautifulsoup4$ conda install --name snowflakes beautifulsoup4 #未指定位置安装在当前位置$ conda remove --name snowflakes beautifulsoup4 从Anaconda.org安装包1$ conda install --channel https://conda.anaconda.org/pandas bottleneck 更多命令具体参考：Getting started]]></content>
      <tags>
        <tag>tools</tag>
        <tag>skill</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初学使用Github]]></title>
    <url>%2F2017%2F10%2F24%2F%E5%88%9D%E5%AD%A6%E4%BD%BF%E7%94%A8Git%2F</url>
    <content type="text"><![CDATA[Git使用规范流程Git是一个源码管理系统我采取ThoughtBot的Git使用规范流程 第一步：新建分支每次开发新功能，都应该新建一个单独的分支。123456#获取主干最新代码$ git checkout master$ git pull#新建开发分支$ git checkout -b afeature 第二步：提交分支commit分支修改后，提交commit123456#all为保存所有变化(包括新建、修改和删除)$ git add --all#查看发生变动的文件。$ git status#verbose会列出diff的结果$ git commit --verbose diff是Unix系统的一个很重要的工具程序，具体见：读懂diff - 阮一峰的网络日志 第三步：撰写提交信息提交commit时，必须给出完整扼要的提交信息。以下是一个范本：1234Persent-tense summary under 50 characters*More information about commit(under 72 characters)*More information about commit(under 72 characters)http://project.management-system.com/ticket/123 第一行是不超过50个字的提要，然后空一行，罗列出改动原因、主要变动、需要注意的问题。最后，提供对应的网址。 第四步：与主干同步12$ git fetch orgin$ git rebase orgin/master 第五步：合并commit分支开发完成后，很可能有一堆commit，但是合并到主干的时候，往往希望只有一个(或最多两三个) commit，这样不仅清晰，也容易管理。1$ git rebase -i origin/master 具体参考：Git 使用规范流程 第六步：推送到远程仓库合并commit，推送当前分支到远程仓库。1$ git push --force origin myfeature 第七步：发出Pull Request提交到远程仓库以后，就可以发出Pull Request 到master 分支，然后请求别人进行代码review，确认可以合并到master。 Git常用操作]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[通向外网的梯子]]></title>
    <url>%2F2017%2F10%2F22%2F%E9%80%9A%E5%90%91%E5%A4%96%E7%BD%91%E7%9A%84%E6%A2%AF%E5%AD%90%2F</url>
    <content type="text"><![CDATA[现在最优雅的方式 ： SSR 一些收集 ：]]></content>
      <tags>
        <tag>tools</tag>
        <tag>gfw</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jupyter NoteBook常用快捷键]]></title>
    <url>%2F2017%2F10%2F21%2FJupyter-NoteBook%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[Jupyter Notebook 有两种键盘输入模式，命令模式和编辑模式。与Vim类似。 命令模式按Esc进入，编辑模式按Enter进入 命令模式快捷键 快捷键 作用 Shift+Enter 运行本单元，选中下一个单元 Ctrl+Enter 运行本单元 Alt+Enter 运行本单元在下插入新单元 Y 单元转入代码状态 M 单元转入markdown状态 R 单元转入raw状态 Up&amp;K/Down&amp;J 选中上方/下方单元 Shift+K/J 连续选择上方/下方单元 A/B 在上方/下方插入新单元 x/C 剪切/复制选中单元 Shift+V/V 粘贴到上方/下方单元 Z 恢复删除的最后一个单元 DD 删除选中的单元 Shift+M 合并选中的单元 Ctrl+S/S 保存当前文件 L 开关行号 O 转换输出 Shift+O 转换输出滚动 Esc/Q 关闭页面 H 显示快捷帮助 II/00 中断/重启NOteBook内核 Shift+Space/Space 向上/下滚动 编辑模式快捷键 快捷键 作用 Tab 代码补全或者缩进 Shift+Tab 提示 Ctrl+] 向右缩进 Ctrl+[ 向左缩进 Ctrl+Shift+Z/Ctrl+Y 重做 Ctrl+up/down 跳到单元开头/末尾 Ctrl+Left/Right 跳到左边/右边一个字首 Ctrl+BackSpace/Delete 删除前面一个字 Shift+Enter 运行本单元，选中下一个单元 Ctrl+M 切换到命令模式 Ctrl+Enter 运行本单元 Alt+Enter 运行本单元在下插入新单元 Ctrl+/ 注释整行或者取消注释]]></content>
      <tags>
        <tag>tools</tag>
        <tag>skill</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows上好用的软件]]></title>
    <url>%2F2017%2F10%2F14%2FWindows%E4%B8%8A%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[WoxWox：是开源免费强大的快捷启动器辅助工具，快速高效率打开软件,搜索文件打开输入框：alt + space 同类软件也有: Listary , Rolan 包管理工具Chocolatey：如果你认为没有包管理的操作系统是反人类的就用这个吧，Chocolatey 这套包管理系统目前已经包含了近 500 多款常用软件，常用的有Sublime text,git,Google Chrome······ 命令行工具MobaXterm, 功能强大cmder： 不多说，windows命令行神器，支持tab补全，支持了大部分的Linux命令······ 文本编辑器Sublime text3：基于 Python 语言的外挂 API,跨平台（Windows、Linux 和 Mac OS X）,兼容 TextMate 的语言标记语法。关于软件的配置方面见：这里sublime text 3 3143 license 12345678910111213—– BEGIN LICENSE —–TwitterInc200 User LicenseEA7E-8900071D77F72E 390CDD93 4DCBA022 FAF6079061AA12C0 A37081C5 D0316412 4584D13694D7F7D4 95BC8C1C 527DA828 560BB037D1EDDD8C AE7B379F 50C9D69D B35179EF2FE898C4 8E4277A8 555CE714 E1FB0E43D5D52613 C3D12E98 BC49967F 7652EED29D2D2E61 67610860 6D338B72 5CF95C69E36B85CC 84991F19 7575D828 470A92AB—— END LICENSE —— 同类也有： VS Code：毕竟宇宙级的 Atom：Atom是由GitHub开发的自由及开放源代码的文字与代码编辑器，支持OS X、Windows和Linux操作系统，支持Node.js所写的插件，并内置Git版本控制系统。(维基百科)，插件需要科学上网 Notepad++：Notepad++，由台湾人侯今吾基于同是开放源代码的Scintilla文本编辑组件并独力研发，整个项目托管于SourceForge.net之上，并两度获得SourceForge社区选择奖——最佳开发工具。（维基百科） 由于sublime现在有些功能没有， 我现在使用的是VScode IDE没什么说的，大多数网上都能下载，JetBrains家的东西都不错，由于对学生免费，即用教育网邮箱注册，就能获得大学在校的使用时间，分享一个用于接收EDU邮箱的网站：点击这里 待续—– 注：0x13哒的缘故，上面网址有的需要突破GFW的封锁，科学上网详见：这里]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github+hexo搭建博客]]></title>
    <url>%2F2017%2F10%2F13%2Fgithub-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页。 准备 Node.js：点击 Github账号：点击注册 Git：点击 WindowsNode.js在命令行输入:12$ node -v$ npm -v 显示版本信息即可进行下一步 Git配置文档]]></content>
      <tags>
        <tag>skill</tag>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
